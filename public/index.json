[{"authors":["Ben"],"categories":null,"content":"I am an Assistant Professor at Michigan State University in the Department of Economics and a faculty affiliate in the Social Science Data Analytics Program. Prior to coming to MSU, I was a Postdoctoral Research Fellow at Harvard University and a Visiting Scholar at Harvard Business School. My research focuses on the intersection of psychology and economics \u0026ndash; also known as behavioral economics \u0026ndash; and has appeared in the American Economic Review and Neuron. Prior to coming to Michigan State University, I worked with the U.S. Army to help soldiers become more psychologically resilient.\nI hold a Ph.D. in Social Science (Economics) from the California Institute of Technology (Caltech), and a B.S. in Economics from the University of Oregon.\n","date":-62135596800,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1627916210,"objectID":"bf008f22d9b0754cde4f6972811c28b7","permalink":"https://ssc442.netlify.app/authors/ben/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/authors/ben/","section":"authors","summary":"I am an Assistant Professor at Michigan State University in the Department of Economics and a faculty affiliate in the Social Science Data Analytics Program. Prior to coming to MSU, I was a Postdoctoral Research Fellow at Harvard University and a Visiting Scholar at Harvard Business School. My research focuses on the intersection of psychology and economics \u0026ndash; also known as behavioral economics \u0026ndash; and has appeared in the American Economic Review and Neuron.","tags":null,"title":"Ben Bushong","type":"authors"},{"authors":["Justin"],"categories":null,"content":"I am an Assistant Professor at Michigan State University who has not yet filled out this description.\nI hold a Ph.D. in Environmental Economics from Duke University, an M.E.M. in Environmental Policy and Economics from Duke University, and a B.S. in Environmental Policy Analysis and City Planning from the University of California at Davis.\n","date":-62135596800,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1627916210,"objectID":"8422260f0f3251af15c00666a8df9838","permalink":"https://ssc442.netlify.app/authors/justin/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/authors/justin/","section":"authors","summary":"I am an Assistant Professor at Michigan State University who has not yet filled out this description.\nI hold a Ph.D. in Environmental Economics from Duke University, an M.E.M. in Environmental Policy and Economics from Duke University, and a B.S. in Environmental Policy Analysis and City Planning from the University of California at Davis.","tags":null,"title":"Justin Kirkpatrick","type":"authors"},{"authors":null,"categories":null,"content":"  In these (modestly) secret pages, I’ve included some resources for those who read the syllabus closely.\nIf you’re stuck with anything or want help with, say, using markdown, you’ll find some basic guidance here. Additionally, there are links throughout to outside resources.\n","date":-62135596800,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1629136382,"objectID":"8939c748f3090c6f91bdac5d32db55ec","permalink":"https://ssc442.netlify.app/resource/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/resource/","section":"resource","summary":"In these (modestly) secret pages, I’ve included some resources for those who read the syllabus closely.\nIf you’re stuck with anything or want help with, say, using markdown, you’ll find some basic guidance here. Additionally, there are links throughout to outside resources.","tags":null,"title":"Helpful resources","type":"docs"},{"authors":null,"categories":null,"content":"  Each week has a set of required readings that you should complete before coming to the (online) Tuesday lecture. That is, you should complete the reading, attend Tuesday class, then do the associated “exercises” (contained within the reading) before Thursday. You will be working each week’s lab between Tuesday afternoon and whenever the labs are due. Don’t forget your weekly writing, due Sunday at 11:59pm.\nThe course content is structured as follows. For each topic, we begin with a set of questions that might guide your reading and help frame your thoughts. These questions can serve as helpful starting places for your thinking; they are not representative of the totality of the content and are not intended to be limiting. You should not try to respond to all of these (or any of them if you don’t want to)—they’ll just help you know what to look for and think about as you read.\nIn the (hopefully unlikely) scenario that we go back to Zoom, all lecture videos will be posted to our SSC442 channel on YouTube .\n","date":1630454400,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1631031640,"objectID":"1413f960ec974b9863bc45d887efa8bd","permalink":"https://ssc442.netlify.app/content/","publishdate":"2021-09-01T00:00:00Z","relpermalink":"/content/","section":"content","summary":"Each week has a set of required readings that you should complete before coming to the (online) Tuesday lecture. That is, you should complete the reading, attend Tuesday class, then do the associated “exercises” (contained within the reading) before Thursday. You will be working each week’s lab between Tuesday afternoon and whenever the labs are due. Don’t forget your weekly writing, due Sunday at 11:59pm.\nThe course content is structured as follows.","tags":null,"title":"Readings, lectures, and videos","type":"docs"},{"authors":null,"categories":null,"content":"   Weekly Writings  Weekly Writing Template  Labs Projects Final project   This course is the capstone of the Data Analytics Minor in the College of Social Science. Accordingly, you should—fingers crossed—enjoy data analysis. You will get the most of out this class if you:\nEngage with the readings and lecture materials Regularly use R (aka engage daily or almost every day in some way)  Each type of assignment in this class helps with one of these strategies.\nDownload and save the following files (right-click to Save Link As…)\n  Weekly writing template\n  Lab assignment template\n  Weekly Writings To encourage you to actively engage with the course content, you will write a ≈150 word memorandum about the reading or lecture each week. That’s fairly short: there are ≈250 words on a typical double-spaced page. You must complete eleven of these in the course. I will drop your one lowest weekly writing score. Your actual prompt will be assigned in class, so you must login each day to ensure you get these assignments. To keep you on your toes, we will vary whether these are assigned on Tuesdays or Thursdays. Each week’s weekly writing will be due on D2L by 11:59pm on Sunday\nYou can do a lot of different things with this memo: discuss something you learned from the course content, write about the best or worst data visualization you saw recently, connect the course content to your own work, etc. These reflections let you explore and answer some of the key questions of this course, including:\n When is a link correlational vs causal? How can we still make useful statements about non-causal things? Why do we visualize data? What makes a great data analysis? What makes a bad analysis? How do you choose which kind of analysis method to use? What is the role of the data structure in choosing an analysis? Can we be flexible?  The course content for each day will also include a set of questions specific to that topic. You do not have to answer all (or any) of these questions. That would be impossible. They exist to guide your thinking and to make complex reading more digestible. The specific topic for each week will be assigned in class. (We can’t emphasize this enough.)\nThe TA will grade these mini-exercises using a very simple system:\n ✔+: (11.5 points (115%) in gradebook) Work shows phenomenal thought and engagement with the course content. We will not assign these often. ✔: (10 points (100%) in gradebook) Work is thoughtful, well-written, and shows engagement with the course content. This is the expected level of performance. ✔−: (5 points (50%) in gradebook) Work is hastily composed, too short, and/or only cursorily engages with the course content. This grade signals that you need to improve next time. I will hopefully not assign these often.  (There is an implicit 0 above for work that is not turned in by Saturday at 11:59pm). Notice that this is essentially a pass/fail or completion-based system. We’re not grading your writing ability; we’re not counting the exact number of words you’re writing; and we’re not looking for encyclopedic citations of every single reading to prove that you did indeed read everything. We are looking for thoughtful engagement. Read the material, engage with the work and you’ll get a ✓.\nWeekly Writing Template You will turn these reflections in via D2L. You will write them using R Markdown and this weekly writing template (right-click to Save Link As…) . You must knit your work to a PDF document (this will be what you turn in). D2L will have eleven weekly writing assignments available. Upload your first weekly writing assignment to number 1, your second (regardless of which week you are writing on) to number 2, etc.\n  Labs Each week of the course has fully annotated examples of code that teach and demonstrate how to do specific tasks in R. However, without practicing these principles and making graphics on your own, you won’t remember what you learn.\nPlease do not do labs ahead of time. I am updating the assignments as the semester proceeds, and you may do an entire assignment that is completely changed.\nFor example, to practice working with ggplot2 and making data-based graphics, you will complete a brief set of exercises over a few class sessions. These exercises will have 1–3 short tasks that are directly related to the topic for the week. You need to show that you made a good faith effort to work each question. There will also be a final question which requires significantly more thought and work. This will be where you get to show some creativity and stretch your abilities. Overall, labs will be graded the same check system:\n ✔+: (17.5 points (115%) in gradebook) Exercises are complete. Every task was attempted and answered, and most answers are correct. Knitted document is clean and easy to follow. Work on the final problem shows creativity or is otherwise exceptional. We will not assign these often. ✔: (15 points (100%) in gradebook) Exercises are complete and most answers are correct. This is the expected level of performance. ✔−: (7.5 points (50%) in gradebook) Exercises are less than 70% complete and/or most answers are incorrect. This indicates that you need to improve next time. We will hopefully not assign these often, but subpar work can expect a ✔−.  There is an implicit 0 for any assignment not turned in on time. If you have only partial work, then turn that in for partial credit. As noted in the syllabus, we are not grading your coding ability. We are not checking each line of code to make sure it produces some exact final figure, and we do not expect perfection. Also note that a ✓ does not require 100% success. You will sometimes get stuck with weird errors that you can’t solve, or the demands of pandemic living might occasionally become overwhelming. We are looking for good faith effort. Try hard, engage with the task, and you’ll get a ✓.\nYou may work together on the labs, but you must turn in your own answers. You will turn these labs in via D2L. You will write them using R Markdown and must knit your work to a PDF document.\n Projects To give you practice with the data and design principles you’ll learn in this class, you will complete two projects en route to the overarching final project of the course. Both these mini projects and the final project must be completed in groups.\nThe two (mini) projects are checkpoints to ensure you’re working on your project seriously. They will be graded using a check system:\n ✔+: (55 points (≈115%) in gradebook) Project is phenomenally well-designed and uses advanced R techniques. The project uncovers an important story that is not readily apparent from just looking at the raw data. I will not assign these often. ✔: (50 points (100%) in gradebook) Project is fine, follows most design principles, answers a question from the data, and uses R correctly. This is the expected level of performance. ✔−: (25 points (50%) in gradebook) Project is missing large components, is poorly designed, does not answer a relevant question, and/or uses R incorrectly. This indicates that you need to improve next time. I will hopefully not assign these often.  Because these mini projects give you practice for the final project, we will provide you with substantial feedback on your design and code.\n Final project At the end of the course, you will demonstrate your skills by completing a final project. Complete details for the final project (including past examples of excellent projects) are here. In brief, the final project has the following elements:\nYou must find existing data to analyze.1 Aggregating data from multiple sources is encouraged, but is not required.  You must visualize (at least) three interesting features of that data. Visualizations should aid the reader in understanding something about the data that might not be readily aparent.2  You must come up with some analysis—using tools from the course—which relates your data to either a prediction or a policy conclusion. For example, if you collected data from Major League Baseball games, you could try to “predict” whether a left-hander was pitching based solely on the outcomes of the batsmen.3  You must write your analysis as if presenting to a C-suite executive. If you are not familiar with this terminology, the C-suite includes, e.g., the CEO, CFO, and COO of a given company. Generally speaking, such executives are not particularly analytically oriented, and therefore your explanations need to be clear, consise (their time is valuable) and contain actionable (or valuable) information.  There is no final exam. This project is your final exam.\nThe project will not be graded using a check system, and will be graded by me (the main instructor, not a TA). I will evaluate the following four elements of your project:\nTechnical skills: Was the project easy? Does it showcase mastery of data analysis? Visual design: Was the information smartly conveyed and usable? Was it beautiful? Analytic design: Was the analysis appropriate? Was it sensible, given the dataset? Story: Did we learn something?  If you’ve engaged with the course content and completed the exercises and mini projects throughout the course, you should do just fine with the final project.\n  Note that existing is taken to mean that you are not permitted to collect data by interacting with other people. That is not to say that you cannot gather data that previously has not been gathered into a single place—this sort of exercise is encouraged.↩︎\n Pie charts of any kind will result in a 25% grade deduction.↩︎\n This is an extremely dumb idea for a number of reasons. Moreover, it’s worth mentioning that sports data, while rich, can be overwhelming due to its sheer magnitude and the variety of approaches that can be applied. Use with caution.↩︎\n   ","date":-62135596800,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1631023984,"objectID":"3aa23ffb1eb3dedbe4d8a9c2165e2c58","permalink":"https://ssc442.netlify.app/assignment/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/assignment/","section":"assignment","summary":"Weekly Writings  Weekly Writing Template  Labs Projects Final project   This course is the capstone of the Data Analytics Minor in the College of Social Science. Accordingly, you should—fingers crossed—enjoy data analysis. You will get the most of out this class if you:\nEngage with the readings and lecture materials Regularly use R (aka engage daily or almost every day in some way)  Each type of assignment in this class helps with one of these strategies.","tags":null,"title":"Assignments and Evaluations","type":"docs"},{"authors":null,"categories":null,"content":"  This section contains the content covered in Thursday lectures and some annotated R code that you can use as a reference for creating your own work. The intention is that in the Content section, you will sequentially build up your understanding of R and data analytics; here, you can see how all the pieces work together.\nVisit this section after you have finished the readings in the Content section and any supplemental lecture videos.\nIn class, we will work with R in real time and post the day’s examples in a video linked at the end.1 Hopefully, you’ll find it useful to watch the practice of coding. You’ll also notice me make all sorts of errors. This is normal. If you’re finding yourself making lots of errors and generally struggling to get your code to run, start by working with the final code and reverse-engineer the solution you want.\nAll lecture videos are posted to our SSC442 channel on Mediaspace \u0026lt;fa-s .\n I might edit these videos for length and because I like to talk to myself when I’m programming. Also, too much swearing.↩︎\n   ","date":-62135596800,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1631626585,"objectID":"00e8826988eea7dfc8b8047b4c0184ce","permalink":"https://ssc442.netlify.app/example/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/example/","section":"example","summary":"This section contains the content covered in Thursday lectures and some annotated R code that you can use as a reference for creating your own work. The intention is that in the Content section, you will sequentially build up your understanding of R and data analytics; here, you can see how all the pieces work together.\nVisit this section after you have finished the readings in the Content section and any supplemental lecture videos.","tags":null,"title":"Practical Content in This Class","type":"docs"},{"authors":null,"categories":null,"content":"    Part 1: Statistical Inference and Polls  Polls  The sampling model for polls  Populations, samples, parameters, and estimates  The sample average Parameters Polling versus forecasting Properties of our estimate: expected value and standard error  Central Limit Theorem  A Monte Carlo simulation The spread Bias: why not run a very large poll?   Part 2: (Supplemental) Additional Visualization Techniques  Code  Load and clean data Histograms Density plots Box, violin, and rain cloud plots     Probabilistic thinking is central in the human experience. How we describe that thinking is mixed, but most of the time we use (rather imprecise) language. With only a few moments of searching, one can find thousands of articles that use probabilistic words to describe events. Here are some examples:\n “‘Highly unlikely’ State of the Union will happen amid shutdown” – The Hill\n  “Tiger Woods makes Masters 15th and most improbable major” – Fox\n  “Trump predicts ‘very good chance’ of China trade deal” – CNN\n Yet people don’t have a good sense of what these things mean. Uncertainty is key to data analytics: if we were certain of things, A study in the 1960s explored the perception of probabilistic words like these among NATO officers. A more modern replication of this found the following basic pattern:\nA deep, basic fact about humans is that we struggle to understand probabilities. But visualizing things can help. The graphic above shows the uncertainty about uncertainty (very meta). We can convey all manner of uncertainty with clever graphics. Today’s practical example works through some of the myriad of ways to visualize variable data. We’ll cover some territory that we’ve already hit, in hopes of locking in some key concepts.\nPart 1: Statistical Inference and Polls In this Example we will describe, in some detail, how poll aggregators such as FiveThirtyEight use data to predict election outcomes. To understand how they do this, we first need to learn the basics of Statistical Inference, the part of statistics that helps distinguish patterns arising from signal from those arising from chance. Statistical inference is a broad topic and here we go over the very basics using polls as a motivating example. To describe the concepts, we complement the mathematical formulas with Monte Carlo simulations and R code.\nPolls Opinion polling has been conducted since the 19th century. The general goal is to describe the opinions held by a specific population on a given set of topics. In recent times, these polls have been pervasive during presidential elections. Polls are useful when interviewing every member of a particular population is logistically impossible. The general strategy is to interview a smaller group, chosen at random, and then infer the opinions of the entire population from the opinions of the smaller group. Statistical theory is used to justify the process. This theory is referred to as inference and it is the main topic of this chapter.\nPerhaps the best known opinion polls are those conducted to determine which candidate is preferred by voters in a given election. Political strategists make extensive use of polls to decide, among other things, how to invest resources. For example, they may want to know in which geographical locations to focus their “get out the vote” efforts.\nElections are a particularly interesting case of opinion polls because the actual opinion of the entire population is revealed on election day. Of course, it costs millions of dollars to run an actual election which makes polling a cost effective strategy for those that want to forecast the results.\nAlthough typically the results of these polls are kept private, similar polls are conducted by news organizations because results tend to be of interest to the general public and made public. We will eventually be looking at such data.\nReal Clear Politics1 is an example of a news aggregator that organizes and publishes poll results. For example, they present the following poll results reporting estimates of the popular vote for the 2016 presidential election2:\n  Poll  Date  Sample  MoE  Clinton  Trump  Spread      Final Results  –  –  –  48.2  46.1  Clinton +2.1    RCP Average  11/1 - 11/7  –  –  46.8  43.6  Clinton +3.2    Bloomberg  11/4 - 11/6  799 LV  3.5  46.0  43.0  Clinton +3    IBD  11/4 - 11/7  1107 LV  3.1  43.0  42.0  Clinton +1    Economist  11/4 - 11/7  3669 LV  –  49.0  45.0  Clinton +4    LA Times  11/1 - 11/7  2935 LV  4.5  44.0  47.0  Trump +3    ABC  11/3 - 11/6  2220 LV  2.5  49.0  46.0  Clinton +3    FOX News  11/3 - 11/6  1295 LV  2.5  48.0  44.0  Clinton +4    Monmouth  11/3 - 11/6  748 LV  3.6  50.0  44.0  Clinton +6    NBC News  11/3 - 11/5  1282 LV  2.7  48.0  43.0  Clinton +5    CBS News  11/2 - 11/6  1426 LV  3.0  47.0  43.0  Clinton +4    Reuters  11/2 - 11/6  2196 LV  2.3  44.0  39.0  Clinton +5     Although in the United States the popular vote does not determine the result of the presidential election, we will use it as an illustrative and simple example of how well polls work. Forecasting the election is a more complex process since it involves combining results from 50 states and DC and we will go into some detail on this later.\nLet’s make some observations about the table above. First, note that different polls, all taken days before the election, report a different spread: the estimated difference between support for the two candidates. Notice also that the reported spreads hover around what ended up being the actual result: Clinton won the popular vote by 2.1%. We also see a column titled MoE which stands for margin of error.\nIn this example, we will show how the probability concepts we learned in the previous content can be applied to develop the statistical approaches that make polls an effective tool. We will learn the statistical concepts necessary to define estimates and margins of errors, and show how we can use these to forecast final results relatively well and also provide an estimate of the precision of our forecast. Once we learn this, we will be able to understand two concepts that are ubiquitous in data science: confidence intervals and p-values. Finally, to understand probabilistic statements about the probability of a candidate winning, we will have to learn about Bayesian modeling. In the final sections, we put it all together to recreate the simplified version of the FiveThirtyEight model and apply it to the 2016 election.\nWe start by connecting probability theory to the task of using polls to learn about a population.\nThe sampling model for polls To help us understand the connection between polls and what we have learned, let’s construct a similar situation to the one pollsters face. To mimic the challenge real pollsters face in terms of competing with other pollsters for media attention, we will use an urn full of beads to represent voters and pretend we are competing for a $25 dollar prize. The challenge is to guess the spread between the proportion of blue and red beads in this hypothetical urn.\nBefore making a prediction, you can take a sample (with replacement) from the urn. To mimic the fact that running polls is expensive, it costs you 10 cents per each bead you sample. Therefore, if your sample size is 250, and you win, you will break even since you will pay \\$25 to collect your \\$25 prize. Your entry into the competition can be an interval. If the interval you submit contains the true proportion, you get half what you paid and pass to the second phase of the competition. In the second phase, the entry with the smallest interval is selected as the winner.\nThe dslabs package includes a function that shows a random draw from this urn:\nlibrary(tidyverse) library(dslabs) take_poll(25) Think about how you would construct your interval based on the data shown above.\nWe have just described a simple sampling model for opinion polls. The beads inside the urn represent the individuals that will vote on election day. Those that will vote for the Republican candidate are represented with red beads and the Democrats with the blue beads. For simplicity, assume there are no other colors. That is, that there are just two parties: Republican and Democratic.\n  Populations, samples, parameters, and estimates We want to predict the proportion of blue beads in the urn. Let’s call this quantity \\(p\\), which then tells us the proportion of red beads \\(1-p\\), and the spread \\(p - (1-p)\\), which simplifies to \\(2p - 1\\).\nIn statistical textbooks, the beads in the urn are called the population. The proportion of blue beads in the population \\(p\\) is called a parameter. The 25 beads we see in the previous plot are called a sample. The task of statistical inference is to predict the parameter \\(p\\) using the observed data in the sample.\nCan we do this with the 25 observations above? It is certainly informative. For example, given that we see 13 red and 12 blue beads, it is unlikely that \\(p\\) \u0026gt; .9 or \\(p\\) \u0026lt; .1. But are we ready to predict with certainty that there are more red beads than blue in the jar?\nWe want to construct an estimate of \\(p\\) using only the information we observe. An estimate should be thought of as a summary of the observed data that we think is informative about the parameter of interest. It seems intuitive to think that the proportion of blue beads in the sample \\(0.48\\) must be at least related to the actual proportion \\(p\\). But do we simply predict \\(p\\) to be 0.48? First, remember that the sample proportion is a random variable. If we run the command take_poll(25) four times, we get a different answer each time, since the sample proportion is a random variable.\nNote that in the four random samples shown above, the sample proportions range from 0.44 to 0.60. By describing the distribution of this random variable, we will be able to gain insights into how good this estimate is and how we can make it better.\nThe sample average Conducting an opinion poll is being modeled as taking a random sample from an urn. We are proposing the use of the proportion of blue beads in our sample as an estimate of the parameter \\(p\\). Once we have this estimate, we can easily report an estimate for the spread \\(2p-1\\), but for simplicity we will illustrate the concepts for estimating \\(p\\). We will use our knowledge of probability to defend our use of the sample proportion and quantify how close we think it is from the population proportion \\(p\\).\nWe start by defining the random variable \\(X\\) as: \\(X=1\\) if we pick a blue bead at random and \\(X=0\\) if it is red. This implies that the population is a list of 0s and 1s. If we sample \\(N\\) beads, then the average of the draws \\(X_1, \\dots, X_N\\) is equivalent to the proportion of blue beads in our sample. This is because adding the \\(X\\)s is equivalent to counting the blue beads and dividing this count by the total \\(N\\) is equivalent to computing a proportion. We use the symbol \\(\\bar{X}\\) to represent this average. In general, in statistics textbooks a bar on top of a symbol means the average. The theory we just learned about the sum of draws becomes useful because the average is a sum of draws multiplied by the constant \\(1/N\\):\n\\[\\bar{X} = 1/N \\times \\sum_{i=1}^N X_i\\]\nFor simplicity, let’s assume that the draws are independent: after we see each sampled bead, we return it to the urn. In this case, what do we know about the distribution of the sum of draws? First, we know that the expected value of the sum of draws is \\(N\\) times the average of the values in the urn. We know that the average of the 0s and 1s in the urn must be \\(p\\), the proportion of blue beads.\nHere we encounter an important difference with what we did in the Probability chapter: we don’t know what is in the urn. We know there are blue and red beads, but we don’t know how many of each. This is what we want to find out: we are trying to estimate \\(p\\).\n Parameters Just like we use variables to define unknowns in systems of equations, in statistical inference we define parameters to define unknown parts of our models. In the urn model which we are using to mimic an opinion poll, we do not know the proportion of blue beads in the urn. We define the parameters \\(p\\) to represent this quantity. \\(p\\) is the average of the urn because if we take the average of the 1s (blue) and 0s (red), we get the proportion of blue beads. Since our main goal is figuring out what is \\(p\\), we are going to estimate this parameter.\nThe ideas presented here on how we estimate parameters, and provide insights into how good these estimates are, extrapolate to many data science tasks. For example, we may want to determine the difference in health improvement between patients receiving treatment and a control group. We may ask, what are the health effects of smoking on a population? What are the differences in racial groups of fatal shootings by police? What is the rate of change in life expectancy in the US during the last 10 years? All these questions can be framed as a task of estimating a parameter from a sample.\n Polling versus forecasting Before we continue, let’s make an important clarification related to the practical problem of forecasting the election. If a poll is conducted four months before the election, it is estimating the \\(p\\) for that moment and not for election day. The \\(p\\) for election night might be different since people’s opinions fluctuate through time. The polls provided the night before the election tend to be the most accurate since opinions don’t change that much in a day. However, forecasters try to build tools that model how opinions vary across time and try to predict the election night results taking into consideration the fact that opinions fluctuate. We will describe some approaches for doing this in a later section.\n Properties of our estimate: expected value and standard error To understand how good our estimate is, we will describe the statistical properties of the random variable defined above: the sample proportion \\(\\bar{X}\\). Remember that \\(\\bar{X}\\) is the sum of independent draws so the rules we covered in the probability chapter apply.\nUsing what we have learned, the expected value of the sum \\(N\\bar{X}\\) is \\(N \\times\\) the average of the urn, \\(p\\). So dividing by the non-random constant \\(N\\) gives us that the expected value of the average \\(\\bar{X}\\) is \\(p\\). We can write it using our mathematical notation:\n\\[ \\mbox{E}(\\bar{X}) = p \\]\nWe can also use what we learned to figure out the standard error: the standard error of the sum is \\(\\sqrt{N} \\times\\) the standard deviation of the urn. Can we compute the standard error of the urn? We learned a formula that tells us that it is \\((1-0) \\sqrt{p (1-p)}\\) = \\(\\sqrt{p (1-p)}\\). Because we are dividing the sum by \\(N\\), we arrive at the following formula for the standard error of the average:\n\\[ \\mbox{SE}(\\bar{X}) = \\sqrt{p(1-p)/N} \\]\nThis result reveals the power of polls. The expected value of the sample proportion \\(\\bar{X}\\) is the parameter of interest \\(p\\) and we can make the standard error as small as we want by increasing \\(N\\). The law of large numbers tells us that with a large enough poll, our estimate converges to \\(p\\).\nIf we take a large enough poll to make our standard error about 1%, we will be quite certain about who will win. But how large does the poll have to be for the standard error to be this small?\nOne problem is that we do not know \\(p\\), so we can’t compute the standard error. However, for illustrative purposes, let’s assume that \\(p=0.51\\) and make a plot of the standard error versus the sample size \\(N\\):\nFrom the plot we see that we would need a poll of over 10,000 people to get the standard error that low. We rarely see polls of this size due in part to costs. From the Real Clear Politics table, we learn that the sample sizes in opinion polls range from 500-3,500 people. For a sample size of 1,000 and \\(p=0.51\\), the standard error is:\nsqrt(p*(1-p))/sqrt(1000) ## [1] 0.01580823 or 1.5 percentage points. So even with large polls, for close elections, \\(\\bar{X}\\) can lead us astray if we don’t realize it is a random variable. Nonetheless, we can actually say more about how close we get the \\(p\\).\n  Central Limit Theorem The Central Limit Theorem (CLT) tells us that the distribution function for a sum of draws is approximately normal. You also may recall that dividing a normally distributed random variable by a constant is also a normally distributed variable. This implies that the distribution of \\(\\bar{X}\\) is approximately normal.\nIn summary, we have that \\(\\bar{X}\\) has an approximately normal distribution with expected value \\(p\\) and standard error \\(\\sqrt{p(1-p)/N}\\).\nNow how does this help us? Suppose we want to know what is the probability that we are within 1% from \\(p\\). We are basically asking what is\n\\[ \\mbox{Pr}(| \\bar{X} - p| \\leq .01) \\] which is the same as:\n\\[ \\mbox{Pr}(\\bar{X}\\leq p + .01) - \\mbox{Pr}(\\bar{X} \\leq p - .01) \\]\nCan we answer this question? We can use the mathematical trick we learned in the previous chapter. Subtract the expected value and divide by the standard error to get a standard normal random variable, call it \\(Z\\), on the left. Since \\(p\\) is the expected value and \\(\\mbox{SE}(\\bar{X}) = \\sqrt{p(1-p)/N}\\) is the standard error we get:\n\\[ \\mbox{Pr}\\left(Z \\leq \\frac{ \\,.01} {\\mbox{SE}(\\bar{X})} \\right) - \\mbox{Pr}\\left(Z \\leq - \\frac{ \\,.01} {\\mbox{SE}(\\bar{X})} \\right) \\]\nOne problem we have is that since we don’t know \\(p\\), we don’t know \\(\\mbox{SE}(\\bar{X})\\). But it turns out that the CLT still works if we estimate the standard error by using \\(\\bar{X}\\) in place of \\(p\\). We say that we plug-in the estimate. Our estimate of the standard error is therefore:\n\\[ \\hat{\\mbox{SE}}(\\bar{X})=\\sqrt{\\bar{X}(1-\\bar{X})/N} \\] In statistics textbooks, we use a little hat to denote estimates. The estimate can be constructed using the observed data and \\(N\\).\nNow we continue with our calculation, but dividing by \\(\\hat{\\mbox{SE}}(\\bar{X})=\\sqrt{\\bar{X}(1-\\bar{X})/N})\\) instead. In our first sample we had 12 blue and 13 red so \\(\\bar{X} = 0.48\\) and our estimate of standard error is:\nx_hat \u0026lt;- 0.48 se \u0026lt;- sqrt(x_hat*(1-x_hat)/25) se ## [1] 0.09991997 And now we can answer the question of the probability of being close to \\(p\\). The answer is:\npnorm(0.01/se) - pnorm(-0.01/se) ## [1] 0.07971926 Therefore, there is a small chance that we will be close. A poll of only \\(N=25\\) people is not really very useful, at least not for a close election.\nEarlier we mentioned the margin of error. Now we can define it because it is simply two times the standard error, which we can now estimate. In our case it is:\n1.96*se ## [1] 0.1958431 Why do we multiply by 1.96? Because if you ask what is the probability that we are within 1.96 standard errors from \\(p\\), we get:\n\\[ \\mbox{Pr}\\left(Z \\leq \\, 1.96\\,\\mbox{SE}(\\bar{X}) / \\mbox{SE}(\\bar{X}) \\right) - \\mbox{Pr}\\left(Z \\leq - 1.96\\, \\mbox{SE}(\\bar{X}) / \\mbox{SE}(\\bar{X}) \\right) \\] which is:\n\\[ \\mbox{Pr}\\left(Z \\leq 1.96 \\right) - \\mbox{Pr}\\left(Z \\leq - 1.96\\right) \\]\nwhich we know is about 95%:\npnorm(1.96)-pnorm(-1.96) ## [1] 0.9500042 Hence, there is a 95% probability that \\(\\bar{X}\\) will be within \\(1.96\\times \\hat{SE}(\\bar{X})\\), in our case within about 0.2, of \\(p\\). Note that 95% is somewhat of an arbitrary choice and sometimes other percentages are used, but it is the most commonly used value to define margin of error. We often round 1.96 up to 2 for simplicity of presentation.\nIn summary, the CLT tells us that our poll based on a sample size of \\(25\\) is not very useful. We don’t really learn much when the margin of error is this large. All we can really say is that the popular vote will not be won by a large margin. This is why pollsters tend to use larger sample sizes.\nFrom the table above, we see that typical sample sizes range from 700 to 3500. To see how this gives us a much more practical result, notice that if we had obtained a \\(\\bar{X}\\)=0.48 with a sample size of 2,000, our standard error \\(\\hat{\\mbox{SE}}(\\bar{X})\\) would have been 0.0111714. So our result is an estimate of 48% with a margin of error of 2%. In this case, the result is much more informative and would make us think that there are more red balls than blue. Keep in mind, however, that this is hypothetical. We did not take a poll of 2,000 since we don’t want to ruin the competition.\nA Monte Carlo simulation Suppose we want to use a Monte Carlo simulation to corroborate the tools we have built using probability theory. To create the simulation, we would write code like this:\nB \u0026lt;- 10000 N \u0026lt;- 1000 x_hat \u0026lt;- replicate(B, { x \u0026lt;- sample(c(0,1), size = N, replace = TRUE, prob = c(1-p, p)) mean(x) }) The problem is, of course, we don’t know p. We could construct an urn like the one pictured above and run an analog (without a computer) simulation. It would take a long time, but you could take 10,000 samples, count the beads and keep track of the proportions of blue. We can use the function take_poll(n=1000) instead of drawing from an actual urn, but it would still take time to count the beads and enter the results.\nOne thing we therefore do to corroborate theoretical results is to pick one or several values of p and run the simulations. Let’s set p=0.45. We can then simulate a poll:\np \u0026lt;- 0.45 N \u0026lt;- 1000 x \u0026lt;- sample(c(0,1), size = N, replace = TRUE, prob = c(1-p, p)) x_hat \u0026lt;- mean(x) In this particular sample, our estimate is x_hat. We can use that code to do a Monte Carlo simulation:\nB \u0026lt;- 10000 x_hat \u0026lt;- replicate(B, { x \u0026lt;- sample(c(0,1), size = N, replace = TRUE, prob = c(1-p, p)) mean(x) }) To review, the theory tells us that \\(\\bar{X}\\) is approximately normally distributed, has expected value \\(p=\\) 0.45 and standard error \\(\\sqrt{p(1-p)/N}\\) = 0.0157321. The simulation confirms this:\nmean(x_hat) ## [1] 0.4500761 sd(x_hat) ## [1] 0.01579523 A histogram and qq-plot confirm that the normal approximation is accurate as well:\nOf course, in real life we would never be able to run such an experiment because we don’t know \\(p\\). But we could run it for various values of \\(p\\) and \\(N\\) and see that the theory does indeed work well for most values. You can easily do this by re-running the code above after changing p and N.\n The spread The competition is to predict the spread, not the proportion \\(p\\). However, because we are assuming there are only two parties, we know that the spread is \\(p - (1-p) = 2p - 1\\). As a result, everything we have done can easily be adapted to an estimate of \\(2p - 1\\). Once we have our estimate \\(\\bar{X}\\) and \\(\\hat{\\mbox{SE}}(\\bar{X})\\), we estimate the spread with \\(2\\bar{X} - 1\\) and, since we are multiplying by 2, the standard error is \\(2\\hat{\\mbox{SE}}(\\bar{X})\\). Note that subtracting 1 does not add any variability so it does not affect the standard error.\nFor our 25 item sample above, our estimate \\(p\\) is .48 with margin of error .20 and our estimate of the spread is 0.04 with margin of error .40. Again, not a very useful sample size. However, the point is that once we have an estimate and standard error for \\(p\\), we have it for the spread \\(2p-1\\).\n Bias: why not run a very large poll? For realistic values of \\(p\\), say from 0.35 to 0.65, if we run a very large poll with 100,000 people, theory tells us that we would predict the election perfectly since the largest possible margin of error is around 0.3%:\nOne reason is that running such a poll is very expensive. Another possibly more important reason is that theory has its limitations. Polling is much more complicated than picking beads from an urn. Some people might lie to pollsters and others might not have phones. But perhaps the most important way an actual poll differs from an urn model is that we actually don’t know for sure who is in our population and who is not. How do we know who is going to vote? Are we reaching all possible voters? Hence, even if our margin of error is very small, it might not be exactly right that our expected value is \\(p\\). We call this bias. Historically, we observe that polls are indeed biased, although not by that much. The typical bias appears to be about 1-2%. This makes election forecasting a bit more interesting and we will talk about how to model this shortly.\n   Part 2: (Supplemental) Additional Visualization Techniques For this second part of the example, we’re going to use historical weather data from Dark Sky about wind speed and temperature trends for downtown Atlanta (specifically 33.754557, -84.390009) in 2019. We downloaded this data using Dark Sky’s (about-to-be-retired-because-they-were-bought-by-Apple) API using the darksky package.\nIf you want to follow along with this example, you can download the data below (you’ll likely need to right click and choose “Save Link As…”):\n  atl-weather-2019.csv  Code Load and clean data First, we load the libraries we’ll be using:\nlibrary(tidyverse) library(lubridate) library(ggridges) library(gghalves) Then we load the data with read_csv(). Here we assume that the CSV file lives in a subfolder in my project named data. Naturally, you’ll need to point this to wherever you stashed the data.\nweather_atl_raw \u0026lt;- read_csv(\u0026quot;data/atl-weather-2019.csv\u0026quot;) We’ll add a couple columns that we can use for faceting and filling using the month() and wday() functions from lubridate for extracting parts of the date:\nweather_atl \u0026lt;- weather_atl_raw %\u0026gt;% mutate(Month = month(time, label = TRUE, abbr = FALSE), Day = wday(time, label = TRUE, abbr = FALSE)) Now we’re ready to go!\n Histograms We can first make a histogram of wind speed. We’ll use a bin width of 1 and color the edges of the bars white:\nggplot(weather_atl, aes(x = windSpeed)) + geom_histogram(binwidth = 1, color = \u0026quot;white\u0026quot;) This is fine enough, but we can improve it by forcing the buckets/bins to start at whole numbers instead of containing ranges like 2.5–3.5. We’ll use the boundary argument for that. We also add scale_x_continuous() to add our own x-axis breaks instead of having things like 2.5, 5, and 7.5:\nggplot(weather_atl, aes(x = windSpeed)) + geom_histogram(binwidth = 1, color = \u0026quot;white\u0026quot;, boundary = 1) + scale_x_continuous(breaks = seq(0, 12, by = 1)) We can show the distribution of wind speed by month if we map the Month column we made onto the fill aesthetic:\nggplot(weather_atl, aes(x = windSpeed, fill = Month)) + geom_histogram(binwidth = 1, color = \u0026quot;white\u0026quot;, boundary = 1) + scale_x_continuous(breaks = seq(0, 12, by = 1)) This is colorful, but it’s impossible to actually interpret. Instead of only filling, we’ll also facet by month to see separate graphs for each month. We can turn off the fill legend because it’s now redundant.\nggplot(weather_atl, aes(x = windSpeed, fill = Month)) + geom_histogram(binwidth = 1, color = \u0026quot;white\u0026quot;, boundary = 1) + scale_x_continuous(breaks = seq(0, 12, by = 1)) + guides(fill = FALSE) + facet_wrap(vars(Month)) ## Warning: `guides(\u0026lt;scale\u0026gt; = FALSE)` is deprecated. Please use `guides(\u0026lt;scale\u0026gt; = ## \u0026quot;none\u0026quot;)` instead. Neat! January, March, and April appear to have the most variation in windy days, with a few wind-less days and a few very-windy days, while August was very wind-less.\n Density plots The code to create a density plot is nearly identical to what we used for the histogram—the only thing we change is the geom layer:\nggplot(weather_atl, aes(x = windSpeed)) + geom_density(color = \u0026quot;grey20\u0026quot;, fill = \u0026quot;grey50\u0026quot;) If we want, we can mess with some of the calculus options like the kernel and bandwidth:\nggplot(weather_atl, aes(x = windSpeed)) + geom_density(color = \u0026quot;grey20\u0026quot;, fill = \u0026quot;grey50\u0026quot;, bw = 0.1, kernel = \u0026quot;epanechnikov\u0026quot;) We can also fill by month. We’ll make the different layers 50% transparent so we can kind of see through the whole stack:\nggplot(weather_atl, aes(x = windSpeed, fill = Month)) + geom_density(alpha = 0.5) Even with the transparency, this is really hard to interpret. We can fix this by faceting, like we did with the histograms:\nggplot(weather_atl, aes(x = windSpeed, fill = Month)) + geom_density(alpha = 0.5) + guides(fill = FALSE) + facet_wrap(vars(Month)) ## Warning: `guides(\u0026lt;scale\u0026gt; = FALSE)` is deprecated. Please use `guides(\u0026lt;scale\u0026gt; = ## \u0026quot;none\u0026quot;)` instead. Or we can stack the density plots behind each other with ggridges. For that to work, we also need to map Month to the y-axis. We can reverse the y-axis so that January is at the top if we use the fct_rev() function:\nggplot(weather_atl, aes(x = windSpeed, y = fct_rev(Month), fill = Month)) + geom_density_ridges() + guides(fill = FALSE) ## Warning: `guides(\u0026lt;scale\u0026gt; = FALSE)` is deprecated. Please use `guides(\u0026lt;scale\u0026gt; = ## \u0026quot;none\u0026quot;)` instead. We can add some extra information to geom_density_ridges() with some other arguments like quantile_lines. We can use the quantiles argument to tell the plow how many parts to be cut into. Since we just want to show the median, we’ll set that to 2 so each density plot is divided in half:\nggplot(weather_atl, aes(x = windSpeed, y = fct_rev(Month), fill = Month)) + geom_density_ridges(quantile_lines = TRUE, quantiles = 2) + guides(fill = FALSE) ## Warning: `guides(\u0026lt;scale\u0026gt; = FALSE)` is deprecated. Please use `guides(\u0026lt;scale\u0026gt; = ## \u0026quot;none\u0026quot;)` instead. Now that we have good working code, we can easily substitute in other variables by changing the x mapping:\nggplot(weather_atl, aes(x = temperatureHigh, y = fct_rev(Month), fill = Month)) + geom_density_ridges(quantile_lines = TRUE, quantiles = 2) + guides(fill = FALSE) ## Warning: `guides(\u0026lt;scale\u0026gt; = FALSE)` is deprecated. Please use `guides(\u0026lt;scale\u0026gt; = ## \u0026quot;none\u0026quot;)` instead. We can get extra fancy if we fill by temperature instead of filling by month. To get this to work, we need to use geom_density_ridges_gradient(), and we need to change the fill mapping to the strange looking ..x.., which is a weird ggplot trick that tells it to use the variable we mapped to the x-axis. For whatever reason, fill = temperatureHigh doesn’t work 🤷:\nggplot(weather_atl, aes(x = temperatureHigh, y = fct_rev(Month), fill = ..x..)) + geom_density_ridges_gradient(quantile_lines = TRUE, quantiles = 2) + scale_fill_viridis_c(option = \u0026quot;plasma\u0026quot;) + labs(x = \u0026quot;High temperature\u0026quot;, y = NULL, color = \u0026quot;Temp\u0026quot;) And finally, we can get extra fancy and show the distributions for both the high and low temperatures each month. To make this work, we need to manipulate the data a little. Right now there are two columns for high and low temperature: temperatureLow and temperatureHigh. To be able to map temperature to the x-axis and high vs. low to another aesthetic (like linetype), we need a column with the temperature and a column with an indicator variable for whether it is high or low. This data needs to be tidied (since right now we have a variable (high/low) encoded in the column name). We can tidy this data using pivot_longer() from tidyr, which was already loaded with library(tidyverse). In the RStudio primers, you did this same thing with gather()—pivot_longer() is the newer version of gather():\nweather_atl_long \u0026lt;- weather_atl %\u0026gt;% pivot_longer(cols = c(temperatureLow, temperatureHigh), names_to = \u0026quot;temp_type\u0026quot;, values_to = \u0026quot;temp\u0026quot;) %\u0026gt;% # Clean up the new temp_type column so that \u0026quot;temperatureHigh\u0026quot; becomes \u0026quot;High\u0026quot;, etc. mutate(temp_type = recode(temp_type, temperatureHigh = \u0026quot;High\u0026quot;, temperatureLow = \u0026quot;Low\u0026quot;)) %\u0026gt;% # This is optional—just select a handful of columns select(time, temp_type, temp, Month) # Show the first few rows head(weather_atl_long) ## # A tibble: 6 × 4 ## time temp_type temp Month ## \u0026lt;dttm\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;ord\u0026gt; ## 1 2019-01-01 05:00:00 Low 50.6 January ## 2 2019-01-01 05:00:00 High 63.9 January ## 3 2019-01-02 05:00:00 Low 49.0 January ## 4 2019-01-02 05:00:00 High 57.4 January ## 5 2019-01-03 05:00:00 Low 53.1 January ## 6 2019-01-03 05:00:00 High 55.3 January Now we have a column for the temperature (temp) and a column indicating if it is high or low (temp_type). The dataset is also twice as long (730 rows) because each day has two rows (high and low). Let’s plot it and map high/low to the linetype aesthetic to show high/low in the border of the plots:\nggplot(weather_atl_long, aes(x = temp, y = fct_rev(Month), fill = ..x.., linetype = temp_type)) + geom_density_ridges_gradient(quantile_lines = TRUE, quantiles = 2) + scale_fill_viridis_c(option = \u0026quot;plasma\u0026quot;) + labs(x = \u0026quot;High temperature\u0026quot;, y = NULL, color = \u0026quot;Temp\u0026quot;) We can see much wider temperature disparities during the summer, with large gaps between high and low, and relatively equal high/low temperatures during the winter.\n Box, violin, and rain cloud plots Finally, we can look at the distribution of variables with box plots, violin plots, and other similar graphs. First, we’ll make a box plot of windspeed, filled by the Day variable we made indicating weekday:\nggplot(weather_atl, aes(y = windSpeed, fill = Day)) + geom_boxplot() We can switch this to a violin plot by just changing the geom layer and mapping Day to the x-axis:\nggplot(weather_atl, aes(y = windSpeed, x = Day, fill = Day)) + geom_violin() With violin plots it’s typically good to overlay other geoms. We can add some jittered points for a strip plot:\nggplot(weather_atl, aes(y = windSpeed, x = Day, fill = Day)) + geom_violin() + geom_point(size = 0.5, position = position_jitter(width = 0.1)) + guides(fill = FALSE) ## Warning: `guides(\u0026lt;scale\u0026gt; = FALSE)` is deprecated. Please use `guides(\u0026lt;scale\u0026gt; = ## \u0026quot;none\u0026quot;)` instead. We can also add larger points for the daily averages. We’ll use a special layer for this: stat_summary(). It has a slightly different syntax, since we’re not actually mapping a column from the dataset. Instead, we’re feeding a column from a dataset into a function (here \"mean\") and then plotting that result:\nggplot(weather_atl, aes(y = windSpeed, x = Day, fill = Day)) + geom_violin() + stat_summary(geom = \u0026quot;point\u0026quot;, fun = \u0026quot;mean\u0026quot;, size = 5, color = \u0026quot;white\u0026quot;) + geom_point(size = 0.5, position = position_jitter(width = 0.1)) + guides(fill = FALSE) ## Warning: `guides(\u0026lt;scale\u0026gt; = FALSE)` is deprecated. Please use `guides(\u0026lt;scale\u0026gt; = ## \u0026quot;none\u0026quot;)` instead. We can also show the mean and confidence interval at the same time by changing the summary function:\nggplot(weather_atl, aes(y = windSpeed, x = Day, fill = Day)) + geom_violin() + stat_summary(geom = \u0026quot;pointrange\u0026quot;, fun.data = \u0026quot;mean_se\u0026quot;, size = 1, color = \u0026quot;white\u0026quot;) + geom_point(size = 0.5, position = position_jitter(width = 0.1)) + guides(fill = FALSE) ## Warning: `guides(\u0026lt;scale\u0026gt; = FALSE)` is deprecated. Please use `guides(\u0026lt;scale\u0026gt; = ## \u0026quot;none\u0026quot;)` instead. Overlaying the points directly on top of the violins shows extra information, but it’s also really crowded and hard to read. If we use the gghalves package, we can use special halved versions of some of these geoms like so:\nggplot(weather_atl, aes(x = fct_rev(Day), y = temperatureHigh)) + geom_half_point(aes(color = Day), side = \u0026quot;l\u0026quot;, size = 0.5) + geom_half_boxplot(aes(fill = Day), side = \u0026quot;r\u0026quot;) + guides(color = FALSE, fill = FALSE) ## Warning: `guides(\u0026lt;scale\u0026gt; = FALSE)` is deprecated. Please use `guides(\u0026lt;scale\u0026gt; = ## \u0026quot;none\u0026quot;)` instead. Note the side argument for specifying which half of the column the geom goes. We can also use geom_half_violin():\nggplot(weather_atl, aes(x = fct_rev(Day), y = temperatureHigh)) + geom_half_point(aes(color = Day), side = \u0026quot;l\u0026quot;, size = 0.5) + geom_half_violin(aes(fill = Day), side = \u0026quot;r\u0026quot;) + guides(color = FALSE, fill = FALSE) ## Warning: `guides(\u0026lt;scale\u0026gt; = FALSE)` is deprecated. Please use `guides(\u0026lt;scale\u0026gt; = ## \u0026quot;none\u0026quot;)` instead. If we flip the plot, we can make a rain cloud plot:\nggplot(weather_atl, aes(x = fct_rev(Day), y = temperatureHigh)) + geom_half_boxplot(aes(fill = Day), side = \u0026quot;l\u0026quot;, width = 0.5, nudge = 0.1) + geom_half_point(aes(color = Day), side = \u0026quot;l\u0026quot;, size = 0.5) + geom_half_violin(aes(fill = Day), side = \u0026quot;r\u0026quot;) + guides(color = FALSE, fill = FALSE) + coord_flip() ## Warning: `guides(\u0026lt;scale\u0026gt; = FALSE)` is deprecated. Please use `guides(\u0026lt;scale\u0026gt; = ## \u0026quot;none\u0026quot;)` instead.     http://www.realclearpolitics.com↩︎\n http://www.realclearpolitics.com/epolls/2016/president/us/general_election_trump_vs_clinton-5491.html↩︎\n   ","date":1632960000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1633019298,"objectID":"ac11eb4b300887ac6e4fc5c1906670ba","permalink":"https://ssc442.netlify.app/example/05-example/","publishdate":"2021-09-30T00:00:00Z","relpermalink":"/example/05-example/","section":"example","summary":"Part 1: Statistical Inference and Polls  Polls  The sampling model for polls  Populations, samples, parameters, and estimates  The sample average Parameters Polling versus forecasting Properties of our estimate: expected value and standard error  Central Limit Theorem  A Monte Carlo simulation The spread Bias: why not run a very large poll?   Part 2: (Supplemental) Additional Visualization Techniques  Code  Load and clean data Histograms Density plots Box, violin, and rain cloud plots     Probabilistic thinking is central in the human experience.","tags":null,"title":"Visualizing Uncertainty","type":"docs"},{"authors":null,"categories":null,"content":"    Statistical models  Poll aggregators  Poll data Pollster bias  Data-driven models    NOTE\nYou must turn in a PDF document of your R Markdown code. Submit this to D2L by 11:59 PM Eastern Time on Sunday, October 3rd.\n For this exercise you will need to ensure that you’ve carefully read this week’s content and example. We will build on both. The exercises (which you will turn in as this week’s lab) are at the bottom. Note that this week’s lab is much more theoretical than any other week in this class. This is to ensure that you have the foundations necessary to build rich statistical models and apply them to real-world data.\nStatistical models  “All models are wrong, but some are useful.” –George E. P. Box\n The day before the 2008 presidential election, Nate Silver’s FiveThirtyEight stated that “Barack Obama appears poised for a decisive electoral victory”. They went further and predicted that Obama would win the election with 349 electoral votes to 189, and the popular vote by a margin of 6.1%. FiveThirtyEight also attached a probabilistic statement to their prediction claiming that Obama had a 91% chance of winning the election. The predictions were quite accurate since, in the final results, Obama won the electoral college 365 to 173 and the popular vote by a 7.2% difference. Their performance in the 2008 election brought FiveThirtyEight to the attention of political pundits and TV personalities. Four years later, the week before the 2012 presidential election, FiveThirtyEight’s Nate Silver was giving Obama a 90% chance of winning despite many of the experts thinking the final results would be closer. Political commentator Joe Scarborough said during his show1:\n Anybody that thinks that this race is anything but a toss-up right now is such an ideologue … they’re jokes.\n To which Nate Silver responded via Twitter:\n If you think it’s a toss-up, let’s bet. If Obama wins, you donate $1,000 to the American Red Cross. If Romney wins, I do. Deal?\n In 2016, Silver was not as certain and gave Hillary Clinton only a 71% of winning. In contrast, most other forecasters were almost certain she would win. She lost. But 71% is still more than 50%, so was Mr. Silver wrong? And what does probability mean in this context anyway? Are dice being tossed somewhere?\nIn this lab we will demonstrate how poll aggregators, such as FiveThirtyEight, collected and combined data reported by different experts to produce improved predictions. We will introduce ideas behind the statistical models, also known as probability models, that were used by poll aggregators to improve election forecasts beyond the power of individual polls. First, we’ll motivate the models, building on the statistical inference concepts we learned in this week’s content and example. We start with relatively simple models, realizing that the actual data science exercise of forecasting elections involves rather complex ones. We will introduce such modeks towards the end of this section of the course.\nPoll aggregators A few weeks before the 2012 election Nate Silver was giving Obama a 90% chance of winning. How was Mr. Silver so confident? We will use a Monte Carlo simulation to illustrate the insight Mr. Silver had and others missed. To do this, we generate results for 12 polls taken the week before the election. We mimic sample sizes from actual polls and construct and report 95% confidence intervals for each of the 12 polls. We save the results from this simulation in a data frame and add a poll ID column.\nlibrary(tidyverse) library(dslabs) d \u0026lt;- 0.039 Ns \u0026lt;- c(1298, 533, 1342, 897, 774, 254, 812, 324, 1291, 1056, 2172, 516) p \u0026lt;- (d + 1) / 2 polls \u0026lt;- map_df(Ns, function(N) { x \u0026lt;- sample(c(0,1), size=N, replace=TRUE, prob=c(1-p, p)) x_hat \u0026lt;- mean(x) se_hat \u0026lt;- sqrt(x_hat * (1 - x_hat) / N) list(estimate = 2 * x_hat - 1, low = 2*(x_hat - 1.96*se_hat) - 1, high = 2*(x_hat + 1.96*se_hat) - 1, sample_size = N) }) %\u0026gt;% mutate(poll = seq_along(Ns)) Here is a visualization showing the intervals the pollsters would have reported for the difference between Obama and Romney:\nNot surprisingly, all 12 polls report confidence intervals that include the election night result (dashed line). However, all 12 polls also include 0 (solid black line) as well. Therefore, if asked individually for a prediction, the pollsters would have to say: it’s a toss-up. Below we describe a key insight they are missing.\nPoll aggregators, such as Nate Silver, realized that by combining the results of different polls you could greatly improve precision. By doing this, we are effectively conducting a poll with a huge sample size. We can therefore report a smaller 95% confidence interval and a more precise prediction.\nAlthough as aggregators we do not have access to the raw poll data, we can use mathematics to reconstruct what we would have obtained had we made one large poll with:\nsum(polls$sample_size) ## [1] 11269 participants. Basically, we construct an estimate of the spread, let’s call it \\(d\\), with a weighted average in the following way:\nd_hat \u0026lt;- polls %\u0026gt;% summarize(avg = sum(estimate*sample_size) / sum(sample_size)) %\u0026gt;% pull(avg) Once we have an estimate of \\(d\\), we can construct an estimate for the proportion voting for Obama, which we can then use to estimate the standard error. Once we do this, we see that our margin of error is 0.0184545.\nThus, we can predict that the spread will be 3.1 plus or minus 1.8, which not only includes the actual result we eventually observed on election night, but is quite far from including 0. Once we combine the 12 polls, we become quite certain that Obama will win the popular vote.\nOf course, this was just a simulation to illustrate the idea. The actual data science exercise of forecasting elections is much more complicated and it involves modeling. Below we explain how pollsters fit multilevel models to the data and use this to forecast election results. In the 2008 and 2012 US presidential elections, Nate Silver used this approach to make an almost perfect prediction and silence the pundits.\nSince the 2008 elections, other organizations have started their own election forecasting group that, like Nate Silver’s, aggregates polling data and uses statistical models to make predictions. In 2016, forecasters underestimated Trump’s chances of winning greatly. The day before the election the New York Times reported2 the following probabilities for Hillary Clinton winning the presidency:\n   NYT  538  HuffPost  PW  PEC  DK  Cook  Roth      Win Prob  85%  71%  98%  89%  \u0026gt;99%  92%  Lean Dem  Lean Dem     For example, the Princeton Election Consortium (PEC) gave Trump less than 1% chance of winning, while the Huffington Post gave him a 2% chance. In contrast, FiveThirtyEight had Trump’s probability of winning at 29%, higher than tossing two coins and getting two heads. In fact, four days before the election FiveThirtyEight published an article titled Trump Is Just A Normal Polling Error Behind Clinton3. By understanding statistical models and how these forecasters use them, we will start to understand how this happened.\nAlthough not nearly as interesting as predicting the electoral college, for illustrative purposes we will start by looking at predictions for the popular vote. FiveThirtyEight predicted a 3.6% advantage for Clinton4, included the actual result of 2.1% (48.2% to 46.1%) in their interval, and was much more confident about Clinton winning the election, giving her an 81.4% chance. Their prediction was summarized with a chart like this:\nThe colored areas represent values with an 80% chance of including the actual result, according to the FiveThirtyEight model. We introduce actual data from the 2016 US presidential election to show how models are motivated and built to produce these predictions. To understand the “81.4% chance” statement we need to describe Bayesian statistics, which we do in Sections ?? and ??.\nPoll data We use public polling data organized by FiveThirtyEight for the 2016 presidential election. The data is included as part of the dslabs package:\ndata(polls_us_election_2016) The table includes results for national polls, as well as state polls, taken during the year prior to the election. For this first example, we will filter the data to include national polls conducted during the week before the election. We also remove polls that FiveThirtyEight has determined not to be reliable and graded with a “B” or less. Some polls have not been graded and we include those:\npolls \u0026lt;- polls_us_election_2016 %\u0026gt;% filter(state == \u0026quot;U.S.\u0026quot; \u0026amp; enddate \u0026gt;= \u0026quot;2016-10-31\u0026quot; \u0026amp; (grade %in% c(\u0026quot;A+\u0026quot;,\u0026quot;A\u0026quot;,\u0026quot;A-\u0026quot;,\u0026quot;B+\u0026quot;) | is.na(grade))) We add a spread estimate:\npolls \u0026lt;- polls %\u0026gt;% mutate(spread = rawpoll_clinton/100 - rawpoll_trump/100) For this example, we will assume that there are only two parties and call \\(p\\) the proportion voting for Clinton and \\(1-p\\) the proportion voting for Trump. We are interested in the spread \\(2p-1\\). Let’s call the spread \\(d\\) (for difference).\nWe have 49 estimates of the spread. The theory we learned tells us that these estimates are a random variable with a probability distribution that is approximately normal. The expected value is the election night spread \\(d\\) and the standard error is \\(2\\sqrt{p (1 - p) / N}\\). Assuming the urn model we described earlier is a good one, we can use this information to construct a confidence interval based on the aggregated data. The estimated spread is:\nd_hat \u0026lt;- polls %\u0026gt;% summarize(d_hat = sum(spread * samplesize) / sum(samplesize)) %\u0026gt;% pull(d_hat) and the standard error is:\np_hat \u0026lt;- (d_hat+1)/2 moe \u0026lt;- 1.96 * 2 * sqrt(p_hat * (1 - p_hat) / sum(polls$samplesize)) moe ## [1] 0.006623178 So we report a spread of 1.43% with a margin of error of 0.66%. On election night, we discover that the actual percentage was 2.1%, which is outside a 95% confidence interval. What happened?\nA histogram of the reported spreads shows a problem:\npolls %\u0026gt;% ggplot(aes(spread)) + geom_histogram(color=\u0026quot;black\u0026quot;, binwidth = .01) The data does not appear to be normally distributed and the standard error appears to be larger than 0.0066232. The theory is not quite working here.\n Pollster bias Notice that various pollsters are involved and some are taking several polls a week:\npolls %\u0026gt;% group_by(pollster) %\u0026gt;% summarize(n()) ## # A tibble: 15 × 2 ## pollster `n()` ## \u0026lt;fct\u0026gt; \u0026lt;int\u0026gt; ## 1 ABC News/Washington Post 7 ## 2 Angus Reid Global 1 ## 3 CBS News/New York Times 2 ## 4 Fox News/Anderson Robbins Research/Shaw \u0026amp; Company Research 2 ## 5 IBD/TIPP 8 ## 6 Insights West 1 ## 7 Ipsos 6 ## 8 Marist College 1 ## 9 Monmouth University 1 ## 10 Morning Consult 1 ## 11 NBC News/Wall Street Journal 1 ## 12 RKM Research and Communications, Inc. 1 ## 13 Selzer \u0026amp; Company 1 ## 14 The Times-Picayune/Lucid 8 ## 15 USC Dornsife/LA Times 8 Let’s visualize the data for the pollsters that are regularly polling:\nThis plot reveals an unexpected result. First, consider that the standard error predicted by theory for each poll:\npolls %\u0026gt;% group_by(pollster) %\u0026gt;% filter(n() \u0026gt;= 6) %\u0026gt;% summarize(se = 2 * sqrt(p_hat * (1-p_hat) / median(samplesize))) ## # A tibble: 5 × 2 ## pollster se ## \u0026lt;fct\u0026gt; \u0026lt;dbl\u0026gt; ## 1 ABC News/Washington Post 0.0265 ## 2 IBD/TIPP 0.0333 ## 3 Ipsos 0.0225 ## 4 The Times-Picayune/Lucid 0.0196 ## 5 USC Dornsife/LA Times 0.0183 is between 0.018 and 0.033, which agrees with the within poll variation we see. However, there appears to be differences across the polls. Note, for example, how the USC Dornsife/LA Times pollster is predicting a 4% win for Trump, while Ipsos is predicting a win larger than 5% for Clinton. The theory we learned says nothing about different pollsters producing polls with different expected values. All the polls should have the same expected value. FiveThirtyEight refers to these differences as “house effects”. We also call them pollster bias.\nIn the following section, rather than use the urn model theory, we are instead going to develop a data-driven model.\n  Data-driven models For each pollster, let’s collect their last reported result before the election:\none_poll_per_pollster \u0026lt;- polls %\u0026gt;% group_by(pollster) %\u0026gt;% filter(enddate == max(enddate)) %\u0026gt;% ungroup() Here is a histogram of the data for these 15 pollsters:\nqplot(spread, data = one_poll_per_pollster, binwidth = 0.01) In the previous section, we saw that using the urn model theory to combine these results might not be appropriate due to the pollster effect. Instead, we will model this spread data directly.\nThe new model can also be thought of as an urn model, although the connection is not as direct. Rather than 0s (Republicans) and 1s (Democrats), our urn now contains poll results from all possible pollsters. We assume that the expected value of our urn is the actual spread \\(d=2p-1\\).\nBecause instead of 0s and 1s, our urn contains continuous numbers between -1 and 1, the standard deviation of the urn is no longer \\(\\sqrt{p(1-p)}\\). Rather than voter sampling variability, the standard error now includes the pollster-to-pollster variability. Our new urn also includes the sampling variability from the polling. Regardless, this standard deviation is now an unknown parameter. In statistics textbooks, the Greek symbol \\(\\sigma\\) is used to represent this parameter.\nIn summary, we have two unknown parameters: the expected value \\(d\\) and the standard deviation \\(\\sigma\\).\nOur task is to estimate \\(d\\). Because we model the observed values \\(X_1,\\dots X_N\\) as a random sample from the urn, the CLT might still work in this situation because it is an average of independent random variables. For a large enough sample size \\(N\\), the probability distribution of the sample average \\(\\bar{X}\\) is approximately normal with expected value \\(\\mu\\) and standard error \\(\\sigma/\\sqrt{N}\\). If we are willing to consider \\(N=15\\) large enough, we can use this to construct confidence intervals.\nA problem is that we don’t know \\(\\sigma\\). But theory tells us that we can estimate the urn model \\(\\sigma\\) with the sample standard deviation defined as \\(s = \\sqrt{ \\sum_{i=1}^N (X_i - \\bar{X})^2 / (N-1)}\\).\nUnlike for the population standard deviation definition, we now divide by \\(N-1\\). This makes \\(s\\) a better estimate of \\(\\sigma\\). There is a mathematical explanation for this, which is explained in most statistics textbooks, but we don’t cover it here.\nThe sd function in R computes the sample standard deviation:\nsd(one_poll_per_pollster$spread) ## [1] 0.02419369 We are now ready to form a new confidence interval based on our new data-driven model:\nresults \u0026lt;- one_poll_per_pollster %\u0026gt;% summarize(avg = mean(spread), se = sd(spread) / sqrt(length(spread))) %\u0026gt;% mutate(start = avg - 1.96 * se, end = avg + 1.96 * se) round(results * 100, 1) ## avg se start end ## 1 2.9 0.6 1.7 4.1 Our confidence interval is wider now since it incorporates the pollster variability. It does include the election night result of 2.1%. Also, note that it was small enough not to include 0, which means we were confident Clinton would win the popular vote.\nEXERCISES\nNote that using dollar signs $ $ to enclose some text is how you make the fancy math you see below. If you installed tinytex or some other Latex distribution in order to render your PDFs, you should be equipped to insert mathematics directly into your .Rmd file. It only works in the text – inside the code chunks, the dollar sign is still the accessor.\nIn this section, we talked about pollster bias. We used visualization to motivate the presence of such bias. Here we will give it a more rigorous treatment. We will consider two pollsters that conducted daily polls. We will look at national polls for the month before the election.  data(polls_us_election_2016) polls \u0026lt;- polls_us_election_2016 %\u0026gt;% filter(pollster %in% c(\u0026quot;Rasmussen Reports/Pulse Opinion Research\u0026quot;, \u0026quot;The Times-Picayune/Lucid\u0026quot;) \u0026amp; enddate \u0026gt;= \u0026quot;2016-10-15\u0026quot; \u0026amp; state == \u0026quot;U.S.\u0026quot;) %\u0026gt;% mutate(spread = rawpoll_clinton/100 - rawpoll_trump/100) We want to answer the question: is there a poll bias? First, make a plot showing the spreads for each poll.\nThe data does seem to suggest there is a difference. However, these data are subject to variability. Perhaps the differences we observe are due to chance.  The urn model theory says nothing about pollster effect. Under the urn model, both pollsters have the same expected value: the election day difference, that we call \\(d\\).\nWe will model the observed data \\(Y_{i,j}\\) in the following way:\n\\[ Y_{i,j} = d + b_i + \\varepsilon_{i,j} \\]\nwith \\(i=1,2\\) indexing the two pollsters, \\(b_i\\) the bias for pollster \\(i\\) and \\(\\varepsilon_ij\\) poll to poll chance variability. We assume the \\(\\varepsilon\\) are independent from each other, have expected value \\(0\\) and standard deviation \\(\\sigma_i\\) regardless of \\(j\\).\nWhich of the following best represents our question?\nIs \\(\\varepsilon_{i,j}\\) = 0? How close are the \\(Y_{i,j}\\) to \\(d\\)? Is \\(b_1 \\neq b_2\\)? Are \\(b_1 = 0\\) and \\(b_2 = 0\\) ?  Suppose we define \\(\\bar{Y}_1\\) as the average of poll results from the first poll, \\(Y_{1,1},\\dots,Y_{1,N_1}\\) with \\(N_1\\) the number of polls conducted by the first pollster:  polls %\u0026gt;% filter(pollster==\u0026quot;Rasmussen Reports/Pulse Opinion Research\u0026quot;) %\u0026gt;% summarize(N_1 = n()) What is the expected value of \\(\\bar{Y}_1\\)?\nWhat is the standard error of \\(\\bar{Y}_1\\)? (It may be helpful to compute the expected value and standard error of \\(\\bar{Y}_2\\) as well.)\n Suppose we define \\(\\bar{Y}_2\\) as the average of poll results from the first poll, \\(Y_{2,1},\\dots,Y_{2,N_2}\\) with \\(N_2\\) the number of polls conducted by the first pollster. What is the expected value \\(\\bar{Y}_2\\)?\n What does the CLT tell us about the distribution of \\(\\bar{Y}_2 - \\bar{Y}_1\\)?\n  Nothing because this is not the average of a sample. Because the \\(Y_{ij}\\) are approximately normal, so are the averages. Note that \\(\\bar{Y}_2\\) and \\(\\bar{Y}_1\\) are sample averages, so if we assume \\(N_2\\) and \\(N_1\\) are large enough, each is approximately normal. The difference of normals is also normal. The data are not 0 or 1, so CLT does not apply.  Construct a random variable that has expected value \\(b_2 - b_1\\), the pollster bias difference. If our model holds, then this random variable has an approximately normal distribution and we know its standard error. The standard error depends on \\(\\sigma_1\\) and \\(\\sigma_2\\) (the variances of the \\(Y\\) above), but we can plug the sample standard deviations. Compute those now.  The statistic formed by dividing our estimate of \\(b_2-b_1\\) by its estimated standard error:\n\\[ \\frac{\\bar{Y}_2 - \\bar{Y}_1}{\\sqrt{s_2^2/N_2 + s_1^2/N_1}} \\]\nis called the t-statistic. Now you should be able to answer the question: is \\(b_2 - b_1\\) different from 0?\nNotice that we have more than two pollsters. We can also test for pollster effect using all pollsters, not just two. The idea is to compare the variability across polls to variability within polls. We can actually construct statistics to test for effects and approximate their distribution. The area of statistics that does this is called Analysis of Variance or ANOVA. We do not cover it here, but ANOVA provides a very useful set of tools to answer questions such as: is there a pollster effect?\nFor this exercise, create a new table:\npolls \u0026lt;- polls_us_election_2016 %\u0026gt;% filter(enddate \u0026gt;= \u0026quot;2016-10-15\u0026quot; \u0026amp; state == \u0026quot;U.S.\u0026quot;) %\u0026gt;% group_by(pollster) %\u0026gt;% filter(n() \u0026gt;= 5) %\u0026gt;% mutate(spread = rawpoll_clinton/100 - rawpoll_trump/100) %\u0026gt;% ungroup() Compute the average and standard deviation for each pollster and examine the variability across the averages and how it compares to the variability within the pollsters, summarized by the standard deviation.\n    https://www.youtube.com/watch?v=TbKkjm-gheY↩︎\n https://www.nytimes.com/interactive/2016/upshot/presidential-polls-forecast.html↩︎\n https://fivethirtyeight.com/features/trump-is-just-a-normal-polling-error-behind-clinton/↩︎\n https://projects.fivethirtyeight.com/2016-election-forecast/↩︎\n   ","date":1632787200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1632838512,"objectID":"7337e9261c3514039025dedd39df2948","permalink":"https://ssc442.netlify.app/assignment/05-assignment/","publishdate":"2021-09-28T00:00:00Z","relpermalink":"/assignment/05-assignment/","section":"assignment","summary":"Statistical models  Poll aggregators  Poll data Pollster bias  Data-driven models    NOTE\nYou must turn in a PDF document of your R Markdown code. Submit this to D2L by 11:59 PM Eastern Time on Sunday, October 3rd.\n For this exercise you will need to ensure that you’ve carefully read this week’s content and example. We will build on both. The exercises (which you will turn in as this week’s lab) are at the bottom.","tags":null,"title":"Statistical Models","type":"docs"},{"authors":null,"categories":null,"content":"    Data Viz in the Real World  Case study: new insights on poverty  Exploring the Data Slope charts Bland-Altman plot Bump charts Themes Small multiples Sparklines  The ecological fallacy and importance of showing the data  Logistic transformation Show the data  Case study: vaccines and infectious diseases TRY IT    Data Viz in the Real World In this section, we will demonstrate how relatively simple ggplot2 code can create insightful and aesthetically pleasing plots. As motivation we will create plots that help us better understand trends in world health and economics. We will implement what we learned in previous sections of the class and learn how to augment the code to perfect the plots. As we go through our case study, we will describe relevant general data visualization principles and learn concepts such as faceting, time series plots, transformations, and ridge plots.\nCase study: new insights on poverty Hans Rosling1 was the co-founder of the Gapminder Foundation2, an organization dedicated to educating the public by using data to dispel common myths about the so-called developing world. The organization uses data to show how actual trends in health and economics contradict the narratives that emanate from sensationalist media coverage of catastrophes, tragedies, and other unfortunate events. As stated in the Gapminder Foundation’s website:\n Journalists and lobbyists tell dramatic stories. That’s their job. They tell stories about extraordinary events and unusual people. The piles of dramatic stories pile up in peoples’ minds into an over-dramatic worldview and strong negative stress feelings: “The world is getting worse!”, “It’s we vs. them!”, “Other people are strange!”, “The population just keeps growing!” and “Nobody cares!”\n Hans Rosling conveyed actual data-based trends in a dramatic way of his own, using effective data visualization. This section is based on two talks that exemplify this approach to education: [New Insights on Poverty]3 and The Best Stats You’ve Ever Seen4. Specifically, in this section, we use data to attempt to answer the following two questions:\nIs it a fair characterization of today’s world to say it is divided into western rich nations and the developing world in Africa, Asia, and Latin America? Has income inequality across countries worsened during the last 40 years?  To answer these questions, we will be using the gapminder dataset provided in dslabs. This dataset was created using a number of spreadsheets available from the Gapminder Foundation. You can access the table like this:\nlibrary(tidyverse) library(dslabs) library(ggrepel) library(ggthemes) gapminder = dslabs::gapminder %\u0026gt;% as_tibble() Exploring the Data Taking an exercise from the New Insights on Poverty video, we start by testing our knowledge regarding differences in child mortality across different countries. For each of the six pairs of countries below, which country do you think had the highest child mortality rates in 2015? Which pairs do you think are most similar?\nSri Lanka or Turkey Poland or South Korea Malaysia or Russia Pakistan or Vietnam Thailand or South Africa  When answering these questions without data, the non-European countries are typically picked as having higher child mortality rates: Sri Lanka over Turkey, South Korea over Poland, and Malaysia over Russia. It is also common to assume that countries considered to be part of the developing world: Pakistan, Vietnam, Thailand, and South Africa, have similarly high mortality rates.\nTo answer these questions with data, we can use dplyr. For example, for the first comparison we see that:\ndslabs::gapminder %\u0026gt;% filter(year == 2015 \u0026amp; country %in% c(\u0026quot;Sri Lanka\u0026quot;,\u0026quot;Turkey\u0026quot;)) %\u0026gt;% select(country, infant_mortality) ## country infant_mortality ## 1 Sri Lanka 8.4 ## 2 Turkey 11.6 Turkey has the higher infant mortality rate.\nWe can use this code on all comparisons and find the following:\n## New names: ## * country -\u0026gt; country...1 ## * infant_mortality -\u0026gt; infant_mortality...2 ## * country -\u0026gt; country...3 ## * infant_mortality -\u0026gt; infant_mortality...4   country  infant mortality  country  infant mortality      Sri Lanka  8.4  Turkey  11.6    Poland  4.5  South Korea  2.9    Malaysia  6.0  Russia  8.2    Pakistan  65.8  Vietnam  17.3    Thailand  10.5  South Africa  33.6     We see that the European countries on this list have higher child mortality rates: Poland has a higher rate than South Korea, and Russia has a higher rate than Malaysia. We also see that Pakistan has a much higher rate than Vietnam, and South Africa has a much higher rate than Thailand. It turns out that when Hans Rosling gave this quiz to educated groups of people, the average score was less than 2.5 out of 5, worse than what they would have obtained had they guessed randomly. This implies that more than ignorant, we are misinformed. In this chapter we see how data visualization helps inform us.\n Slope charts One exception where another type of plot may be more informative is when you are comparing variables of the same type, but at different time points and for a relatively small number of comparisons. For example, comparing life expectancy between 2010 and 2015. In this case, we might recommend a slope chart.\nThere is no geometry for slope charts in ggplot2, but we can construct one using geom_line. We need to do some tinkering to add labels. We’ll paste together a character stright with the country name and the starting life expectancy, then do the same with just the later life expectancy for the right side. Below is an example comparing 2010 to 2015 for large western countries:\nwest \u0026lt;- c(\u0026quot;Western Europe\u0026quot;,\u0026quot;Northern Europe\u0026quot;,\u0026quot;Southern Europe\u0026quot;, \u0026quot;Northern America\u0026quot;,\u0026quot;Australia and New Zealand\u0026quot;) dat \u0026lt;- gapminder %\u0026gt;% filter(year%in% c(2010, 2015) \u0026amp; region %in% west \u0026amp; !is.na(life_expectancy) \u0026amp; population \u0026gt; 10^7) %\u0026gt;% mutate(label_first = ifelse(year == 2010, paste0(country, \u0026quot;: \u0026quot;, round(life_expectancy, 1), \u0026#39; years\u0026#39;), NA), label_last = ifelse(year == 2015, paste0(round(life_expectancy, 1),\u0026#39; years\u0026#39;), NA)) dat %\u0026gt;% mutate(location = ifelse(year == 2010, 1, 2), location = ifelse(year == 2015 \u0026amp; country %in% c(\u0026quot;United Kingdom\u0026quot;, \u0026quot;Portugal\u0026quot;), location+0.22, location), hjust = ifelse(year == 2010, 1, 0)) %\u0026gt;% mutate(year = as.factor(year)) %\u0026gt;% ggplot(aes(year, life_expectancy, group = country)) + geom_line(aes(color = country), show.legend = FALSE) + geom_text_repel(aes(label = label_first, color = country), direction = \u0026#39;y\u0026#39;, nudge_x = -1, seed = 1234, show.legend = FALSE) + geom_text_repel(aes(label = label_last, color = country), direction = \u0026#39;y\u0026#39;, nudge_x = 1, seed = 1234, show.legend = FALSE) + xlab(\u0026quot;\u0026quot;) + ylab(\u0026quot;Life Expectancy\u0026quot;) ## Warning: Removed 12 rows containing missing values (geom_text_repel). ## Warning: Removed 12 rows containing missing values (geom_text_repel). An advantage of the slope chart is that it permits us to quickly get an idea of changes based on the slope of the lines. Although we are using angle as the visual cue, we also have position to determine the exact values. Comparing the improvements is a bit harder with a scatterplot:\nIn the scatterplot, we have followed the principle use common axes since we are comparing these before and after. However, if we have many points, slope charts stop being useful as it becomes hard to see all the lines.\n Bland-Altman plot Since we are primarily interested in the difference, it makes sense to dedicate one of our axes to it. The Bland-Altman plot, also known as the Tukey mean-difference plot and the MA-plot, shows the difference versus the average:\ndat %\u0026gt;% mutate(year = paste0(\u0026quot;life_expectancy_\u0026quot;, year)) %\u0026gt;% select(country, year, life_expectancy) %\u0026gt;% spread(year, life_expectancy) %\u0026gt;% mutate(average = (life_expectancy_2015 + life_expectancy_2010)/2, difference = life_expectancy_2015 - life_expectancy_2010) %\u0026gt;% ggplot(aes(average, difference, label = country)) + geom_point() + geom_text_repel() + geom_abline(lty = 2) + xlab(\u0026quot;Average of 2010 and 2015\u0026quot;) + ylab(\u0026quot;Difference between 2015 and 2010\u0026quot;) Here, by simply looking at the y-axis, we quickly see which countries have shown the most improvement. We also get an idea of the overall value from the x-axis.\n Bump charts Finally, we can make a bump chart that shows changes in rankings over time. We’ll look at fertility in South Asia. First we need to calculate a new variable that shows the rank of each country within each year. We can do this if we group by year and then use the rank() function to rank countries by the fertility column.\nsa_fe \u0026lt;- gapminder %\u0026gt;% filter(region == \u0026quot;Southern Asia\u0026quot;) %\u0026gt;% filter(year \u0026gt;= 2004, year \u0026lt; 2015) %\u0026gt;% group_by(year) %\u0026gt;% mutate(rank = rank(fertility)) We then plot this with points and lines, reversing the y-axis so 1 is at the top:\nggplot(sa_fe, aes(x = year, y = rank, color = country)) + geom_line() + geom_point() + scale_y_reverse(breaks = 1:8) Iran holds the number 1 spot, while Sri Lanka dropped from 2 to 6, and Bangladesh increased from 4 to 2.\nAs with the slopegraph, there are 8 different colors in the legend and it’s hard to line them all up with the different lines, so we can plot the text directly instead. We’ll use geom_text() again. We don’t need to repel anything, since the text should fit in each row just fine. We need to change the data argument in geom_text() though and filter the data to only include one year, otherwise we’ll get labels on every point, which is excessive. We can also adjust the theme and colors to make it cleaner.\nbumpplot \u0026lt;- ggplot(sa_fe, aes(x = year, y = rank, color = country)) + geom_line(size = 2) + geom_point(size = 4) + geom_text(data = sa_fe %\u0026gt;% dplyr::filter(year==2004) %\u0026gt;% arrange(rank), aes(label = country, x = 2003), fontface = \u0026quot;bold\u0026quot;, angle = 45) + geom_text(data = sa_fe %\u0026gt;% dplyr::filter(year==2014) %\u0026gt;% arrange(rank), aes(label = country, x = 2015), fontface = \u0026quot;bold\u0026quot;, angle = 45) + guides(color = FALSE) + scale_y_reverse(breaks = 1:8) + scale_x_continuous(breaks = 2004:2014) + scale_color_viridis_d(option = \u0026quot;C\u0026quot;, begin = 0.2, end = 0.9) + labs(x = NULL, y = \u0026quot;Rank\u0026quot;) ## Warning: `guides(\u0026lt;scale\u0026gt; = FALSE)` is deprecated. Please use `guides(\u0026lt;scale\u0026gt; = ## \u0026quot;none\u0026quot;)` instead. bumpplot If you want to be super fancy, you can use flags instead of country codes, but that’s a little more complicated (you need to install the ggflags package. See here for an example.\n Themes We can go a little further towards a clean, easy-to-read data visualization by using themes in our plots. Themes allow us to set a particular range of plot settings in one command, and let us further tweak things like fonts, background colors, and much more. We’ve used them in passing a few times without highlighting them, but we’ll discuss them here.\nA pre-constructed set of instructions for making a visual theme can be had by using a theme’s ggplot function. Let’s look at two of my favorites.\ntheme_bw() uses the black-and-white theme, which is helpful in making a nice, clean plot:\nbumpplot + theme_bw() The background shading is gone, which gives the plot a nice, crisp feel. It adds the black outline around the plot, but doesn’t mess with the colors in the plot.\nHere’s theme_minimal()\nbumpplot + theme_minimal() Themes can alter things in the plot as well. If we really want to strip it down and remove the Y-axis (which is rarely a good idea, but in a bump chart, it makes sense):\nbumpplot + theme_void() Now that’s clean!\nIn our opening unit, we had a plot that was styled after the plots in the magazine, The Economist. That’s a theme (in the ggthemes package that we loaded at the top)!\nbumpplot + theme_economist() Themes affect some of the plot elements that we haven’t gotten much into (like length of axis ticks and the color of the panel grid behind the plot). We can use a theme, then make further changes to the theme. We won’t go into a lot of detail, but here’s an example. Use the ?theme to learn more about what you can change. Half the challenge is finding the right term for the thing you want to tweak! Theme changes occur in code order, so you can update a pre-set theme with your own details:\nbumpplot + theme_bw() + theme(strip.text = element_text(face = \u0026quot;bold\u0026quot;), plot.title = element_text(face = \u0026quot;bold\u0026quot;), axis.text.x = element_text(angle = 45, hjust = 1), panel.grid.major.y = element_blank(), # turn off all of the Y grid panel.grid.minor.y = element_blank(), panel.grid.minor.x = element_blank()) # turn off small x grid  Small multiples First we can make some small multiples plots and show life expectancy over time for a handful of countries. We’ll make a list of some countries chosen at random while I scrolled through the data, and then filter our data to include only those rows. We then plot life expectancy, faceting by country.\nlife_expectancy_small \u0026lt;- gapminder %\u0026gt;% filter(country %in% c(\u0026quot;Argentina\u0026quot;, \u0026quot;Bolivia\u0026quot;, \u0026quot;Brazil\u0026quot;, \u0026quot;Belize\u0026quot;, \u0026quot;Canada\u0026quot;, \u0026quot;Chile\u0026quot;)) ggplot(data = life_expectancy_small, mapping = aes(x = year, y = life_expectancy)) + geom_line(size = 1) + facet_wrap(vars(country)) Small multiples! That’s all we need to do.\nWe can do some fancier things, though. We can make this plot hyper minimalist with a theme:\nggplot(data = life_expectancy_small, mapping = aes(x = year, y = life_expectancy)) + geom_line(size = 1) + facet_wrap(vars(country), scales = \u0026quot;free_y\u0026quot;) + theme_void() + theme(strip.text = element_text(face = \u0026quot;bold\u0026quot;)) We can do a whole part of a continent (poor Syria 😞)\nlife_expectancy_mena \u0026lt;- gapminder %\u0026gt;% filter(region == \u0026quot;Northern Africa\u0026quot; | region == \u0026quot;Western Asia\u0026quot;) ggplot(data = life_expectancy_mena, mapping = aes(x = year, y = life_expectancy)) + geom_line(size = 1) + facet_wrap(vars(country), scales = \u0026quot;free_y\u0026quot;, nrow = 3) + theme_void() + theme(strip.text = element_text(face = \u0026quot;bold\u0026quot;)) We can use the geofacet package to arrange these facets by geography:\nlibrary(geofacet) life_expectancy_eu \u0026lt;- gapminder %\u0026gt;% filter(region== \u0026#39;Western Europe\u0026#39; | region==\u0026#39;Northern Europe\u0026#39; | region==\u0026#39;Southern Europe\u0026#39;) ggplot(life_expectancy_eu, aes(x = year, y = life_expectancy)) + geom_line(size = 1) + facet_geo(vars(country), grid = \u0026quot;europe_countries_grid1\u0026quot;, scales = \u0026quot;free_y\u0026quot;) + labs(x = NULL, y = NULL, title = \u0026quot;Life expectancy from 1960–2015\u0026quot;, caption = \u0026quot;Source: Gapminder\u0026quot;) + theme_minimal() + theme(strip.text = element_text(face = \u0026quot;bold\u0026quot;), plot.title = element_text(face = \u0026quot;bold\u0026quot;), axis.text.x = element_text(angle = 45, hjust = 1)) Neat!\nAnybody see any problems here?\n Sparklines Sparklines are just line charts (or bar charts) that are really really small.\nindia_fert \u0026lt;- gapminder %\u0026gt;% filter(country == \u0026quot;India\u0026quot;) plot_india \u0026lt;- ggplot(india_fert, aes(x = year, y = fertility)) + geom_line() + theme_void() plot_india ggsave(\u0026quot;india_co2.pdf\u0026quot;, plot_india, width = 1, height = 0.15, units = \u0026quot;in\u0026quot;) ggsave(\u0026quot;india_co2.png\u0026quot;, plot_india, width = 1, height = 0.15, units = \u0026quot;in\u0026quot;) china_fert \u0026lt;- gapminder %\u0026gt;% filter(country == \u0026quot;China\u0026quot;) plot_china \u0026lt;- ggplot(china_fert, aes(x = year, y = fertility)) + geom_line() + theme_void() plot_china ggsave(\u0026quot;china_co2.pdf\u0026quot;, plot_china, width = 1, heighlt = 0.15, units = \u0026quot;in\u0026quot;) ggsave(\u0026quot;china_co2.png\u0026quot;, plot_china, width = 1, height = 0.15, units = \u0026quot;in\u0026quot;) You can then use those saved tiny plots in your text (with a little html extra in there).\nBoth India \u0026lt;img class=\u0026quot;img-inline\u0026quot; src=\u0026quot;/your/path/to/india_co2.png\u0026quot; width = \u0026quot;100\u0026quot;/\u0026gt; and China \u0026lt;img class=\u0026quot;img-inline\u0026quot; src=\u0026quot;/your/path/to/china-spark-1.png\u0026quot; width = \u0026quot;100\u0026quot;/\u0026gt; have seen increased CO~2~ emissions over the past 20 years.  Both India and China have seen increased CO2 emissions over the past 20 years.\n   The ecological fallacy and importance of showing the data Throughout this section, we have been comparing regions of the world. We have seen that, on average, some regions do better than others. In this section, we focus on describing the importance of variability within the groups when examining the relationship between a country’s infant mortality rates and average income.\nWe define a few more regions and compare the averages across regions:\nThe relationship between these two variables is almost perfectly linear and the graph shows a dramatic difference. While in the West less than 0.5% of infants die, in Sub-Saharan Africa the rate is higher than 6%!\nNote that the plot uses a new transformation, the logistic transformation.\nLogistic transformation The logistic or logit transformation for a proportion or rate \\(p\\) is defined as:\n\\[f(p) = \\log \\left( \\frac{p}{1-p} \\right)\\]\nWhen \\(p\\) is a proportion or probability, the quantity that is being logged, \\(p/(1-p)\\), is called the odds. In this case \\(p\\) is the proportion of infants that survived. The odds tell us how many more infants are expected to survive than to die. The log transformation makes this symmetric. If the rates are the same, then the log odds is 0. Fold increases or decreases turn into positive and negative increments, respectively.\nThis scale is useful when we want to highlight differences near 0 or 1. For survival rates this is important because a survival rate of 90% is unacceptable, while a survival of 99% is relatively good. We would much prefer a survival rate closer to 99.9%. We want our scale to highlight these difference and the logit does this. Note that 99.9/0.1 is about 10 times bigger than 99/1 which is about 10 times larger than 90/10. By using the log, these fold changes turn into constant increases.\n Show the data Now, back to our plot. Based on the plot above, do we conclude that a country with a low income is destined to have low survival rate? Do we conclude that survival rates in Sub-Saharan Africa are all lower than in Southern Asia, which in turn are lower than in the Pacific Islands, and so on?\nJumping to this conclusion based on a plot showing averages is referred to as the ecological fallacy. The almost perfect relationship between survival rates and income is only observed for the averages at the region level. Once we show all the data, we see a somewhat more complicated story:\n## Warning: ggrepel: 1 unlabeled data points (too many overlaps). Consider ## increasing max.overlaps Specifically, we see that there is a large amount of variability. We see that countries from the same regions can be quite different and that countries with the same income can have different survival rates. For example, while on average Sub-Saharan Africa had the worse health and economic outcomes, there is wide variability within that group. Mauritius and Botswana are doing better than Angola and Sierra Leone, with Mauritius comparable to Western countries.\n  Case study: vaccines and infectious diseases Vaccines have helped save millions of lives. In the 19th century, before herd immunization was achieved through vaccination programs, deaths from infectious diseases, such as smallpox and polio, were common. However, today vaccination programs have become somewhat controversial despite all the scientific evidence for their importance.\nThe controversy started with a paper5 published in 1988 and led by Andrew Wakefield claiming there was a link between the administration of the measles, mumps, and rubella (MMR) vaccine and the appearance of autism and bowel disease. Despite much scientific evidence contradicting this finding, sensationalist media reports and fear-mongering from conspiracy theorists led parts of the public into believing that vaccines were harmful. As a result, many parents ceased to vaccinate their children. This dangerous practice can be potentially disastrous given that the Centers for Disease Control (CDC) estimates that vaccinations will prevent more than 21 million hospitalizations and 732,000 deaths among children born in the last 20 years (see Benefits from Immunization during the Vaccines for Children Program Era — United States, 1994-2013, MMWR6). The 1988 paper has since been retracted and Andrew Wakefield was eventually “struck off the UK medical register, with a statement identifying deliberate falsification in the research published in The Lancet, and was thereby barred from practicing medicine in the UK.” (source: Wikipedia7). Yet misconceptions persist, in part due to self-proclaimed activists who continue to disseminate misinformation about vaccines.\nEffective communication of data is a strong antidote to misinformation and fear-mongering. Earlier we used an example provided by a Wall Street Journal article8 showing data related to the impact of vaccines on battling infectious diseases. Here we reconstruct that example.\nThe data used for these plots were collected, organized, and distributed by the Tycho Project9. They include weekly reported counts for seven diseases from 1928 to 2011, from all fifty states. The yearly totals are helpfully included in the dslabs package:\nlibrary(RColorBrewer) data(us_contagious_diseases) names(us_contagious_diseases) ## [1] \u0026quot;disease\u0026quot; \u0026quot;state\u0026quot; \u0026quot;year\u0026quot; \u0026quot;weeks_reporting\u0026quot; ## [5] \u0026quot;count\u0026quot; \u0026quot;population\u0026quot; We create a temporary object dat that stores only the measles data, includes a per 100,000 rate, orders states by average value of disease and removes Alaska and Hawaii since they only became states in the late 1950s. Note that there is a weeks_reporting column that tells us for how many weeks of the year data was reported. We have to adjust for that value when computing the rate.\nthe_disease \u0026lt;- \u0026quot;Measles\u0026quot; dat \u0026lt;- us_contagious_diseases %\u0026gt;% filter(!state%in%c(\u0026quot;Hawaii\u0026quot;,\u0026quot;Alaska\u0026quot;) \u0026amp; disease == the_disease) %\u0026gt;% mutate(rate = count / population * 10000 * 52 / weeks_reporting) %\u0026gt;% mutate(state = reorder(state, rate)) We can now easily plot disease rates per year. Here are the measles data from California:\ndat %\u0026gt;% filter(state == \u0026quot;California\u0026quot; \u0026amp; !is.na(rate)) %\u0026gt;% ggplot(aes(year, rate)) + geom_line() + ylab(\u0026quot;Cases per 10,000\u0026quot;) + geom_vline(xintercept=1963, col = \u0026quot;blue\u0026quot;) We add a vertical line at 1963 since this is when the vaccine was introduced [Control, Centers for Disease; Prevention (2014). CDC health information for international travel 2014 (the yellow book). p. 250. ISBN 9780199948505].\nNow can we show data for all states in one plot? We have three variables to show: year, state, and rate. In the WSJ figure, they use the x-axis for year, the y-axis for state, and color hue to represent rates. However, the color scale they use, which goes from yellow to blue to green to orange to red, can be improved.\nIn our example, we want to use a sequential palette since there is no meaningful center, just low and high rates.\nWe use the geometry geom_tile to tile the region with colors representing disease rates. We use a square root transformation to avoid having the really high counts dominate the plot. Notice that missing values are shown in grey. Note that once a disease was pretty much eradicated, some states stopped reporting cases all together. This is why we see so much grey after 1980.\ndat %\u0026gt;% ggplot(aes(year, state, fill = rate)) + geom_tile(color = \u0026quot;grey50\u0026quot;) + scale_x_continuous(expand=c(0,0)) + scale_fill_gradientn(colors = brewer.pal(9, \u0026quot;Reds\u0026quot;), trans = \u0026quot;sqrt\u0026quot;) + geom_vline(xintercept=1963, col = \u0026quot;blue\u0026quot;) + theme_minimal() + theme(panel.grid = element_blank(), legend.position=\u0026quot;bottom\u0026quot;, text = element_text(size = 8)) + ggtitle(the_disease) + ylab(\u0026quot;\u0026quot;) + xlab(\u0026quot;\u0026quot;) This plot makes a very striking argument for the contribution of vaccines. However, one limitation of this plot is that it uses color to represent quantity, which we earlier explained makes it harder to know exactly how high values are going. Position and lengths are better cues. If we are willing to lose state information, we can make a version of the plot that shows the values with position. We can also show the average for the US, which we compute like this:\navg \u0026lt;- us_contagious_diseases %\u0026gt;% filter(disease==the_disease) %\u0026gt;% group_by(year) %\u0026gt;% summarize(us_rate = sum(count, na.rm = TRUE) / sum(population, na.rm = TRUE) * 10000) Now to make the plot we simply use the geom_line geometry:\ndat %\u0026gt;% filter(!is.na(rate)) %\u0026gt;% ggplot() + geom_line(aes(year, rate, group = state), color = \u0026quot;grey50\u0026quot;, show.legend = FALSE, alpha = 0.2, size = 1) + geom_line(mapping = aes(year, us_rate), data = avg, size = 1) + scale_y_continuous(trans = \u0026quot;sqrt\u0026quot;, breaks = c(5, 25, 125, 300)) + ggtitle(\u0026quot;Cases per 10,000 by state\u0026quot;) + xlab(\u0026quot;\u0026quot;) + ylab(\u0026quot;\u0026quot;) + geom_text(data = data.frame(x = 1955, y = 50), mapping = aes(x, y, label=\u0026quot;US average\u0026quot;), color=\u0026quot;black\u0026quot;) + geom_vline(xintercept=1963, col = \u0026quot;blue\u0026quot;) In theory, we could use color to represent the categorical value state, but it is hard to pick 50 distinct colors.\n TRY IT TRY IT\nReproduce the image plot we previously made but for smallpox. For this plot, do not include years in which cases were not reported in 10 or more weeks.\n Now reproduce the time series plot we previously made, but this time following the instructions of the previous question for smallpox.\n For the state of California, make a time series plot showing rates for all diseases. Include only years with 10 or more weeks reporting. Use a different color for each disease.\n Now do the same for the rates for the US. Hint: compute the US rate by using summarize: the total divided by total population.\n      https://en.wikipedia.org/wiki/Hans_Rosling↩︎\n http://www.gapminder.org/↩︎\n https://www.ted.com/talks/hans_rosling_reveals_new_insights_on_poverty?language=en↩︎\n https://www.ted.com/talks/hans_rosling_shows_the_best_stats_you_ve_ever_seen↩︎\n http://www.thelancet.com/journals/lancet/article/PIIS0140-6736(97)11096-0/abstract↩︎\n https://www.cdc.gov/mmwr/preview/mmwrhtml/mm6316a4.htm↩︎\n https://en.wikipedia.org/wiki/Andrew_Wakefield↩︎\n http://graphics.wsj.com/infectious-diseases-and-vaccines/↩︎\n http://www.tycho.pitt.edu/↩︎\n   ","date":1632355200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1632838512,"objectID":"c977a82d5f9c9c6bf14f43f56de0b41e","permalink":"https://ssc442.netlify.app/example/04-example/","publishdate":"2021-09-23T00:00:00Z","relpermalink":"/example/04-example/","section":"example","summary":"Data Viz in the Real World  Case study: new insights on poverty  Exploring the Data Slope charts Bland-Altman plot Bump charts Themes Small multiples Sparklines  The ecological fallacy and importance of showing the data  Logistic transformation Show the data  Case study: vaccines and infectious diseases TRY IT    Data Viz in the Real World In this section, we will demonstrate how relatively simple ggplot2 code can create insightful and aesthetically pleasing plots.","tags":null,"title":"Visualizations in Practice","type":"docs"},{"authors":null,"categories":null,"content":"   Getting started  Bonus Exercise Turning everything in Postscript: how we got this unemployment data    NOTE\nYou must turn in a PDF document of your R Markdown code. Submit this to D2L by 11:59 PM Eastern Time on Sunday, September 26th\n Getting started For this exercise you’ll use state-level unemployment data from 2006 to 2016 that comes from the US Bureau of Labor Statistics (if you’re curious, we describe how we built this dataset down below).\n  unemployment.csv  To help you, I’ve created a skeleton R Markdown file with a template for this exercise, along with some code to help you clean and summarize the data. Download that here and include it in your project:\n  03-lab.Rmd  In the end, to help you master file organization, we suggest that the structure of your project directory should look something like this:\nyour-project-name\\ 03-lab.Rmd your-project-name.Rproj data\\ unemployment.csv The example for this week will be incredibly helpful for this exercise. Reference it.\nFor this week, you need to start making your plots look nice. For full credit, you will have to label axes, label the plot, and experiment with themes. Experiment with adding a labs() layer or changing colors. Or, if you’re super brave, try modifying a theme and its elements. Default plots will not receive full credit.\nYou’ll need to insert your own code chunks where needed. Rather than typing them by hand (that’s tedious and you might miscount the number of backticks!), use the “Insert” button at the top of the editing window, or type ctrl + alt + i on Windows, or ⌘ + ⌥ + i on macOS.\nEXERCISE 1\nUse data from the US Bureau of Labor Statistics (BLS) to show the trends in employment rate for all 50 states between 2006 and 2016. What stories does this plot tell? Which states struggled to recover from the 2008–09 recession?\nSome hints/tips:\n You won’t need to filter out any missing rows because the data here is complete—there are no state-year combinations with missing unemployment data.\n You’ll be plotting 51 facets. You can filter out DC if you want to have a better grid (like 5 × 10), or you can try using facet_geo() from the geofacet package to lay out the plots like a map of the US (try this!).\n Plot the date column along the x-axis, not the year column. If you plot by year, you’ll get weird looking lines (try it for fun?), since these observations are monthly. If you really want to plot by year only, you’ll need to create a different data frame where you group by year and state and calculate the average unemployment rate for each year/state combination (i.e. group_by(year, state) %\u0026gt;% summarize(avg_unemployment = mean(unemployment)))\n Try mapping other aesthetics onto the graph too. You’ll notice there are columns for region and division—play with those as colors, for instance.\n This plot might be big, so make sure you adjust fig.width and fig.height in the chunk options so that it’s visible when you knit it. You might also want to used ggsave() to save it with extra large dimensions.\n  EXERCISE 2\nUse data from the BLS to create a slopegraph that compares the unemployment rate in January 2006 with the unemployment rate in January 2009, either for all 50 states at once (good luck with that!) or for a specific region or division. Make sure the plot doesn’t look too busy or crowded in the end.\nWhat story does this plot tell? Which states in the US (or in the specific region you selected) were the most/least affected the Great Recession?\nSome hints/tips:\n You should use filter() to only select rows where the year is 2006 or 2009 (i.e. filter(year %in% c(2006, 2009)) and to select rows where the month is January (filter(month == 1) or filter(month_name == \"January\"))\n In order for the year to be plotted as separate categories on the x-axis, it needs to be a factor, so use mutate(year = factor(year)) to convert it.\n To make ggplot draw lines between the 2006 and 2009 categories, you need to include group = state in the aesthetics.\n   Bonus Exercise This is entirely optional but might be fun. Then again, it might not be fun. I don’t know.\nFor extra fun times, if you feel like it, create a bump chart showing something from the unemployment data (perhaps the top 10 states or bottom 10 states in unemployment?) Adapt the code in the example for today’s session.\nIf you do this, plotting 51 lines is going to be a huge mess. But filtering the data is also a bad idea, because states could drop in and out of the top/bottom 10 over time, and we don’t want to get rid of them. Instead, you can zoom in on a specific range of data in your plot with coord_cartesian(ylim = c(1, 10)), for instance.\n Turning everything in When you’re all done, click on the “Knit” button at the top of the editing window and create a PDF. Upload the PDF file to D2L.\n Postscript: how we got this unemployment data For the curious, here’s the code we used to download the unemployment data from the BLS.\nAnd to pull the curtain back and show how much googling is involved in data visualization (and data analysis and programming in general), here was my process for getting this data:\nWe thought “We want to have students show variation in something domestic over time” and then we googled “us data by state”. Nothing really came up (since it was an exceedingly vague search in the first place), but some results mentioned unemployment rates, so we figured that could be cool.\n We googled “unemployment statistics by state over time” and found that the BLS keeps statistics on this. We clicked on the “Data Tools” link in their main navigation bar, clicked on “Unemployment”, and then clicked on the “Multi-screen data search” button for the Local Area Unemployment Statistics (LAUS).\n We walked through the multiple screens and got excited that we’d be able to download all unemployment stats for all states for a ton of years, but then the final page had links to 51 individual Excel files, which was dumb.\n So we went back to Google and searched for “download bls data r” and found a few different packages people have written to do this. The first one we clicked on was blscrapeR at GitHub, and it looked like it had been updated recently, so we went with it.\n We followed the examples in the blscrapeR package and downloaded data for every state.\n  Another day in the life of doing modern data science. This is an example of something you will be able to do by the end of this class. we had no idea people had written R packages to access BLS data, but there are (at least) 3 packages out there. After a few minutes of tinkering, we got it working and it is relatively straightforward.\n  ","date":1632182400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1632235494,"objectID":"e52acfab5d487b6c8267ead23da8e20e","permalink":"https://ssc442.netlify.app/assignment/04-assignment/","publishdate":"2021-09-21T00:00:00Z","relpermalink":"/assignment/04-assignment/","section":"assignment","summary":"Getting started  Bonus Exercise Turning everything in Postscript: how we got this unemployment data    NOTE\nYou must turn in a PDF document of your R Markdown code. Submit this to D2L by 11:59 PM Eastern Time on Sunday, September 26th\n Getting started For this exercise you’ll use state-level unemployment data from 2006 to 2016 that comes from the US Bureau of Labor Statistics (if you’re curious, we describe how we built this dataset down below).","tags":null,"title":"Visualizing Large(ish) Data","type":"docs"},{"authors":null,"categories":null,"content":"   Visualizing data distributions  Variable types Case study: describing student heights  Distribution function Cumulative distribution functions  Geometries for describing distributions  Histograms Smoothed density Interpreting the y-axis Densities permit stratification  The normal distribution  Standard units Quantile-quantile plots Percentiles  ggplot2 geometries  Barplots Histograms Density plots Boxplots  Try it!    Visualizing data distributions Throughout your education, you may have noticed that numerical data is often summarized with the average value. For example, the quality of a high school is sometimes summarized with one number: the average score on a standardized test. Occasionally, a second number is reported: the standard deviation. For example, you might read a report stating that scores were 680 plus or minus 50 (the standard deviation). The report has summarized an entire vector of scores with just two numbers. Is this appropriate? Is there any important piece of information that we are missing by only looking at this summary rather than the entire list?\nOur first data visualization building block is learning to summarize lists of factors or numeric vectors—the two primary data types that we encounter in data analytics. More often than not, the best way to share or explore this summary is through data visualization. The most basic statistical summary of a list of objects or numbers is its distribution. Once a vector has been summarized as a distribution, there are several data visualization techniques to effectively relay this information.\nIn this section, we first discuss properties of a variety of distributions and how to visualize distributions using a motivating example of student heights. We then discuss some principles of data visualizations more broadly, and introduce new ggplot geometries to help us along the way.\nVariable types We will be working with two types of variables: categorical and numeric. Each can be divided into two other groups: categorical can be ordinal or not, whereas numerical variables can be discrete or continuous.\nWhen each entry in a vector comes from one of a small number of groups, we refer to the data as categorical data. Two simple examples are sex (male or female) and regions (Northeast, South, North Central, West). Some categorical data can be ordered even if they are not numbers per se, such as spiciness (mild, medium, hot). In statistics textbooks, ordered categorical data are referred to as ordinal data. In psychology, a number of different terms are used for this same idea.\nExamples of numerical data are population sizes, murder rates, and heights. Some numerical data can be treated as ordered categorical. We can further divide numerical data into continuous and discrete. Continuous variables are those that can take any value, such as heights, if measured with enough precision. For example, a pair of twins may be 68.12 and 68.11 inches, respectively. Counts, such as population sizes, are discrete because they have to be integers—that’s how we count.1\n Case study: describing student heights Here we consider an artificial problem to help us illustrate the underlying concepts.\nPretend that we have to describe the heights of our classmates to ET, an extraterrestrial that has never seen humans. As a first step, we need to collect data. To do this, we ask students to report their heights in inches. We ask them to provide sex information because we know there are two different distributions by sex. We collect the data and save it in the heights data frame:\nlibrary(tidyverse) library(dslabs) data(heights) One way to convey the heights to ET is to simply send him this list of 1050 heights. But there are much more effective ways to convey this information, and understanding the concept of a distribution will help. To simplify the explanation, we first focus on male heights.\nDistribution function It turns out that, in some cases, the average and the standard deviation are pretty much all we need to understand the data. We will learn data visualization techniques that will help us determine when this two number summary is appropriate. These same techniques will serve as an alternative for when two numbers are not enough.\nThe most basic statistical summary of a list of objects or numbers is its distribution. The simplest way to think of a distribution is as a compact description of a list with many entries. This concept should not be new for readers of this book. For example, with categorical data, the distribution simply describes the proportion of each unique category. The sex represented in the heights dataset is:\n## ## Female Male ## 0.2266667 0.7733333 This two-category frequency table is the simplest form of a distribution. We don’t really need to visualize it since one number describes everything we need to know: 23% are females and the rest are males. When there are more categories, then a simple barplot describes the distribution. Here is an example with US state regions:\nThis particular plot simply shows us four numbers, one for each category. We usually use barplots to display a few numbers. Although this particular plot does not provide much more insight than a frequency table itself, it is a first example of how we convert a vector into a plot that succinctly summarizes all the information in the vector. When the data is numerical, the task of displaying distributions is more challenging.\n Cumulative distribution functions Numerical data that are not categorical also have distributions. In general, when data is not categorical, reporting the frequency of each entry is not an effective summary since most entries are unique. In our case study, while several students reported a height of 68 inches, only one student reported a height of 68.503937007874 inches and only one student reported a height 68.8976377952756 inches. We assume that they converted from 174 and 175 centimeters, respectively.\nStatistics textbooks teach us that a more useful way to define a distribution for numeric data is to define a function that reports the proportion of the data below \\(a\\) for all possible values of \\(a\\). This function is called the cumulative distribution function (CDF). In statistics, the following notation is used:\n\\[ F(a) = \\mbox{Pr}(x \\leq a) \\]\nHere is a plot of \\(F\\) for the male height data:\nSimilar to what the frequency table does for categorical data, the CDF defines the distribution for numerical data. From the plot, we can see that 16% of the values are below 65, since \\(F(66)=\\) 0.1637931, or that 84% of the values are below 72, since \\(F(72)=\\) 0.841133, and so on. In fact, we can report the proportion of values between any two heights, say \\(a\\) and \\(b\\), by computing \\(F(b) - F(a)\\). This means that if we send this plot above to ET, he will have all the information needed to reconstruct the entire list. Paraphrasing the expression “a picture is worth a thousand words”, in this case, a picture is as informative as 812 numbers.\nA final note: because CDFs can be defined mathematically—and absent any data—the word empirical is added to make the distinction when data is used. We therefore use the term empirical CDF (eCDF).\n  Geometries for describing distributions Now, we’ll introduce ggplot geometries useful for describing distributions (or for many other things).\nHistograms Although the CDF concept is widely discussed in statistics textbooks, the plot is actually not very popular in practice. The main reason is that it does not easily convey characteristics of interest such as: at what value is the distribution centered? Is the distribution symmetric? What ranges contain 95% of the values? I doubt you can figure these out from glancing at the plot above. Histograms are much preferred because they greatly facilitate answering such questions. Histograms sacrifice just a bit of information to produce plots that are much easier to interpret.\nThe simplest way to make a histogram is to divide the span of our data into non-overlapping bins of the same size. Then, for each bin, we count the number of values that fall in that interval. The histogram plots these counts as bars with the base of the bar defined by the intervals. Here is the histogram for the height data splitting the range of values into one inch intervals: \\((49.5, 50.5],(50.5, 51.5],(51.5,52.5],(52.5,53.5],...,(82.5,83.5]\\)\nheights %\u0026gt;% filter(sex==\u0026quot;Male\u0026quot;) %\u0026gt;% ggplot(aes(x = height)) + geom_histogram(binwidth = 1, color = \u0026quot;black\u0026quot;) If we send this histogram plot to some uninformed reader, she will immediately learn some important properties about our data. First, the range of the data is from 50 to 84 with the majority (more than 95%) between 63 and 75 inches. Second, the heights are close to symmetric around 69 inches. Also, by adding up counts, this reader could obtain a very good approximation of the proportion of the data in any interval. Therefore, the histogram above is not only easy to interpret, but also provides almost all the information contained in the raw list of 812 heights with about 30 bin counts.\nWhat information do we lose? Note that all values in each interval are treated the same when computing bin heights. So, for example, the histogram does not distinguish between 64, 64.1, and 64.2 inches. Given that these differences are almost unnoticeable to the eye, the practical implications are negligible and we were able to summarize the data to just 23 numbers.\nThe geom_histogram layer only requires one aesthetic mapping - the x-axis. This is because the y-axis is computed from counts of the x-axis. Giving an aesthetic mapping to an additional variable for y will result in an error. Using an aesthetic mapping like fill will work - it’ll give you two histograms on top of each other. Try it! Try setting the alpha aesthetic to .5 (not an aesthetic mapping) so you can see both layers when they overlap.\n Smoothed density Smooth density plots are aesthetically more appealing than histograms. geom_density is the geometry that gives a smoothed density. Here is what a smooth density plot looks like for our heights data:\nheights %\u0026gt;% filter(sex==\u0026quot;Male\u0026quot;) %\u0026gt;% ggplot(aes(height)) + geom_density(alpha = .2, fill= \u0026quot;#00BFC4\u0026quot;, color = \u0026#39;gray50\u0026#39;) In this plot, we no longer have sharp edges at the interval boundaries and many of the local peaks have been removed. Also, the scale of the y-axis changed from counts to density. That is, the area under the curve will add up to 1, so we can read it like a probability density.\nTo understand the smooth densities, we have to understand estimates, a topic we don’t cover until later. However, we provide a heuristic explanation to help you understand the basics so you can use this useful data visualization tool.\nThe main new concept you must understand is that we assume that our list of observed values is a subset of a much larger list of unobserved values. In the case of heights, you can imagine that our list of 812 male students comes from a hypothetical list containing all the heights of all the male students in all the world measured very precisely. Let’s say there are 1,000,000 of these measurements. This list of values has a distribution, like any list of values, and this larger distribution is really what we want to report to ET since it is much more general. Unfortunately, we don’t get to see it.\nHowever, we make an assumption that helps us perhaps approximate it. If we had 1,000,000 values, measured very precisely, we could make a histogram with very, very small bins. The assumption is that if we show this, the height of consecutive bins will be similar. This is what we mean by smooth: we don’t have big jumps in the heights of consecutive bins. Below we have a hypothetical histogram with bins of size 1:\nThe smaller we make the bins, the smoother the histogram gets. Here are the histograms with bin width of 1, 0.5, and 0.1:\nThe smooth density is basically the curve that goes through the top of the histogram bars when the bins are very, very small. To make the curve not depend on the hypothetical size of the hypothetical list, we compute the curve on frequencies rather than counts. We do this by using the double-dot object ..density... Objects surrounded by .. are objects that are calculated by ggplot. If we look at ?geom_histogram, and go down to “Computed variables”, we see that we could use ..count.. to get “number of points in a bin”; ..ncount.. for the count scaled to a max of 1; or ..ndensity.. which scales the density to a max of 1 (which is a strange one). We can manually set the y aesthetic mapping, which defaults to ..count.., to ..density..:\nx %\u0026gt;% ggplot(aes(x = height)) + geom_histogram(aes(y=..density..), binwidth = 0.1, color = \u0026quot;black\u0026quot;) Now, back to reality. We don’t have millions of measurements. In this concrete example, we have 812 and we can’t make a histogram with very small bins.\nWe therefore make a histogram, using bin sizes appropriate for our data and computing frequencies rather than counts, and we draw a smooth curve that goes through the tops of the histogram bars. The following plots (loosely) demonstrate the steps that the computer goes through to ultimately create a smooth density:\n Interpreting the y-axis Note that interpreting the y-axis of a smooth density plot is not straightforward. It is scaled so that the area under the density curve adds up to 1. If you imagine we form a bin with a base 1 unit in length, the y-axis value tells us the proportion of values in that bin. However, this is only true for bins of size 1. For other size intervals, the best way to determine the proportion of data in that interval is by computing the proportion of the total area contained in that interval. For example, here are the proportion of values between 65 and 68:\nThe proportion of this area is about 0.3, meaning that about 30% of male heights are between 65 and 68 inches.\nBy understanding this, we are ready to use the smooth density as a summary. For this dataset, we would feel quite comfortable with the smoothness assumption, and therefore with sharing this aesthetically pleasing figure with ET, which he could use to understand our male heights data:\nheights %\u0026gt;% filter(sex==\u0026quot;Male\u0026quot;) %\u0026gt;% ggplot(aes(x = height)) + geom_density(alpha=.2, fill= \u0026quot;#00BFC4\u0026quot;, color = \u0026#39;black\u0026#39;) Note that the only aesthetic mapping is x = height, while the fill and color are set as un-mapped aesthetics.\n Densities permit stratification As a final note, we point out that an advantage of smooth densities over histograms for visualization purposes is that densities make it easier to compare two distributions. This is in large part because the jagged edges of the histogram add clutter. Here is an example comparing male and female heights:\nheights %\u0026gt;% ggplot(aes(height, fill=sex)) + geom_density(alpha = 0.2, color = \u0026#39;black\u0026#39;) With the right argument, ggplot automatically shades the intersecting region with a different color.\n  The normal distribution Histograms and density plots provide excellent summaries of a distribution. But can we summarize even further? We often see the average and standard deviation used as summary statistics: a two-number summary! To understand what these summaries are and why they are so widely used, we need to understand the normal distribution.\nThe normal distribution, also known as the bell curve and as the Gaussian distribution, is one of the most famous mathematical concepts in history. A reason for this is that approximately normal distributions occur in many situations, including gambling winnings, heights, weights, blood pressure, standardized test scores, and experimental measurement errors. There are explanations for this, but we describe these later. Here we focus on how the normal distribution helps us summarize data.\nRather than using data, the normal distribution is defined with a mathematical formula. For any interval \\((a,b)\\), the proportion of values in that interval can be computed using this formula:\n\\[\\mbox{Pr}(a \u0026lt; x \u0026lt; b) = \\int_a^b \\frac{1}{\\sqrt{2\\pi}s} e^{-\\frac{1}{2}\\left( \\frac{x-m}{s} \\right)^2} \\, dx\\]\nYou don’t need to memorize or understand the details of the formula. But note that it is completely defined by just two parameters: \\(m\\) and \\(s\\). The rest of the symbols in the formula represent the interval ends that we determine, \\(a\\) and \\(b\\), and known mathematical constants \\(\\pi\\) and \\(e\\). These two parameters, \\(m\\) and \\(s\\), are referred to as the average (also called the mean) and the standard deviation (SD) of the distribution, respectively.\nThe distribution is symmetric, centered at the average, and most values (about 95%) are within 2 SDs from the average. Here is what the normal distribution looks like when the average is 0 and the SD is 1:\nThe fact that the distribution is defined by just two parameters implies that if a dataset is approximated by a normal distribution, all the information needed to describe the distribution can be encoded in just two numbers: the average and the standard deviation. We now define these values for an arbitrary list of numbers.\nFor a list of numbers contained in a vector x, the average is defined as:\nm \u0026lt;- sum(x) / length(x) and the SD is defined as:\ns \u0026lt;- sqrt(sum((x-mu)^2) / length(x)) which can be interpreted as the average distance between values and their average.\nLet’s compute the values for the height for males which we will store in the object \\(x\\):\nindex \u0026lt;- heights$sex == \u0026quot;Male\u0026quot; x \u0026lt;- heights$height[index] The pre-built functions mean and sd (note that for reasons explained later, sd divides by length(x)-1 rather than length(x)) can be used here:\nm \u0026lt;- mean(x) s \u0026lt;- sd(x) c(average = m, sd = s) ## average sd ## 69.314755 3.611024 Here is a plot of the smooth density and the normal distribution with mean = 69.3 and SD = 3.6 plotted as a black line with our student height smooth density in blue:\nNow, we can ask the question “is our height data approximately normally distributed?”. The normal distribution does appear to be quite a good approximation here. We now will see how well this approximation works at predicting the proportion of values within intervals.\nStandard units For data that is approximately normally distributed, it is convenient to think in terms of standard units. The standard unit of a value tells us how many standard deviations away from the average it is. Specifically, for a value x from a vector X, we define the value of x in standard units as z = (x - m)/s with m and s the average and standard deviation of X, respectively. Why is this convenient?\nFirst look back at the formula for the normal distribution and note that what is being exponentiated is \\(-z^2/2\\) with \\(z\\) equivalent to \\(x\\) in standard units. Because the maximum of \\(e^{-z^2/2}\\) is when \\(z=0\\), this explains why the maximum of the distribution occurs at the average. It also explains the symmetry since \\(- z^2/2\\) is symmetric around 0. Second, note that if we convert the normally distributed data to standard units, we can quickly know if, for example, a person is about average (\\(z=0\\)), one of the largest (\\(z \\approx 2\\)), one of the smallest (\\(z \\approx -2\\)), or an extremely rare occurrence (\\(z \u0026gt; 3\\) or \\(z \u0026lt; -3\\)). Remember that it does not matter what the original units are, these rules apply to any data that is approximately normal.\nIn R, we can obtain standard units using the function scale:\nz \u0026lt;- scale(x) Now to see how many men are within 2 SDs from the average, we simply type:\nmean(abs(z) \u0026lt; 2) ## [1] 0.9495074 The proportion is about 95%, which is what the normal distribution predicts! To further confirm that, in fact, the approximation is a good one, we can use quantile-quantile plots.\n Quantile-quantile plots A systematic way to assess how well the normal distribution fits the data is to check if the observed and predicted proportions match. In general, this is the approach of the quantile-quantile plot (QQ-plot). If our heights distribution is really normal, then the 10th percentile of our heights data should be the same as the 10th percentile of a theoretical normal, as should the 20th, 30th, 33rd, 37.5th, etc. percentiles.\nFirst let’s define the theoretical quantiles (percentiles) for the normal distribution. In statistics books we use the symbol \\(\\Phi(x)\\) to define the function that gives us the probability of a standard normal distribution being smaller than \\(x\\). So, for example, \\(\\Phi(-1.96) = 0.025\\) and \\(\\Phi(1.96) = 0.975\\). In R, we can evaluate \\(\\Phi\\) using the pnorm function:\npnorm(-1.96) ## [1] 0.0249979 The inverse function \\(\\Phi^{-1}(x)\\) gives us the theoretical quantiles for the normal distribution. So, for example, \\(\\Phi^{-1}(0.975) = 1.96\\). In R, we can evaluate the inverse of \\(\\Phi\\) using the qnorm function.\nqnorm(0.975) ## [1] 1.959964 Note that these calculations are for the standard normal distribution by default (mean = 0, standard deviation = 1), but we can also define these for any normal distribution. We can do this using the mean and sd arguments in the pnorm and qnorm function. For example, we can use qnorm to determine quantiles of a distribution with a specific average and standard deviation\nqnorm(0.975, mean = 5, sd = 2) ## [1] 8.919928 For the normal distribution, all the calculations related to quantiles are done without data, thus the name theoretical quantiles. But quantiles can be defined for any distribution, including an empirical one. So if we have data in a vector \\(x\\), we can define the quantile associated with any proportion \\(p\\) as the \\(q\\) for which the proportion of values below \\(q\\) is \\(p\\). Using R code, we can define q as the value for which mean(x \u0026lt;= q) = p. Notice that not all \\(p\\) have a \\(q\\) for which the proportion is exactly \\(p\\). There are several ways of defining the best \\(q\\) as discussed in the help for the quantile function.\nTo give a quick example, for the male heights data, we have that:\nmean(x \u0026lt;= 69.5) ## [1] 0.5147783 So about 50% are shorter or equal to 69 inches. This implies that if \\(p=0.50\\) then \\(q=69.5\\).\nThe idea of a QQ-plot is that if your data is well approximated by normal distribution then the quantiles of your data should be similar to the quantiles of a normal distribution. To construct a QQ-plot, we do the following:\nDefine a vector of \\(m\\) proportions \\(p_1, p_2, \\dots, p_m\\). Define a vector of quantiles \\(q_1, \\dots, q_m\\) for your data for the proportions \\(p_1, \\dots, p_m\\). We refer to these as the sample quantiles. Define a vector of theoretical quantiles for the proportions \\(p_1, \\dots, p_m\\) for a normal distribution with the same average and standard deviation as the data. Plot the sample quantiles versus the theoretical quantiles.  Let’s construct a QQ-plot using R code. Start by defining the vector of proportions.\np \u0026lt;- seq(0.005, 0.995, 0.01) To obtain the quantiles from the data, we can use the quantile function like this:\nsample_quantiles \u0026lt;- quantile(x, p) To obtain the theoretical normal distribution quantiles with the corresponding average and SD, we use the qnorm function:\ntheoretical_quantiles \u0026lt;- qnorm(p, mean = mean(x), sd = sd(x)) df = data.frame(sample_quantiles, theoretical_quantiles) To see if they match or not, we plot them against each other and draw the identity line:\nggplot(data = df, aes(x = theoretical_quantiles, y = sample_quantiles)) + geom_point() + geom_abline() # a 45-degree line Notice that this code becomes much cleaner if we use standard units:\nsample_quantiles \u0026lt;- quantile(z, p) theoretical_quantiles \u0026lt;- qnorm(p) df2 = data.frame(sample_quantiles, theoretical_quantiles) ggplot(data = df2, aes(x = theoretical_quantiles, y = sample_quantiles)) + geom_point() + geom_abline() The above code is included to help describe QQ-plots. However, in practice it is easier to use the ggplot geometry geom_qq:\nheights %\u0026gt;% filter(sex == \u0026quot;Male\u0026quot;) %\u0026gt;% ggplot(aes(sample = scale(height))) + geom_qq() + geom_abline() While for the illustration above we used 100 quantiles, the default from the geom_qq function is to use as many quantiles as data points.\n Percentiles Before we move on, let’s define some terms that are commonly used in exploratory data analysis.\nPercentiles are special cases of quantiles that are commonly used. The percentiles are the quantiles you obtain when setting the \\(p\\) at \\(0.01, 0.02, ..., 0.99\\). We call, for example, the case of \\(p=0.25\\) the 25th percentile, which gives us a number for which 25% of the data is below. The most famous percentile is the 50th, also known as the median.\nFor the normal distribution the median and average are the same, but this is generally not the case.\nAnother special case that receives a name are the quartiles, which are obtained when setting \\(p=0.25,0.50\\), and \\(0.75\\).\n  ggplot2 geometries Alhough we haven’t gone into detain about the ggplot2 package for data visualization, we now will briefly discuss some of the geometries involved in the plots above. We will discuss ggplot2 in (excruciating) detail later this week. For now, we will briefly demonstrate how to generate plots related to distributions.\nBarplots To generate a barplot we can use the geom_bar geometry. The default is to count the number of each category and draw a bar. Here is the plot for the regions of the US.\nmurders %\u0026gt;% ggplot(aes(region)) + geom_bar() We often already have a table with a distribution that we want to present as a barplot. Here is an example of such a table:\ndata(murders) tab \u0026lt;- murders %\u0026gt;% count(region) %\u0026gt;% mutate(proportion = n/sum(n)) tab ## region n proportion ## 1 Northeast 9 0.1764706 ## 2 South 17 0.3333333 ## 3 North Central 12 0.2352941 ## 4 West 13 0.2549020 We no longer want geom_bar to count, but rather just plot a bar to the height provided by the proportion variable. For this we need to provide x (the categories) and y (the values) and use the stat=\"identity\" option. This tells R to just use the actual value in proportion for the y aesthetic. This is only necessary when you’re telling R that you have your own field (proportion) that you want to use instead of just the count.\ntab %\u0026gt;% ggplot(aes(x = region, y = proportion)) + geom_bar(stat = \u0026quot;identity\u0026quot;)  Histograms To generate histograms we use geom_histogram. By looking at the help file for this function, we learn that the only required argument is x, the variable for which we will construct a histogram. We dropped the x because we know it is the first argument. The code looks like this:\nheights %\u0026gt;% filter(sex == \u0026quot;Female\u0026quot;) %\u0026gt;% ggplot(aes(height)) + geom_histogram() If we run the code above, it gives us a message:\n stat_bin() using bins = 30. Pick better value with binwidth. We previously used a bin size of 1 inch (of observed height), so the code looks like this:\n heights %\u0026gt;% filter(sex == \u0026quot;Female\u0026quot;) %\u0026gt;% ggplot(aes(height)) + geom_histogram(binwidth = 1) Finally, if for aesthetic reasons we want to add color, we use the arguments described in the help file. We also add labels and a title:\nheights %\u0026gt;% filter(sex == \u0026quot;Female\u0026quot;) %\u0026gt;% ggplot(aes(height)) + geom_histogram(binwidth = 1, fill = \u0026quot;blue\u0026quot;, col = \u0026quot;black\u0026quot;) + labs(x = \u0026quot;Male heights in inches\u0026quot;, title = \u0026quot;Histogram\u0026quot;)  Density plots To create a smooth density, we use the geom_density. To make a smooth density plot with the data previously shown as a histogram we can use this code:\nheights %\u0026gt;% filter(sex == \u0026quot;Female\u0026quot;) %\u0026gt;% ggplot(aes(x = height)) + geom_density() To fill in with color, we can use the fill argument.\nheights %\u0026gt;% filter(sex == \u0026quot;Female\u0026quot;) %\u0026gt;% ggplot(aes(x = height)) + geom_density(fill=\u0026quot;blue\u0026quot;) To change the smoothness of the density, we use the adjust argument to multiply the default value by that adjust. For example, if we want the bandwidth to be twice as big we use:\nheights %\u0026gt;% filter(sex == \u0026quot;Female\u0026quot;) %\u0026gt;% ggplot(aes(x = height)) + geom_density(fill=\u0026quot;blue\u0026quot;, adjust = 2)  Boxplots The geometry for boxplot is geom_boxplot. As discussed, boxplots are useful for comparing distributions. For example, below are the previously shown heights for women, but compared to men. For this geometry, we need arguments x as the categories, and y as the values.\nNote that our x-axis is a categorical variable. The order is determined by either the factor variable levels in heights or, if no levels are set, in the order in which the sex variable first encounters them. Later on, we’ll learn how to change the ordering.\nWe can do much more with boxplots when we have more data. Right now, our heights data has only two variables - sex and height. Let’s say we took the measurements over two different years - 2010 and 2020. That’s not in our data, so purely for exposition, we’ll add it by randomly drawing a year for each observation. We’ll do this with sample\nheights = heights %\u0026gt;% dplyr::mutate(year = sample(x = c(2010, 2020), size = n(), replace = TRUE, prob = c(.5, .5))) head(heights) ## sex height year ## 1 Male 75 2020 ## 2 Male 70 2010 ## 3 Male 68 2020 ## 4 Male 74 2010 ## 5 Male 61 2020 ## 6 Female 65 2010 Now, let’s look at the boxplot of heights by sex, but broken out by year. We can do this by adding year as an aesthetic mapping. Because our year variable is an integer, R will start by thinking it’s a continuous numeric, but we want to treat it as a discrete variable. So, we wrap it in as.factor() to force R to recognize it as a discrete variable.\nheights %\u0026gt;% ggplot(aes(x = sex, y = height, fill = as.factor(year))) + geom_boxplot() + labs(fill = \u0026#39;Year\u0026#39;) Now we have each sex broken out by year! Since we randomly assigned year to our data (and didn’t actually take samples in two different decades), the distribution between years and within sex is nearly identical.\nWhat if we wanted to have year on the x-axis, but then put the sex boxplots next to each other. This would let us compare the difference in heights by sex over the two sample years.\nheights %\u0026gt;% ggplot(aes(x = year, y = height, fill = sex)) + geom_boxplot() + labs(fill = \u0026#39;Sex\u0026#39;) Woah. Wait. What? Remember, in our data, class(heights$year) is numeric, so when we ask R to put year on the x-axis, it thinks it’s plotting a number. It gives us a nonsense x-axis. How do we fix this? We force as.factor(year) to tell R that yes, year is a categorical variable. Note that we didn’t have to use as.factor(sex) - that’s because sex is already a categorical variable.\nheights %\u0026gt;% ggplot(aes(x = as.factor(year), y = height, fill = sex)) + geom_boxplot() + labs(fill = \u0026#39;Sex\u0026#39;) Now we can see the height difference by sex, by year.\nWe will explore more with boxplots and colors in our next lecture.\n  Try it! Try it!\nTRY IT\nStart by loading the dplyr and ggplot2 library as well as the murders and heights data.\nlibrary(dplyr) library(ggplot2) library(dslabs) data(heights) data(murders) First, create a new variable in murders that has murders_per_capita.  murders = murders %\u0026gt;% mutate(........) Make a histogram of murders per capita. Use the default values for color and fill, but make sure you label the x-axis with a meaningful label.\n Make the same histogram, but set the fill aesthetic to MSU Green and the color to black.\n Do the same, but make it a smooth density plot\n Finally, plot the smooth density but use a fill aesthetic mapping so that each region’s density is shown. Set a meaningful title on the legend, and make sure you make the density transparent so we can see all of the region’s densities (see alpha aesthetic).\n Now, try making a boxplot to show the same data - the distribution across states of murders per capita by region. What is the average Northeastern state’s murder rate? What about the average Southern state?\n      Keep in mind that discrete numeric data can be considered ordinal. Although this is technically true, we usually reserve the term ordinal data for variables belonging to a small number of different groups, with each group having many members. In contrast, when we have many groups with few cases in each group, we typically refer to them as discrete numerical variables. So, for example, the number of packs of cigarettes a person smokes a day, rounded to the closest pack, would be considered ordinal, while the actual number of cigarettes would be considered a numerical variable. But, indeed, there are examples that can be considered both numerical and ordinal when it comes to visualizing data.↩︎\n   ","date":1631750400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1632838512,"objectID":"73664027ae41c739f0c70a62c901a4c5","permalink":"https://ssc442.netlify.app/example/03-example/","publishdate":"2021-09-16T00:00:00Z","relpermalink":"/example/03-example/","section":"example","summary":"Visualizing data distributions  Variable types Case study: describing student heights  Distribution function Cumulative distribution functions  Geometries for describing distributions  Histograms Smoothed density Interpreting the y-axis Densities permit stratification  The normal distribution  Standard units Quantile-quantile plots Percentiles  ggplot2 geometries  Barplots Histograms Density plots Boxplots  Try it!    Visualizing data distributions Throughout your education, you may have noticed that numerical data is often summarized with the average value.","tags":null,"title":"ggplot2: Everything you ever wanted to know","type":"docs"},{"authors":null,"categories":null,"content":"   Preliminaries Background  R Markdown Data Prep  Getting help Turning everything in   NOTE\nYou must turn in a PDF document of your R Markdown code. Submit this to D2L by 11:59 PM Eastern Time on Sunday, September 19th.\n Preliminaries As always, we will first have to load ggplot2. To do this, we will load the tidyverse by running this code:\nlibrary(tidyverse)  Background The New York City Department of Buildings (DOB) maintains a list of construction sites that have been categorized as “essential” during the city’s shelter-in-place pandemic order. They’ve provided an interactive map here where you can see the different projects. There’s also a link there to download the complete dataset.\nFor this exercise, you’re going to use this data to visualize the amounts or proportions of different types of essential projects in the five boroughs of New York City (Brooklyn, Manhattan, the Bronx, Queens, and Staten Island).\nAs you hopefully figured out by now, you’ll be doing all your R work in R Markdown. You can use an RStudio Project to keep your files well organized (either on your computer or on RStudio.cloud), but this is optional. If you decide to do so, either create a new project for this exercise only, or make a project for all your work in this class.\nYou’ll need to download one CSV file and put it somewhere on your computer or upload it to RStudio.cloud—preferably in a folder named data in your project folder. You can download the data from the DOB’s map, or use this link to get it directly:\n  EssentialConstruction.csv  R Markdown Writing regular text with R Markdown follows the rules of Markdown. You can make lists; different-size headers, etc. This should be relatively straightfoward. We talked about a few Markdown features like bold and italics in class. See this resource for more formatting.\nYou’ll also need to insert your own code chunks where needed. Rather than typing them by hand (that’s tedious and you might miscount the number of backticks!), use the “Insert” button at the top of the editing window, or type ctrl + alt + i on Windows, or ⌘ + ⌥ + i on macOS.\n Data Prep Once you download the EssentialConstruction.csv file and save it in your project folder, you can open it and start cleaning. I’ll help with that. I’ll give you a .Rmd that will get you started on the Exercises below. Download this and use it in place of your lab assignment template.\n  02-lab.Rmd  NOTE: You must change the title to Lab Assignment 02\nExercise 1 of 1: Essential pandemic construction\nUsing the Lab 02 template above, do the following:\nA. Show the count or proportion of approved projects by borough using a bar chart.\nB. Show the count or proportion of approved projects by category using a lollipop chart. Not sure of what a lollipop chart is? Google R ggplot lollipop. A huge portion of knowing how to code is knowing how to google, find examples, and figure out where to put your variables from your data!\nC. Show the proportion of approved projects by borough and category simultaneously using a heatmap.\nYou don’t need to make these super fancy, but if you’re feeling brave, experiment with adding a labs() layer or changing fill colors with scale_fill_manual() or with palettes.\nBonus\nOverlay the data from Part 1 above onto a map of NYC. For double bonus, color the boroughs.\n   Getting help Use the SSC442 Slack if you get stuck (click the Slack logo at the top right of this website header).\n Turning everything in When you’re all done, click on the “Knit” button at the top of the editing window and create a PDF. Upload the PDF file to D2L.\n ","date":1631577600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1631626585,"objectID":"af0b365ca488e9ad2d9f06d6c238b02e","permalink":"https://ssc442.netlify.app/assignment/03-assignment/","publishdate":"2021-09-14T00:00:00Z","relpermalink":"/assignment/03-assignment/","section":"assignment","summary":"Preliminaries Background  R Markdown Data Prep  Getting help Turning everything in   NOTE\nYou must turn in a PDF document of your R Markdown code. Submit this to D2L by 11:59 PM Eastern Time on Sunday, September 19th.\n Preliminaries As always, we will first have to load ggplot2. To do this, we will load the tidyverse by running this code:\nlibrary(tidyverse)  Background The New York City Department of Buildings (DOB) maintains a list of construction sites that have been categorized as “essential” during the city’s shelter-in-place pandemic order.","tags":null,"title":"Applying ggplot2 to Real Data","type":"docs"},{"authors":null,"categories":null,"content":"   Introduction to data visualization  Code    Introduction to data visualization Looking at the numbers and character strings that define a dataset is rarely useful. To convince yourself, print and stare at the US murders data table:\nlibrary(dslabs) data(murders) head(murders) ## state abb region population total ## 1 Alabama AL South 4779736 135 ## 2 Alaska AK West 710231 19 ## 3 Arizona AZ West 6392017 232 ## 4 Arkansas AR South 2915918 93 ## 5 California CA West 37253956 1257 ## 6 Colorado CO West 5029196 65 What do you learn from staring at this table? Even though it is a relatively straightforward table, we can’t learn anything. For starters, it is grossly abbreviated, though you could scroll through. In doing so, how quickly might you be able to determine which states have the largest populations? Which states have the smallest? How populous is a typical state? Is there a relationship between population size and total murders? How do murder rates vary across regions of the country? For most folks, it is quite difficult to extract this information just by looking at the numbers. In contrast, the answer to the questions above are readily available from examining this plot:\nlibrary(tidyverse) library(ggthemes) library(ggrepel) r \u0026lt;- murders %\u0026gt;% summarize(pop=sum(population), tot=sum(total)) %\u0026gt;% mutate(rate = tot/pop*10^6) %\u0026gt;% pull(rate) murders %\u0026gt;% ggplot(aes(x = population/10^6, y = total, label = abb)) + geom_abline(intercept = log10(r), lty=2, col=\u0026quot;darkgrey\u0026quot;) + geom_point(aes(color=region), size = 3) + geom_text_repel() + scale_x_log10() + scale_y_log10() + xlab(\u0026quot;Populations in millions (log scale)\u0026quot;) + ylab(\u0026quot;Total number of murders (log scale)\u0026quot;) + ggtitle(\u0026quot;US Gun Murders in 2010\u0026quot;) + scale_color_discrete(name=\u0026quot;Region\u0026quot;) + theme_economist_white() We are reminded of the saying: “A picture is worth a thousand words”. Data visualization provides a powerful way to communicate a data-driven finding. In some cases, the visualization is so convincing that no follow-up analysis is required. You should consider visualization the most potent tool in your data analytics arsenal.\nThe growing availability of informative datasets and software tools has led to increased reliance on data visualizations across many industries, academia, and government. A salient example is news organizations, which are increasingly embracing data journalism and including effective infographics as part of their reporting.\nA particularly salient example—given the current state of the world—is a Wall Street Journal article1 showing data related to the impact of vaccines on battling infectious diseases. One of the graphs shows measles cases by US state through the years with a vertical line demonstrating when the vaccine was introduced.\n(Source: Wall Street Journal)\nAnother striking example comes from a New York Times chart2, which summarizes scores from the NYC Regents Exams. As described in the article3, these scores are collected for several reasons, including to determine if a student graduates from high school. In New York City you need a 65 to pass. The distribution of the test scores forces us to notice something somewhat problematic:\n(Source: New York Times via Amanda Cox)\nThe most common test score is the minimum passing grade, with very few scores just below the threshold. This unexpected result is consistent with students close to passing having their scores bumped up.\nThis is an example of how data visualization can lead to discoveries which would otherwise be missed if we simply subjected the data to a battery of data analysis tools or procedures. Data visualization is the strongest tool of what we call exploratory data analysis (EDA). John W. Tukey4, considered the father of EDA, once said,\n  “The greatest value of a picture is when it forces us to notice what we never expected to see.”\n  Many widely used data analysis tools were initiated by discoveries made via EDA. EDA is perhaps the most important part of data analysis, yet it is one that is often overlooked.\nData visualization is also now pervasive in philanthropic and educational organizations. In the talks New Insights on Poverty5 and The Best Stats You’ve Ever Seen6, Hans Rosling forces us to notice the unexpected with a series of plots related to world health and economics. In his videos, he uses animated graphs to show us how the world is changing and how old narratives are no longer true.\nIt is also important to note that mistakes, biases, systematic errors and other unexpected problems often lead to data that should be handled with care. Failure to discover these problems can give rise to flawed analyses and false discoveries. As an example, consider that measurement devices sometimes fail and that most data analysis procedures are not designed to detect these. Yet these data analysis procedures will still give you an answer. The fact that it can be difficult or impossible to notice an error just from the reported results makes data visualization particularly important.\nToday, we will discuss the basics of data visualization and exploratory data analysis. We will use the ggplot2 package to code. To learn the very basics, we will start with a somewhat artificial example: heights reported by students. Then we will cover the two examples mentioned above: 1) world health and economics and 2) infectious disease trends in the United States.\nOf course, there is much more to data visualization than what we cover here. The following are references for those who wish to learn more:\n ER Tufte (1983) The visual display of quantitative information. Graphics Press. ER Tufte (1990) Envisioning information. Graphics Press. ER Tufte (1997) Visual explanations. Graphics Press. WS Cleveland (1993) Visualizing data. Hobart Press. WS Cleveland (1994) The elements of graphing data. CRC Press. A Gelman, C Pasarica, R Dodhia (2002) Let’s practice what we preach: Turning tables into graphs. The American Statistician 56:121-130. NB Robbins (2004) Creating more effective graphs. Wiley. A Cairo (2013) The functional art: An introduction to information graphics and visualization. New Riders. N Yau (2013) Data points: Visualization that means something. Wiley.  We also do not cover interactive graphics, a topic that is both too advanced for this course and too unweildy. Some useful resources for those interested in learning more can be found below, and you are encouraged to draw inspiration from those websites in your projects:\n https://shiny.rstudio.com/ https://d3js.org/  Code Some of the code from today’s class will be available below after the class.\n   http://graphics.wsj.com/infectious-diseases-and-vaccines/?mc_cid=711ddeb86e↩︎\n http://graphics8.nytimes.com/images/2011/02/19/nyregion/19schoolsch/19schoolsch-popup.gif↩︎\n https://www.nytimes.com/2011/02/19/nyregion/19schools.html↩︎\n https://en.wikipedia.org/wiki/John_Tukey↩︎\n https://www.ted.com/talks/hans_rosling_reveals_new_insights_on_poverty?language=en↩︎\n https://www.ted.com/talks/hans_rosling_shows_the_best_stats_you_ve_ever_seen↩︎\n   ","date":1631145600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1632838512,"objectID":"ce879375c9ab42490f4d0d112e48c07c","permalink":"https://ssc442.netlify.app/example/02-example/","publishdate":"2021-09-09T00:00:00Z","relpermalink":"/example/02-example/","section":"example","summary":"Introduction to data visualization  Code    Introduction to data visualization Looking at the numbers and character strings that define a dataset is rarely useful. To convince yourself, print and stare at the US murders data table:\nlibrary(dslabs) data(murders) head(murders) ## state abb region population total ## 1 Alabama AL South 4779736 135 ## 2 Alaska AK West 710231 19 ## 3 Arizona AZ West 6392017 232 ## 4 Arkansas AR South 2915918 93 ## 5 California CA West 37253956 1257 ## 6 Colorado CO West 5029196 65 What do you learn from staring at this table?","tags":null,"title":"Introduction to Visualization","type":"docs"},{"authors":null,"categories":null,"content":"   Programming basics  Conditional expressions Defining functions Namespaces For-loops Vectorization and functionals Exercises    You must turn in a PDF document of your R markdown code. Submit this to D2L by 11:59 PM on Sunday, September 12th.\nNOTE:\nAs you read through this assignment, practice with each of the examples (copy-paste them into an empty R script and run them). At the bottom of this page you will find the questions that comprise the assignment. These questions apply and expand on the topics and R functions in the assignment. Many assignments will have this same structure: some instruction preceeding specific exercises.\nRight-click to download the .Rmd template for labs . Please save the template into the labs folder in the SSC442 folder on your local hard drive. If you don’t have a nice file structure setup for the course, please make one now. It will save you from headaches in the future.\n Programming basics We teach R because it greatly facilitates data analysis. By coding in R, we can efficiently perform exploratory data analysis, build data analysis pipelines, and prepare data visualization to communicate results. However, R is not just a data analysis environment but a programming language. Advanced R programmers can develop complex packages and even improve R itself. But we do not cover advanced programming in this course. Nonetheless, in this section, we introduce three key programming concepts: conditional expressions, for-loops, and functions. These are not just key building blocks for advanced programming, but are sometimes useful during data analysis. We also note that there are several functions that are widely used to program in R but that we will not cover directly in this course. These include split, cut, do.call, and Reduce, as well as the data.table package. These are worth learning if you plan to become an expert R programmer.\nConditional expressions Conditional expressions are one of the basic features of programming. They are used for what is called flow control. The most common conditional expression is the if-else statement. In R, we can actually perform quite a bit of data analysis without conditionals. However, they do come up occasionally, and you will need them once you start writing your own functions and packages.\nHere is a very simple example showing the general structure of an if-else statement. The basic idea is to print the reciprocal of a unless a is 0:\na \u0026lt;- 0 if(a!=0){ print(1/a) } else{ print(\u0026quot;No reciprocal for 0.\u0026quot;) } ## [1] \u0026quot;No reciprocal for 0.\u0026quot; Let’s look at one more example using the US murders data frame:\nlibrary(dslabs) data(murders) murder_rate \u0026lt;- murders$total / murders$population*100000 Here is a very simple example that tells us which states, if any, have a murder rate lower than 0.5 per 100,000. The if statement protects us from the case in which no state satisfies the condition.\nind \u0026lt;- which.min(murder_rate) if(murder_rate[ind] \u0026lt; 0.5){ print(murders$state[ind]) } else{ print(\u0026quot;No state has murder rate that low\u0026quot;) } ## [1] \u0026quot;Vermont\u0026quot; If we try it again with a rate of 0.25, we get a different answer:\nif(murder_rate[ind] \u0026lt; 0.25){ print(murders$state[ind]) } else{ print(\u0026quot;No state has a murder rate that low.\u0026quot;) } ## [1] \u0026quot;No state has a murder rate that low.\u0026quot; A related function that is very useful is ifelse. This function takes three arguments: a logical and two possible answers. If the logical is TRUE, the value in the second argument is returned and if FALSE, the value in the third argument is returned. Here is an example:\na \u0026lt;- 0 ifelse(a \u0026gt; 0, 1/a, NA) ## [1] NA The function is particularly useful because it works on vectors. It examines each entry of the logical vector and returns elements from the vector provided in the second argument, if the entry is TRUE, or elements from the vector provided in the third argument, if the entry is FALSE.\na \u0026lt;- c(0, 1, 2, -4, 5) result \u0026lt;- ifelse(a \u0026gt; 0, 1/a, NA) This table helps us see what happened:    a  is_a_positive  answer1  answer2  result      0  FALSE  Inf  NA  NA    1  TRUE  1.00  NA  1.0    2  TRUE  0.50  NA  0.5    -4  FALSE  -0.25  NA  NA    5  TRUE  0.20  NA  0.2     Here is an example of how this function can be readily used to replace all the missing values in a vector with zeros:\ndata(na_example) no_nas \u0026lt;- ifelse(is.na(na_example), 0, na_example) sum(is.na(no_nas)) ## [1] 0 Two other useful functions are any and all. The any function takes a vector of logicals and returns TRUE if any of the entries is TRUE. The all function takes a vector of logicals and returns TRUE if all of the entries are TRUE. Here is an example:\nz \u0026lt;- c(TRUE, TRUE, FALSE) any(z) ## [1] TRUE all(z) ## [1] FALSE  Defining functions As you become more experienced, you will find yourself needing to perform the same operations over and over. A simple example is computing averages. We can compute the average of a vector x using the sum and length functions: sum(x)/length(x). Because we do this repeatedly, it is much more efficient to write a function that performs this operation. This particular operation is so common that someone already wrote the mean function and it is included in base R. However, you will encounter situations in which the function does not already exist, so R permits you to write your own. A simple version of a function that computes the average can be defined like this:\navg \u0026lt;- function(x){ s \u0026lt;- sum(x) n \u0026lt;- length(x) s/n } Now avg is a function that computes the mean:\nx \u0026lt;- 1:100 identical(mean(x), avg(x)) ## [1] TRUE Notice that variables defined inside a function are not saved in the workspace. So while we use s and n when we call avg, the values are created and changed only during the call. Here is an illustrative example:\ns \u0026lt;- 3 avg(1:10) ## [1] 5.5 s ## [1] 3 Note how s is still 3 after we call avg.\nIn general, functions are objects, so we assign them to variable names with \u0026lt;-. The function function tells R you are about to define a function. The general form of a function definition looks like this:\nmy_function \u0026lt;- function(VARIABLE_NAME){ perform operations on VARIABLE_NAME and calculate VALUE VALUE } The functions you define can have multiple arguments as well as default values. For example, we can define a function that computes either the arithmetic or geometric average depending on a user defined variable like this:\navg \u0026lt;- function(x, arithmetic = TRUE){ n \u0026lt;- length(x) ifelse(arithmetic, sum(x)/n, prod(x)^(1/n)) } We will learn more about how to create functions through experience as we face more complex tasks.\n Namespaces Once you start becoming more of an R expert user, you will likely need to load several add-on packages for some of your analysis. Once you start doing this, it is likely that two packages use the same name for two different functions. And often these functions do completely different things. In fact, you have already encountered this because both dplyr and the R-base stats package define a filter function. There are five other examples in dplyr. We know this because when we first load dplyr we see the following message:\nThe following objects are masked from ‘package:stats’: filter, lag The following objects are masked from ‘package:base’: intersect, setdiff, setequal, union So what does R do when we type filter? Does it use the dplyr function or the stats function? From our previous work we know it uses the dplyr one. But what if we want to use the stats version?\nThese functions live in different namespaces. R will follow a certain order when searching for a function in these namespaces. You can see the order by typing:\nsearch() The first entry in this list is the global environment which includes all the objects you define.\nSo what if we want to use the stats filter instead of the dplyr filter but dplyr appears first in the search list? You can force the use of a specific namespace by using double colons (::) like this:\nstats::filter If we want to be absolutely sure that we use the dplyr filter, we can use\ndplyr::filter Also note that if we want to use a function in a package without loading the entire package, we can use the double colon as well.\nFor more on this more advanced topic we recommend the R packages book1.\n For-loops If we had to write this section in a single sentence, it would be: Don’t use for-loops. Looping is intuitive, but R is designed to provide more computationally efficient solutions. For-loops should be considered a quick-and-dirty way to get an answer. But, hey, you live your own life. Below we provide a brief overview to for-looping.\nThe formula for the sum of the series \\(1+2+\\dots+n\\) is \\(n(n+1)/2\\). What if we weren’t sure that was the right function? How could we check? Using what we learned about functions we can create one that computes the \\(S_n\\):\ncompute_s_n \u0026lt;- function(n){ x \u0026lt;- 1:n sum(x) } How can we compute \\(S_n\\) for various values of \\(n\\), say \\(n=1,\\dots,25\\)? Do we write 25 lines of code calling compute_s_n? No, that is what for-loops are for in programming. In this case, we are performing exactly the same task over and over, and the only thing that is changing is the value of \\(n\\). For-loops let us define the range that our variable takes (in our example \\(n=1,\\dots,10\\)), then change the value and evaluate expression as you loop.\nPerhaps the simplest example of a for-loop is this useless piece of code:\nfor(i in 1:5){ print(i) } ## [1] 1 ## [1] 2 ## [1] 3 ## [1] 4 ## [1] 5 Here is the for-loop we would write for our \\(S_n\\) example:\nm \u0026lt;- 25 s_n \u0026lt;- vector(length = m) # create an empty vector for(n in 1:m){ s_n[n] \u0026lt;- compute_s_n(n) } In each iteration \\(n=1\\), \\(n=2\\), etc…, we compute \\(S_n\\) and store it in the \\(n\\)th entry of s_n.\nNow we can create a plot to search for a pattern:\nn \u0026lt;- 1:m plot(n, s_n) If you noticed that it appears to be a quadratic, you are on the right track because the formula is \\(n(n+1)/2\\). --\n Vectorization and functionals Although for-loops are an important concept to understand, in R we rarely use them. As you learn more R, you will realize that vectorization is preferred over for-loops since it results in shorter and clearer code. (It’s also vastly more efficient computationally, which can matter as your data grows.) A vectorized function is a function that will apply the same operation on each of the vectors.\nx \u0026lt;- 1:10 sqrt(x) ## [1] 1.000000 1.414214 1.732051 2.000000 2.236068 2.449490 2.645751 2.828427 ## [9] 3.000000 3.162278 y \u0026lt;- 1:10 x*y ## [1] 1 4 9 16 25 36 49 64 81 100 To make this calculation, there is no need for for-loops. However, not all functions work this way. For instance, the function we just wrote, compute_s_n, does not work element-wise since it is expecting a scalar. This piece of code does not run the function on each entry of n:\nn \u0026lt;- 1:25 compute_s_n(n) Functionals are functions that help us apply the same function to each entry in a vector, matrix, data frame, or list. Here we cover the functional that operates on numeric, logical, and character vectors: sapply.\nThe function sapply permits us to perform element-wise operations on any function. Here is how it works:\nx \u0026lt;- 1:10 sapply(x, sqrt) ## [1] 1.000000 1.414214 1.732051 2.000000 2.236068 2.449490 2.645751 2.828427 ## [9] 3.000000 3.162278 Each element of x is passed on to the function sqrt and the result is returned. These results are concatenated. In this case, the result is a vector of the same length as the original x. This implies that the for-loop above can be written as follows:\nn \u0026lt;- 1:25 s_n \u0026lt;- sapply(n, compute_s_n) Other functionals are apply, lapply, tapply, mapply, vapply, and replicate. We mostly use sapply, apply, and replicate in this book, but we recommend familiarizing yourselves with the others as they can be very useful.\n Exercises This is your first weekly lab assignment. Each lab assignment will need to be done in Rmarkdown using the lab template, just right-click and Save As…Start a new folder on your drive for this course, and inside that a new folder for lab assignments, and inside that a new folder for Lab No. 1. Rmarkdown will place some intermediate files in that folder, so leaving .Rmd files on your desktop will make things messy, fast.\nOnce you’ve saved the file, open it up in Rstudio.\n Change the title to “Lab 1”\n Put your name on it\n Leave the date alone. That little `r Sys.time(...)` will ask R to return the date (with M-D-Y formatting), which Rmarkdown will put in as if you had typed in the actual date.\n When you type ## 1. Text of..., Markdown will recognize “1. Text of” as a header and will automatically make it big.\n So please copy the number and text of the question you are answering here.  Next will be the ```{r q1} text that will be in gray. R will recognize this as code and will treat it as such. Anything run in that block will have an output.\n If you want to see what the code will do, copy the code and paste it into the gray area. Then, click the green right arrow in the top-right corner of the gray code chunk. It should show you the results.\n Use the results (plus your understanding of the code) to answer the question\n  With each completed question, clidk the “Knit” button up above the script window. Rmarkdown will create a .pdf for you of your work (as long as it doesn’t hit any R errors). Knit often to make sure you haven’t hit an error!\n The \\newpage line is a Latex command (the program that makes the typesetting look nice). It will start a new pdf page.\n On the next page, copy question #2 to a new header using ##.\n Once done, render one last .pdf and turn it in on D2L!\n  EXERCISES\nIn your first code chunk, load the package library tidyverse, which you will need for Question 8. Always load all your package libraries at the top, in the first code chunk!\n What will this conditional expression return and why?\n  x \u0026lt;- c(1,2,-3,4) if(all(x\u0026gt;0)){ print(\u0026quot;All Postives\u0026quot;) } else{ print(\u0026quot;Not all positives\u0026quot;) } Which of the following expressions is always FALSE when at least one entry of a logical vector x is TRUE?  all(x) any(x) any(!x) all(!x)  The function nchar tells you how many characters long a character vector is. Write a line of code that assigns to the object new_names the state abbreviation when the state name is longer than 8 characters.\n Create a function sum_n that for any given value, say \\(n\\), computes the sum of the integers from 1 to n (inclusive). Use the function to determine the sum of integers from 1 to 5,000.\n Create a function altman_plot that takes two arguments, x and y, and plots the difference against the sum. Use it to make an altman plot of x \u0026lt;- c(5,7,9) and y \u0026lt;- c(10,11,12). When your function creates the plot, it will output automatically in your Rmarkdown knitted .pdf.\n After running the code below, what is the value of x and why?\n  x \u0026lt;- 3 my_func \u0026lt;- function(y){ x \u0026lt;- 5 y+5 } Write a function compute_s_n that for any given \\(n\\) computes the sum \\(S_n = 1^2 + 2^2 + 3^2 + \\dots n^2\\). Report the value of the sum when \\(n=10\\).\n Define an empty numerical vector s_n of size 25 using s_n \u0026lt;- vector(\"numeric\", 25) and store in the results of \\(S_1, S_2, \\dots S_{25}\\) using a for-loop.\n Repeat exercise 8, but this time use sapply.\n Repeat exercise 8, but this time use map_dbl.\n Plot \\(S_n\\) versus \\(n\\). Use points defined by \\(n=1,\\dots,25\\).\n Confirm that the formula for this sum is \\(S_n= n(n+1)(2n+1)/6\\).\n      http://r-pkgs.had.co.nz/namespace.html↩︎\n   ","date":1630972800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1631031640,"objectID":"94cae82c16c517ab19420570e5d8c2ad","permalink":"https://ssc442.netlify.app/assignment/01-assignment/","publishdate":"2021-09-07T00:00:00Z","relpermalink":"/assignment/01-assignment/","section":"assignment","summary":"Programming basics  Conditional expressions Defining functions Namespaces For-loops Vectorization and functionals Exercises    You must turn in a PDF document of your R markdown code. Submit this to D2L by 11:59 PM on Sunday, September 12th.\nNOTE:\nAs you read through this assignment, practice with each of the examples (copy-paste them into an empty R script and run them). At the bottom of this page you will find the questions that comprise the assignment.","tags":null,"title":"Programming Basics in R","type":"docs"},{"authors":null,"categories":null,"content":"   Using ggplot2  How to use ggplot2 – the too-fast and wholly unclear recipe  Mappings Link Data to Things You See The Recipe  Mapping Aesthetics vs Setting them    NOTE\nYou must turn in a PDF document of your R markdown code. Submit this to D2L by 11:59 PM on Tuesday, September 14th.\n Our primary tool for data visualization in the course will be ggplot. Technically, we’re using ggplot2; the o.g. version lacked some of the modern features of its big brother. ggplot2 implements the grammar of graphics, a coherent and relatively straightforward system for describing and building graphs. With ggplot2, you can do more faster by learning one system and applying it in many places. Other languages provide more specific tools, but require you to learn a different tool for each application. In this class, we’ll dig into a single package for our visuals.\nUsing ggplot2 In order to get our hands dirty, we will first have to load ggplot2. To do this, and to access the datasets, help pages, and functions that we will use in this assignment, we will load the so-called tidyverse by running this code:\nlibrary(tidyverse) If you run this code and get an error message “there is no package called ‘tidyverse’”, you’ll need to first install it, then run library() once again. To install packages in R, we utilize the simple function install.packages(). In this case, we would write:\ninstall.packages(\u0026quot;tidyverse\u0026quot;) library(tidyverse) Once we’re up and running, we’re ready to dive into some basic exercises. ggplot2 works by specifying the connections between the variables in the data and the colors, points, and shapes you see on the screen. These logical connections are called aesthetic mappings or simply aesthetics.\nHow to use ggplot2 – the too-fast and wholly unclear recipe  data =: Define what your data is. For instance, below we’ll use the mpg data frame found in ggplot2 (by using ggplot2::mpg). As a reminder, a data frame is a rectangular collection of variables (in the columns) and observations (in the rows). This structure of data is often called a “table” but we’ll try to use terms slightly more precisely. The mpg data frame contains observations collected by the US Environmental Protection Agency on 38 different models of car.\n mapping = aes(...): How to map the variables in the data to aesthetics\n Axes, size of points, intensities of colors, which colors, shape of points, lines/points  Then say what type of plot you want:\n boxplot, scatterplot, histogram, … these are called ‘geoms’ in ggplot’s grammar, such as geom_point() giving scatter plots   library(ggplot2) ... + geom_point() # Produces scatterplots ... + geom_bar() # Bar plots .... + geom_boxplot() # boxplots ... # You link these steps by literally adding them together with + as we’ll see.\nTry it: What other types of plots are there? Try to find several more geom_ functions.\n  Mappings Link Data to Things You See library(gapminder) library(ggplot2) gapminder::gapminder ## # A tibble: 1,704 × 6 ## country continent year lifeExp pop gdpPercap ## \u0026lt;fct\u0026gt; \u0026lt;fct\u0026gt; \u0026lt;int\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;int\u0026gt; \u0026lt;dbl\u0026gt; ## 1 Afghanistan Asia 1952 28.8 8425333 779. ## 2 Afghanistan Asia 1957 30.3 9240934 821. ## 3 Afghanistan Asia 1962 32.0 10267083 853. ## 4 Afghanistan Asia 1967 34.0 11537966 836. ## 5 Afghanistan Asia 1972 36.1 13079460 740. ## 6 Afghanistan Asia 1977 38.4 14880372 786. ## 7 Afghanistan Asia 1982 39.9 12881816 978. ## 8 Afghanistan Asia 1987 40.8 13867957 852. ## 9 Afghanistan Asia 1992 41.7 16317921 649. ## 10 Afghanistan Asia 1997 41.8 22227415 635. ## # … with 1,694 more rows p \u0026lt;- ggplot(data = gapminder, mapping = aes(x = gdpPercap, y = lifeExp)) p + geom_point() Above we’ve loaded a different dataset and have started to explore a particular relationship. Before putting in this code yourself, try to intuit what might be going on.\nAny ideas?\nHere’s a breakdown of everything that happens after the p\u0026lt;- ggplot() call:\n data = gapminder tells ggplot to use gapminder dataset, so if variable names are mentioned, they should be looked up in gapminder mapping = aes(...) shows that the mapping is a function call. There is a deeper logic to this that I will disucss below, but it’s easiest to simply accept that this is how you write it. Put another way, the mapping = aes(...) argument links variables to things you will see on the plot. aes(x = gdpPercap, y = lifeExp) maps the GDP data onto x, which is a known aesthetic (the x-coordinate) and life expectancy data onto y  x and y are predefined names that are used by ggplot and friends   Exercise 1:\nLet’s return to the mpg data. Among the variables in mpg are:\n displ, a car’s engine size, in litres.\n hwy, a car’s fuel efficiency on the highway, in miles per gallon (mpg). A car with a low fuel efficiency consumes more fuel than a car with a high fuel efficiency when they travel the same distance.\n  Generate a scatterplot between these two variables. Does it capture the intuitive relationship you expected? What happens if you make a scatterplot of class vs drv? Why is the plot not useful?\n It turns out there’s a reason for doing all of this:\n “The greatest value of a picture is when it forces us to notice what we never expected to see.”” — John Tukey\n In the plot you made above, one group of points seems to fall outside of the linear trend. These cars have a higher mileage than you might expect. How can you explain these cars?\nLet’s hypothesize that the cars are hybrids. One way to test this hypothesis is to look at the class value for each car. The class variable of the mpg dataset classifies cars into groups such as compact, midsize, and SUV. If the outlying points are hybrids, they should be classified as compact cars or, perhaps, subcompact cars (keep in mind that this data was collected before hybrid trucks and SUVs became popular).\nYou can add a third variable, like class, to a two dimensional scatterplot by mapping it to an aesthetic. An aesthetic is a visual property of the objects in your plot. Aesthetics include things like the size, the shape, or the color of your points. You can display a point (like the one below) in different ways by changing the values of its aesthetic properties. Since we already use the word “value” to describe data, let’s use the word “level” to describe aesthetic properties. Thus, we are interested in exploring class as a level.\nYou can convey information about your data by mapping the aesthetics in your plot to the variables in your dataset. For example, you can map the colors of your points to the class variable to reveal the class of each car. To map an aesthetic to a variable, associate the name of the aesthetic to the name of the variable inside aes(). ggplot2 will automatically assign a unique level of the aesthetic (here a unique color) to each unique value of the variable, a process known as scaling. ggplot2 will also add a legend that explains which levels correspond to which values.\nExercise 2:\nUsing your previous scatterplot of displ and hwy, map the colors of your points to the class variable to reveal the class of each car. What conclusions can we make?\n Let’s explore our previously saved p in greater detail. As with Exercise 1, we’ll add a layer. This says how some data gets turned into concrete visual aspects.\np + geom_point() p + geom_smooth() Note: Both of the above geom’s use the same mapping, where the x-axis represents gdpPercap and the y-axis represents lifeExp. You can find this yourself with some ease. But the first one maps the data to individual points, the other one maps it to a smooth line with error ranges.\nWe get a message that tells us that geom_smooth() is using the method = ‘gam’, so presumably we can use other methods. Let’s see if we can figure out which other methods there are.\n?geom_smooth p + geom_point() + geom_smooth() + geom_smooth(method = ...) + geom_smooth(method = ...) p + geom_point() + geom_smooth() + geom_smooth(method = ...) + geom_smooth(method = ..., color = \u0026quot;red\u0026quot;) You may start to see why ggplot2’s way of breaking up tasks is quite powerful: the geometric objects can all reuse the same mapping of data to aesthetics, yet the results are quite different. And if we want later geoms to use different mappings, then we can override them – but it isn’t necessary.\nConsider the output we’ve explored thus far. One potential issue lurking in the data is that most of it is bunched to the left. If we instead used a logarithmic scale, we should be able to spread the data out better.\np + geom_point() + geom_smooth(method = \u0026quot;lm\u0026quot;) + scale_x_log10() Try it: Describe what the scale_x_log10() does. Why is it a more evenly distributed cloud of points now? (2-3 sentences.)\nNice. We’re starting to get somewhere. But, you might notice that the x-axis now has scientific notation. Let’s change that.\nlibrary(scales) p + geom_point() + geom_smooth(method = \u0026quot;lm\u0026quot;) + scale_x_log10(labels = scales::dollar) p + geom_point() + geom_smooth(method = \u0026quot;lm\u0026quot;) + scale_x_log10(labels = scales::...) Try it: What does the dollar() call do? How can you find other ways of relabeling the scales when using scale_x_log10()?\n?dollar()  The Recipe Tell the ggplot() function what our data is. Tell ggplot() what relationships we want to see. For convenience we will put the results of the first two steps in an object called p. Tell ggplot how we want to see the relationships in our data. Layer on geoms as needed, by adding them on the p object one at a time. Use some additional functions to adjust scales, labels, tickmarks, titles.   e.g. scale_, labs(), and guides() functions  As you start to run more R code, you’re likely to run into problems. Don’t worry — it happens to everyone. I have been writing code in numerous languages for years, and every day I still write code that doesn’t work. Sadly, R is particularly persnickity, and its error messages are often opaque.\nStart by carefully comparing the code that you’re running to the code in these notes. R is extremely picky, and a misplaced character can make all the difference. Make sure that every ( is matched with a ) and every ” is paired with another “. Sometimes you’ll run the code and nothing happens. Check the left-hand of your console: if it’s a +, it means that R doesn’t think you’ve typed a complete expression and it’s waiting for you to finish it. In this case, it’s usually easy to start from scratch again by pressing ESCAPE to abort processing the current command.\nOne common problem when creating ggplot2 graphics is to put the + in the wrong place: it has to come at the end of the line, not the start.\nMapping Aesthetics vs Setting them p \u0026lt;- ggplot(data = gapminder, mapping = aes(x = gdpPercap, y = lifeExp, color = \u0026#39;yellow\u0026#39;)) p + geom_point() + scale_x_log10() This is interesting (or annoying): the points are not yellow. How can we tell ggplot to draw yellow points?\np \u0026lt;- ggplot(data = gapminder, mapping = aes(x = gdpPercap, y = lifeExp, ...)) p + geom_point(...) + scale_x_log10() Try it: describe in your words what is going on. One way to avoid such mistakes is to read arguments inside aes(\u0026lt;property\u0026gt; = \u0026lt;variable\u0026gt;)as the property  in the graph is determined by the data in .\nTry it: Write the above sentence for the original call aes(x = gdpPercap, y = lifeExp, color = 'yellow').\nAesthetics convey information about a variable in the dataset, whereas setting the color of all points to yellow conveys no information about the dataset - it changes the appearance of the plot in a way that is independent of the underlying data.\nRemember: color = 'yellow' and aes(color = 'yellow') are very different, and the second makes usually no sense, as 'yellow' is treated as data.\np \u0026lt;- ggplot(data = gapminder, mapping = aes(x = gdpPercap, y = lifeExp)) p + geom_point() + geom_smooth(color = \u0026quot;orange\u0026quot;, se = FALSE, size = 8, method = \u0026quot;lm\u0026quot;) + scale_x_log10() Try it: Write down what all those arguments in geom_smooth(...) do.\np + geom_point(alpha = 0.3) + geom_smooth(method = \u0026quot;gam\u0026quot;) + scale_x_log10(labels = scales::dollar) + labs(x = \u0026quot;GDP Per Capita\u0026quot;, y = \u0026quot;Life Expectancy in Years\u0026quot;, title = \u0026quot;Economic Growth and Life Expectancy\u0026quot;, subtitle = \u0026quot;Data Points are country-years\u0026quot;, caption = \u0026quot;Source: Gapminder\u0026quot;) Coloring by continent:\nlibrary(scales) p \u0026lt;- ggplot(data = gapminder, mapping = aes(x = gdpPercap, y = lifeExp, color = continent, fill = continent)) p + geom_point() p + geom_point() + scale_x_log10(labels = dollar) p + geom_point() + scale_x_log10(labels = dollar) + geom_smooth() Try it: What does fill = continent do? What do you think about the match of colors between lines and error bands?\np \u0026lt;- ggplot(data = gapminder, mapping = aes(x = gdpPercap, y = lifeExp)) p + geom_point(mapping = aes(color = continent)) + geom_smooth() + scale_x_log10() Try it: Notice how the above code leads to a single smooth line, not one per continent. Why?\nTry it: What is bad about the following example, assuming the graph is the one we want? Think about why you should set aesthetics at the top level rather than at the individual geometry level if that’s your intent.\np \u0026lt;- ggplot(data = gapminder, mapping = aes(x = gdpPercap, y = lifeExp)) p + geom_point(mapping = aes(color = continent)) + geom_smooth(mapping = aes(color = continent, fill = continent)) + scale_x_log10() + geom_smooth(mapping = aes(color = continent), method = \u0026quot;gam\u0026quot;) Exercise 3:\nGenerate two new plots with data = gapminder (note: you’ll need to install the package by the same name if you have not already). Label the axes and the header with clear, easy to understand language. In a few sentences, describe what you’ve visualized and why.\nNote that this is your first foray into ggplot2; accordingly, you should ry to make sure that you do not bite off more than you can chew. We will improve and refine our abilities as we progress through the semester.\n   ","date":1630972800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1631031640,"objectID":"b6a0ce80cabafe6d7d9f272294abfa85","permalink":"https://ssc442.netlify.app/assignment/02-assignment/","publishdate":"2021-09-07T00:00:00Z","relpermalink":"/assignment/02-assignment/","section":"assignment","summary":"Using ggplot2  How to use ggplot2 – the too-fast and wholly unclear recipe  Mappings Link Data to Things You See The Recipe  Mapping Aesthetics vs Setting them    NOTE\nYou must turn in a PDF document of your R markdown code. Submit this to D2L by 11:59 PM on Tuesday, September 14th.\n Our primary tool for data visualization in the course will be ggplot.","tags":null,"title":"Basics of ggplot","type":"docs"},{"authors":null,"categories":null,"content":"   Install R Install RStudio Install tidyverse Install tinytex   As mentioned in the syllabus, you will do all of your work in this class with the open source programming language R. You will use RStudio as the main program to access R. Think of R as an engine and RStudio as a car dashboard—–R handles all the calculations and the actual statistics, while RStudio provides a nice interface for running R code.\nHopefully you’re well-versed in dealing with these things, but if you’re lost, here’s how you install the required software for the course.\nInstall R First you need to install R itself (the engine).\nGo to the CRAN (Collective R Archive Network)1 website: https://cran.r-project.org/\n Click on “Download R for XXX”, where XXX is either Mac or Windows:\n If you use macOS, scroll down to the first .pkg file in the list of files (in this picture, it’s R-4.0.0.pkg; as of right now, the current version is also 4.0.0) and download it.\n If you use Windows, click “base” (or click on the bolded “install R for the first time” link) and download it.\n  Double click on the downloaded file (check your Downloads folder). Click yes through all the prompts to install like any other program.\n If you use macOS, download and install XQuartz. You do not need to do this on Windows.\n   Install RStudio Next, you need to install RStudio, the nicer graphical user interface (GUI) for R (the dashboard). Once R and RStudio are both installed, you can ignore R and only use RStudio. RStudio will use R automatically and you won’t ever have to interact with it directly.\nGo to the free download location on RStudio’s website: https://www.rstudio.com/products/rstudio/download/#download\n The website should automatically detect your operating system (macOS or Windows) and show a big download button for it:\nIf not, scroll down a little to the large table and choose the version of RStudio that matches your operating system.\n Double click on the downloaded file (again, check your Downloads folder). Click yes through all the prompts to install like any other program.\n  Double click on RStudio to run it (check your applications folder or start menu).\n Install tidyverse R packages are easy to install with RStudio. Select the packages panel, click on “Install,” type the name of the package you want to install, and press enter.\nThis can sometimes be tedious when you’re installing lots of packages, though. The tidyverse, for instance, consists of dozens of packages (including the ever-present ggplot2) that all work together. Rather than install each individually, you can install a single magical package and get them all at the same time.\nGo to the packages panel in RStudio, click on “Install,” type “tidyverse”, and press enter. You’ll see a bunch of output in the RStudio console as all the tidyverse packages are installed.\nNotice also that RStudio will generate a line of code for you and run it: install.packages(\"tidyverse\"). You can also just paste and run this instead of using the packages panel. Hopefully you’ve experienced installing packages before now; if not, consider this a crash course!\n Install tinytex When you knit to PDF, R uses a special scientific typesetting program named LaTeX.2\nLaTeX is neat and makes pretty documents, but it’s a huge program—the macOS version, for instance, is nearly 4 GB. To make life easier, there’s an R package named tinytex that installs a minimal LaTeX program and that automatically deals with differences between macOS and Windows.\nHere’s how to install tinytex so you can knit to pretty PDFs:\nUse the Packages in panel in RStudio to install tinytex like you did above with tidyverse. Alternatively, run install.packages(\"tinytex\") in the console. Run tinytex::install_tinytex() in the console. Wait for a bit while R downloads and installs everything you need. The end! You should now be able to knit to PDF.    It’s a goofy name, but CRAN is where most R packages—and R itself—lives.↩︎\n Pronounced “lay-tek” for those who are correct; or “lah-tex” to those who love goofy nerdy pronunciation. Technically speaking, the x is the “ch” sound in “Bach”, but most people just say it as “k”. While either saying “lay” or “lah” is correct, “layteks” is frowned upon because it clearly shows you’re not cool.↩︎\n   ","date":1588291200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1629136382,"objectID":"efb59c0882a965443ffcbafa3cd27ca6","permalink":"https://ssc442.netlify.app/resource/install/","publishdate":"2020-05-01T00:00:00Z","relpermalink":"/resource/install/","section":"resource","summary":"Install R Install RStudio Install tidyverse Install tinytex   As mentioned in the syllabus, you will do all of your work in this class with the open source programming language R. You will use RStudio as the main program to access R. Think of R as an engine and RStudio as a car dashboard—–R handles all the calculations and the actual statistics, while RStudio provides a nice interface for running R code.","tags":null,"title":"Installing R, RStudio, tidyverse, and tinytex","type":"docs"},{"authors":null,"categories":null,"content":"   Introduction to Examples  Getting started with R and RStudio The R console Scripts RStudio  The panes Key bindings Running commands while editing scripts  Installing R packages Rmarkdown    Introduction to Examples Examples in this class are designed to be presented in-class. Accordingly, the notes here are not comprehensive. Instead, they are intended to guide students through\nI’m also aware that my writing is dry and lifeless. If you’re reading this online without the advantage of seeing it in person, don’t worry—I’ll be “funnier” in class.1\nGetting started with R and RStudio R is not a programming language like C or Java. It was not created by software engineers for software development. Instead, it was developed by statisticians as an interactive environment for data analysis. You can read the full history in the paper A Brief History of S2. The interactivity is an indispensable feature in data science because, as you will soon learn, the ability to quickly explore data is a necessity for success in this field. However, like in other programming languages, you can save your work as scripts that can be easily executed at any moment. These scripts serve as a record of the analysis you performed, a key feature that facilitates reproducible work. If you are an expert programmer, you should not expect R to follow the conventions you are used—assuming this will leave you disappointed. If you are patient, you will come to appreciate the unequal power of R when it comes to data analysis and data visualization.\nOther attractive features of R are:\nR is free and open source3. It runs on all major platforms: Windows, Mac OS, UNIX/Linux. Scripts and data objects can be shared seamlessly across platforms. There is a large, growing, and active community of R users and, as a result, there are numerous resources for learning and asking questions4 5 6. It is easy for others to contribute add-ons which enables developers to share software implementations of new data science methodologies. The latest methods and tools are developed in R for a wide variety of disciplines and since social science is so broad, R is one of the few tools that spans the varied social sciences.   The R console Interactive data analysis usually occurs on the R console that executes commands as you type them. There are several ways to gain access to an R console. One way is to simply start R on your computer. The console looks something like this:\nAs a quick example, try using the console to calculate a 15% tip on a meal that cost $19.71:7\n0.15 * 19.71 ## [1] 2.9565 Note that in this course (at least, on most browsers), grey boxes are used to show R code typed into the R console. The symbol ## is used to denote what the R console outputs.\n Scripts One of the great advantages of R over point-and-click analysis software is that you can save your work as scripts. You can edit and save these scripts using a text editor. The material in this course was developed using the interactive integrated development environment (IDE) RStudio8. RStudio includes an editor with many R specific features, a console to execute your code, and other useful panes, including one to show figures.\nMost web-based R consoles also provide a pane to edit scripts, but not all permit you to save the scripts for later use. On the upper-right part of this webpage you’ll see a little button with the R logo. You can access a web-based console there.\n RStudio RStudio will be our launching pad for data science projects. It not only provides an editor for us to create and edit our scripts but also provides many other useful tools. In this section, we go over some of the basics.\nThe panes When you start RStudio for the first time, you will see three panes. The left pane shows the R console. On the right, the top pane includes tabs such as Environment and History, while the bottom pane shows five tabs: File, Plots, Packages, Help, and Viewer (these tabs may change in new versions). You can click on each tab to move across the different features.\nTo start a new script, you can click on File, then New File, then R Script.\nThis starts a new pane on the left and it is here where you can start writing your script.\n Key bindings Many tasks we perform with the mouse can be achieved with a combination of key strokes instead. These keyboard versions for performing tasks are referred to as key bindings. For example, we just showed how to use the mouse to start a new script, but you can also use a key binding: Ctrl+Shift+N on Windows and command+shift+N on the Mac.\nAlthough in this tutorial we often show how to use the mouse, we highly recommend that you memorize key bindings for the operations you use most. RStudio provides a useful cheat sheet with the most widely used commands. You might want to keep this handy so you can look up key-bindings when you find yourself performing repetitive point-and-clicking.\n Running commands while editing scripts There are many editors specifically made for coding. These are useful because color and indentation are automatically added to make code more readable. RStudio is one of these editors, and it was specifically developed for R. One of the main advantages provided by RStudio over other editors is that we can test our code easily as we edit our scripts. Below we show an example.\nLet’s start by opening a new script as we did before. A next step is to give the script a name. We can do this through the editor by saving the current new unnamed script. To do this, click on the save icon or use the key binding Ctrl+S on Windows and command+S on the Mac.\nWhen you ask for the document to be saved for the first time, RStudio will prompt you for a name. A good convention is to use a descriptive name, with lower case letters, no spaces, only hyphens to separate words, and then followed by the suffix .R. We will call this script my-first-script.R.\nNow we are ready to start editing our first script. The first lines of code in an R script are dedicated to loading the libraries we will use. Another useful RStudio feature is that once we type library() it starts auto-completing with libraries that we have installed. Note what happens when we type library(ti):\nAnother feature you may have noticed is that when you type library( the second parenthesis is automatically added. This will help you avoid one of the most common errors in coding: forgetting to close a parenthesis.\nNow we can continue to write code. As an example, we will make a graph showing murder totals versus population totals by state. Once you are done writing the code needed to make this plot, you can try it out by executing the code. To do this, click on the Run button on the upper right side of the editing pane. You can also use the key binding: Ctrl+Shift+Enter on Windows or command+shift+return on the Mac.\nOnce you run the code, you will see it appear in the R console and, in this case, the generated plot appears in the plots console. Note that the plot console has a useful interface that permits you to click back and forward across different plots, zoom in to the plot, or save the plots as files.\nTo run one line at a time instead of the entire script, you can use Control-Enter on Windows and command-return on the Mac.\nSETUP TIP\nChange the option Save workspace to .RData on exit to Never and uncheck the Restore .RData into workspace at start. By default, when you exit R saves all the objects you have created into a file called .RData. This is done so that when you restart the session in the same folder, it will load these objects. I find that this causes confusion especially when sharing code with colleagues or peers.\n   Installing R packages The functionality provided by a fresh install of R is only a small fraction of what is possible. In fact, we refer to what you get after your first install as base R. The extra functionality comes from add-ons available from developers. There are currently hundreds of these available from CRAN and many others shared via other repositories such as GitHub. However, because not everybody needs all available functionality, R instead makes different components available via packages. R makes it very easy to install packages from within R. For example, to install the dslabs package, which we use to share datasets and code related to this book, you would type:\ninstall.packages(\u0026quot;dslabs\u0026quot;) In RStudio, you can navigate to the Tools tab and select install packages. We can then load the package into our R sessions using the library function:\nlibrary(dslabs) ## ## Attaching package: \u0026#39;dslabs\u0026#39; ## The following object is masked from \u0026#39;package:gapminder\u0026#39;: ## ## gapminder As you go through this book, you will see that we load packages without installing them. This is because once you install a package, it remains installed and only needs to be loaded with library. The package remains loaded until we quit the R session. If you try to load a package and get an error, it probably means you need to install it first.\nWe can install more than one package at once by feeding a character vector to this function:\ninstall.packages(c(\u0026quot;tidyverse\u0026quot;, \u0026quot;dslabs\u0026quot;)) One advantage of using RStudio is that it auto-completes package names once you start typing, which is helpful when you do not remember the exact spelling of the package. Once you select your package, we recommend selecting all the defaults. Note that installing tidyverse actually installs several packages. This commonly occurs when a package has dependencies, or uses functions from other packages. When you load a package using library, you also load its dependencies.\nOnce packages are installed, you can load them into R and you do not need to install them again, unless you install a fresh version of R. Remember packages are installed in R not RStudio.\nIt is helpful to keep a list of all the packages you need for your work in a script because if you need to perform a fresh install of R, you can re-install all your packages by simply running a script.\nYou can see all the packages you have installed using the following function:\ninstalled.packages() As we move through this course, we will constantly be adding to our toolbox of packages. Accordingly, you will need to keep track to ensure you have the requisite package for any given lecture.\n Rmarkdown Markdown is a general-purpose syntax for laying out documents. Rmarkdown is a combination of R and markdown, as the name implies. When using markdown, one can define headers and tables using specific notation, and depending on the rendering engine, the headers and tables (and a whole lot more) are customized. In fact, this whole website is built in R using Rmarkdown (and a lot of add-ons like Hugo and blogdown). In other contexts, the rendering engine may recognize that your headers are likely to be entries in a table of contents, and does so for you. The table of contents at the top of this document is built from the markdown headers.\nThe power of Rmarkdown is that it lets us mix formatted text with R code. That is, you can have a section of the document that understands R code, and a separate section right after that discusses the results from the R code.\nTry it out using the Weekly Writing Template. If it opens in your web browser, just right-click the link and select Save As…. Make sure you save the file to its own folder on your hard drive. In converting your Rmarkdown .Rmd file to a .pdf, your system will make multiple interim files9. It also creates folders to store the output of any plots or graphics you create with your R code.\nIf we have time today, let’s open the template linked above and see what happens when we select “knit to pdf”.\n   Comments from previous classes indicate that I am not, in fact, funny.↩︎\n https://pdfs.semanticscholar.org/9b48/46f192aa37ca122cfabb1ed1b59866d8bfda.pdf↩︎\n https://opensource.org/history↩︎\n https://stats.stackexchange.com/questions/138/free-resources-for-learning-r↩︎\n https://www.r-project.org/help.html↩︎\n https://stackoverflow.com/documentation/r/topics↩︎\n But probably tip more than 15%. Times are tough, man.↩︎\n https://www.rstudio.com/↩︎\n Specifically, knitr will create an intermediate .md file which is then processed with Pandoc using Latex to create a pdf. Whew!↩︎\n   ","date":1578614400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1632838512,"objectID":"059bb398e999a9d10b388c3df2b5644f","permalink":"https://ssc442.netlify.app/example/01-example/","publishdate":"2021-09-07T00:00:00Z","relpermalink":"/example/01-example/","section":"example","summary":"Introduction to Examples  Getting started with R and RStudio The R console Scripts RStudio  The panes Key bindings Running commands while editing scripts  Installing R packages Rmarkdown    Introduction to Examples Examples in this class are designed to be presented in-class. Accordingly, the notes here are not comprehensive. Instead, they are intended to guide students through\nI’m also aware that my writing is dry and lifeless.","tags":null,"title":"Working with R and RStudio","type":"docs"},{"authors":null,"categories":null,"content":"   Accessibility Colors Fonts Graphic assets  Images Vectors Vectors, photos, videos, and other assets    Accessibility  Vischeck: Simulate how your images look for people with different forms of colorblindness (web-based) Color Oracle: Simulate how your images look for people with different forms of colorblindness (desktop-based, more types of colorblindness)   Colors  Adobe Color: Create, share, and explore rule-based and custom color palettes. ColourLovers: Like Facebook for color palettes. viridis: Percetually uniform color scales. Scientific Colour-Maps: Perceptually uniform color scales like viridis. Use them in R with scico. ColorBrewer: Sequential, diverging, and qualitative color palettes that take accessibility into account. Colorgorical: Create color palettes based on fancy mathematical rules for perceptual distance. Colorpicker for data: More fancy mathematical rules for color palettes (explanation). iWantHue: Yet another perceptual distance-based color palette builder. Photochrome: Word-based color pallettes. PolicyViz Design Color Tools: Large collection of useful color resources   Fonts  Google Fonts: Huge collection of free, well-made fonts. The Ultimate Collection of Google Font Pairings: A list of great, well-designed font pairings from all those fonts hosted by Google (for when you’re looking for good contrasting or complementary fonts).   Graphic assets Images  Use the Creative Commons filters on Google Images or Flickr Unsplash Pexels Pixabay StockSnap.io Burst freephotos.cc   Vectors  Noun Project: Thousands of free simple vector images aiconica: 1,000+ vector icons Vecteezy: Thousands of free vector images   Vectors, photos, videos, and other assets  Stockio    ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1627916210,"objectID":"16fd04c4714e3d096bffcf19e6c524ca","permalink":"https://ssc442.netlify.app/resource/design/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/resource/design/","section":"resource","summary":"Accessibility Colors Fonts Graphic assets  Images Vectors Vectors, photos, videos, and other assets    Accessibility  Vischeck: Simulate how your images look for people with different forms of colorblindness (web-based) Color Oracle: Simulate how your images look for people with different forms of colorblindness (desktop-based, more types of colorblindness)   Colors  Adobe Color: Create, share, and explore rule-based and custom color palettes. ColourLovers: Like Facebook for color palettes.","tags":null,"title":"Design","type":"docs"},{"authors":null,"categories":null,"content":"   Basic Markdown formatting Math Tables Footnotes Front matter Citations Other references   Markdown is a special kind of markup language that lets you format text with simple syntax. You can then use a converter program like pandoc to convert Markdown into whatever format you want: HTML, PDF, Word, PowerPoint, etc. (see the full list of output types here)\nBasic Markdown formatting     Type… …or… …to get    Some text in a paragraph. More text in the next paragraph. Always use empty lines between paragraphs.  Some text in a paragraph.\nMore text in the next paragraph. Always use empty lines between paragraphs.\n  *Italic* _Italic_ Italic  **Bold** __Bold__ Bold  # Heading 1  Heading 1   ## Heading 2  Heading 2   ### Heading 3  Heading 3   (Go up to heading level 6 with ######)    [Link text](http://www.example.com)  Link text  ![Image caption](/path/to/image.png)    `Inline code` with backticks  Inline code with backticks  \u0026gt; Blockquote   Blockquote\n  - Things in - an unordered - list * Things in * an unordered * list  Things in an unordered list   1. Things in 2. an ordered 3. list 1) Things in 2) an ordered 3) list Things in an ordered list   Horizontal line --- Horizontal line *** Horizontal line\n     Math Markdown uses LaTeX to create fancy mathematical equations. There are like a billion little options and features available for math equations—you can find helpful examples of the the most common basic commands here.\nYou can use math in two different ways: inline or in a display block. To use math inline, wrap it in single dollar signs, like $y = mx + b$:\n    Type… …to get    Based on the DAG, the regression model for estimating the effect of education on wages is $\\hat{y} = \\beta_0 + \\beta_1 x_1 + \\epsilon$, or $\\text{Wages} = \\beta_0 + \\beta_1 \\text{Education} + \\epsilon$. Based on the DAG, the regression model for estimating the effect of education on wages is \\(\\hat{y} = \\beta_0 + \\beta_1 x_1 + \\epsilon\\), or \\(\\text{Wages} = \\beta_0 + \\beta_1 \\text{Education} + \\epsilon\\).    To put an equation on its own line in a display block, wrap it in double dollar signs, like this:\nType…\nThe quadratic equation was an important part of high school math: $$ x = \\frac{-b \\pm \\sqrt{b^2 - 4ac}}{2a} $$ But now we just use computers to solve for $x$. …to get…\n The quadratic equation was an important part of high school math:\n\\[ x = \\frac{-b \\pm \\sqrt{b^2 - 4ac}}{2a} \\]\nBut now we just use computers to solve for \\(x\\).\n Because dollar signs are used to indicate math equations, you can’t just use dollar signs like normal if you’re writing about actual dollars. For instance, if you write This book costs $5.75 and this other costs $40, Markdown will treat everything that comes between the dollar signs as math, like so: “This book costs $5.75 and this other costs $40”.\nTo get around that, put a backslash (\\) in front of the dollar signs, so that This book costs \\$5.75 and this other costs \\$40 becomes “This book costs $5.75 and this other costs $40”.\n Tables There are 4 different ways to hand-create tables in Markdown—I say “hand-create” because it’s normally way easier to use R to generate these things with packages like pander (use pandoc.table()) or knitr (use kable()). The two most common are simple tables and pipe tables. You should look at the full documentation here.\nFor simple tables, type…\n Right Left Center Default ------- ------ ---------- ------- 12 12 12 12 123 123 123 123 1 1 1 1 Table: Caption goes here …to get…\n Caption goes here  Right Left Center Default    12 12 12 12  123 123 123 123  1 1 1 1    For pipe tables, type…\n| Right | Left | Default | Center | |------:|:-----|---------|:------:| | 12 | 12 | 12 | 12 | | 123 | 123 | 123 | 123 | | 1 | 1 | 1 | 1 | Table: Caption goes here …to get…\n Caption goes here  Right Left Default Center    12 12 12 12  123 123 123 123  1 1 1 1     Footnotes There are two different ways to add footnotes (see here for complete documentation): regular and inline.\nRegular notes need (1) an identifier and (2) the actual note. The identifier can be whatever you want. Some people like to use numbers like [^1], but if you ever rearrange paragraphs or add notes before #1, the numbering will be wrong (in your Markdown file, not in the output; everything will be correct in the output). Because of that, I prefer to use some sort of text label:\nType…\nHere is a footnote reference[^1] and here is another [^note-on-dags]. [^1]: This is a note. [^note-on-dags]: DAGs are neat. And here\u0026#39;s more of the document. …to get…\n Here is a footnote reference1 and here is another.2\nAnd here’s more of the document.\n  This is a note.↩︎   DAGs are neat.↩︎     You can also use inline footnotes with ^[Text of the note goes here], which are often easier because you don’t need to worry about identifiers:\nType…\nCausal inference is neat.^[But it can be hard too!] …to get…\n Causal inference is neat.1\n  But it can be hard too!↩︎      Front matter You can include a special section at the top of a Markdown document that contains metadata (or data about your document) like the title, date, author, etc. This section uses a special simple syntax named YAML (or “YAML Ain’t Markup Language”) that follows this basic outline: setting: value for setting. Here’s an example YAML metadata section. Note that it must start and end with three dashes (---).\n--- title: Title of your document date: \u0026quot;January 13, 2020\u0026quot; author: \u0026quot;Your name\u0026quot; --- You can put the values inside quotes (like the date and name in the example above), or you can leave them outside of quotes (like the title in the example above). I typically use quotes just to be safe—if the value you’re using has a colon (:) in it, it’ll confuse Markdown since it’ll be something like title: My cool title: a subtitle, which has two colons. It’s better to do this:\n--- title: \u0026quot;My cool title: a subtitle\u0026quot; --- If you want to use quotes inside one of the values (e.g. your document is An evaluation of \"scare quotes\"), you can use single quotes instead:\n--- title: \u0026#39;An evaluation of \u0026quot;scare quotes\u0026quot;\u0026#39; ---  Citations One of the most powerful features of Markdown + pandoc is the ability to automatically cite things and generate bibliographies. to use citations, you need to create a BibTeX file (ends in .bib) that contains a database of the things you want to cite. You can do this with bibliography managers designed to work with BibTeX directly (like BibDesk on macOS), or you can use Zotero (macOS and Windows) to export a .bib file. You can download an example .bib file of all the readings from this class here.\nComplete details for using citations can be found here. In brief, you need to do three things:\nAdd a bibliography: entry to the YAML metadata:\n--- title: Title of your document date: \u0026quot;January 13, 2020\u0026quot; author: \u0026quot;Your name\u0026quot; bibliography: name_of_file.bib --- Choose a citation style based on a CSL file. The default is Chicago author-date, but you can choose from 2,000+ at this repository. Download the CSL file, put it in your project folder, and add an entry to the YAML metadata (or provide a URL to the online version):\n--- title: Title of your document date: \u0026quot;January 13, 2020\u0026quot; author: \u0026quot;Your name\u0026quot; bibliography: name_of_file.bib csl: \u0026quot;https://raw.githubusercontent.com/citation-style-language/styles/master/apa.csl\u0026quot; --- Some of the most common CSLs are:\n Chicago author-date Chicago note-bibliography Chicago full note-bibliography (no shortened notes or ibids) APA 7th edition MLA 8th edition  Cite things in your document. Check the documentation for full details of how to do this. Essentially, you use @citationkey inside square brackets ([]):\n    Type… …to get…    Causal inference is neat [@Rohrer:2018; @AngristPischke:2015]. Causal inference is neat (Rohrer 2018; Angrist and Pischke 2015).  Causal inference is neat [see @Rohrer:2018, p. 34; also @AngristPischke:2015, chapter 1]. Causal inference is neat (see Rohrer 2018, 34; also Angrist and Pischke 2015, chap. 1).  Angrist and Pischke say causal inference is neat [-@AngristPischke:2015; see also @Rohrer:2018]. Angrist and Pischke say causal inference is neat (2015; see also Rohrer 2018).  @AngristPischke:2015 [chapter 1] say causal inference is neat, and @Rohrer:2018 agrees. Angrist and Pischke (2015, chap. 1) say causal inference is neat, and Rohrer (2018) agrees.    After compiling, you should have a perfectly formatted bibliography added to the end of your document too:\n Angrist, Joshua D., and Jörn-Steffen Pischke. 2015. Mastering ’Metrics: The Path from Cause to Effect. Princeton, NJ: Princeton University Press.\nRohrer, Julia M. 2018. “Thinking Clearly About Correlations and Causation: Graphical Causal Models for Observational Data.” Advances in Methods and Practices in Psychological Science 1 (1): 27–42. https://doi.org/10.1177/2515245917745629.\n   Other references These websites have additional details and examples and practice tools:\n CommonMark’s Markdown tutorial: A quick interactive Markdown tutorial. Markdown tutorial: Another interactive tutorial to practice using Markdown. Markdown cheatsheet: Useful one-page reminder of Markdown syntax. The Plain Person’s Guide to Plain Text Social Science: A comprehensive explanation and tutorial about why you should write data-based reports in Markdown.   ","date":1578873600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1629136382,"objectID":"dcf6a5ae191a1cca4f4c8ff8ac114538","permalink":"https://ssc442.netlify.app/resource/markdown/","publishdate":"2020-01-13T00:00:00Z","relpermalink":"/resource/markdown/","section":"resource","summary":"Basic Markdown formatting Math Tables Footnotes Front matter Citations Other references   Markdown is a special kind of markup language that lets you format text with simple syntax. You can then use a converter program like pandoc to convert Markdown into whatever format you want: HTML, PDF, Word, PowerPoint, etc. (see the full list of output types here)\nBasic Markdown formatting     Type… …or… …to get    Some text in a paragraph.","tags":null,"title":"Using Markdown","type":"docs"},{"authors":null,"categories":null,"content":"   Interesting and excellent real world examples How to select the appropriate chart type General resources Visualization in Excel Visualization in Tableau   Interesting and excellent real world examples  The Stories Behind a Line Australia as 100 people: You can make something like this with d3 and the potato project. Marrying Later, Staying Single Longer   How to select the appropriate chart type Many people have created many useful tools for selecting the correct chart type for a given dataset or question. Here are some of the best:\n The Data Visualisation Catalogue: Descriptions, explanations, examples, and tools for creating 60 different types of visualizations. The Data Viz Project: Descriptions and examples for 150 different types of visualizations. Also allows you to search by data shape and chart function (comparison, correlation, distribution, geographical, part to whole, trend over time, etc.). From Data to Viz: A decision tree for dozens of chart types with links to R and Python code. The Chartmaker Directory: Examples of how to create 51 different types of visualizations in 31 different software packages, including Excel, Tableau, and R. R Graph Catalog: R code for 124 ggplot graphs. Emery’s Essentials: Descriptions and examples of 26 different chart types.   General resources  Storytelling with Data: Blog and site full of resources by Cole Nussbaumer Knaflic. Ann K. Emery’s blog: Blog and tutorials by Ann Emery. Evergreen Data: Helful resources by Stephanie Evergreen. PolicyViz: Regular podcast and site full of helpful resources by Jon Schwabisch. Visualising Data: Fantastic collection of visualization resources, articles, and tutorials by Andy Kirk. Info We Trust: Detailed explorations of visualizations by RJ Andrews, including a beautiful visual history of the field. FlowingData: Blog by Nathan Yau. Information is Beautiful: Blog by David McCandless. Junk Charts: Blog by Kaiser Fung. WTF Visualizations: Visualizations that make you ask “wtf?” The Data Visualization Checklist: A helpful set of criteria for grading the effectiveness of a graphic. Data Literacy Starter Kit: Compilation of resources to become data literate by Laura Calloway. Seeing Data: A series of research projects about perceptions and visualizations.   Visualization in Excel  How to Build Data Visualizations in Excel: Detailed tutorials for creating 14 different visualizations in Excel. Ann Emery’s tutorials: Fantastic series of tutorials for creating charts in Excel.   Visualization in Tableau Because it is focused entirely on visualization (and because it’s a well-supported commercial product), Tableau has a phenomenal library of tutorials and training videos. There’s a helpful collections of videos here, as well.\n ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1627916210,"objectID":"ca403ba352e0871f06b445d2470037b3","permalink":"https://ssc442.netlify.app/resource/visualization/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/resource/visualization/","section":"resource","summary":"Interesting and excellent real world examples How to select the appropriate chart type General resources Visualization in Excel Visualization in Tableau   Interesting and excellent real world examples  The Stories Behind a Line Australia as 100 people: You can make something like this with d3 and the potato project. Marrying Later, Staying Single Longer   How to select the appropriate chart type Many people have created many useful tools for selecting the correct chart type for a given dataset or question.","tags":null,"title":"Visualization","type":"docs"},{"authors":null,"categories":null,"content":"   Key terms Add chunks Chunk names Chunk options Inline chunks Output formats   R Markdown is regular Markdown with R code and output sprinkled in. You can do everything you can with regular Markdown, but you can incorporate graphs, tables, and other R output directly in your document. You can create HTML, PDF, and Word documents, PowerPoint and HTML presentations, websites, books, and even interactive dashboards with R Markdown. This whole course website is created with R Markdown (and a package named blogdown).\nThe documentation for R Markdown is extremely comprehensive, and their tutorials and cheatsheets are excellent—rely on those.\nHere are the most important things you’ll need to know about R Markdown in this class:\nKey terms  Document: A Markdown file where you type stuff\n Chunk: A piece of R code that is included in your document. It looks like this:\n```{r} # Code goes here ``` There must be an empty line before and after the chunk. The final three backticks must be the only thing on the line—if you add more text, or if you forget to add the backticks, or accidentally delete the backticks, your document will not knit correctly.\n Knit: When you “knit” a document, R runs each of the chunks sequentially and converts the output of each chunk into Markdown. R then runs the knitted document through pandoc to convert it to HTML or PDF or Word (or whatever output you’ve selected).\nYou can knit by clicking on the “Knit” button at the top of the editor window, or by pressing ⌘⇧K on macOS or control + shift + K on Windows.\n   Add chunks There are three ways to insert chunks:\n Press ⌘⌥I on macOS or control + alt + I on Windows\n Click on the “Insert” button at the top of the editor window\n Manually type all the backticks and curly braces (don’t do this)\n   Chunk names You can add names to chunks to make it easier to navigate your document. If you click on the little dropdown menu at the bottom of your editor in RStudio, you can see a table of contents that shows all the headings and chunks. If you name chunks, they’ll appear in the list. If you don’t include a name, the chunk will still show up, but you won’t know what it does.\nTo add a name, include it immediately after the {r in the first line of the chunk. Names cannot contain spaces, but they can contain underscores and dashes. All chunk names in your document must be unique.\n```{r name-of-this-chunk} # Code goes here ```  Chunk options There are a bunch of different options you can set for each chunk. You can see a complete list in the RMarkdown Reference Guide or at knitr’s website.\nOptions go inside the {r} section of the chunk:\n```{r name-of-this-chunk, warning=FALSE, message=FALSE} # Code goes here ``` The most common chunk options are these:\n fig.width=5 and fig.height=3 (or whatever number you want): Set the dimensions for figures echo=FALSE: The code is not shown in the final document, but the results are message=FALSE: Any messages that R generates (like all the notes that appear after you load a package) are omitted warning=FALSE: Any warnings that R generates are omitted include=FALSE: The chunk still runs, but the code and results are not included in the final document  You can also set chunk options by clicking on the little gear icon in the top right corner of any chunk:\n Inline chunks You can also include R output directly in your text, which is really helpful if you want to report numbers from your analysis. To do this, use `r r_code_here`.\nIt’s generally easiest to calculate numbers in a regular chunk beforehand and then use an inline chunk to display the value in your text. For instance, this document…\n```{r find-avg-mpg, echo=FALSE} avg_mpg \u0026lt;- mean(mtcars$mpg) ``` The average fuel efficiency for cars from 1974 was `r round(avg_mpg, 1)` miles per gallon. … would knit into this:\n The average fuel efficiency for cars from 1974 was 20.1 miles per gallon.\n  Output formats You can specify what kind of document you create when you knit in the YAML front matter.\ntitle: \u0026quot;My document\u0026quot; output: html_document: default pdf_document: default word_document: default You can also click on the down arrow on the “Knit” button to choose the output and generate the appropriate YAML. If you click on the gear icon next to the “Knit” button and choose “Output options”, you change settings for each specific output type, like default figure dimensions or whether or not a table of contents is included.\nThe first output type listed under output: will be what is generated when you click on the “Knit” button or press the keyboard shortcut (⌘⇧K on macOS; control + shift + K on Windows). If you choose a different output with the “Knit” button menu, that output will be moved to the top of the output section.\nThe indentation of the YAML section matters, especially when you have settings nested under each output type. Here’s what a typical output section might look like:\n--- title: \u0026quot;My document\u0026quot; author: \u0026quot;My name\u0026quot; date: \u0026quot;January 13, 2020\u0026quot; output: html_document: toc: yes fig_caption: yes fig_height: 8 fig_width: 10 pdf_document: latex_engine: xelatex # More modern PDF typesetting engine toc: yes word_document: toc: yes fig_caption: yes fig_height: 4 fig_width: 5 ---  ","date":1578873600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1627916210,"objectID":"00c0b36df90b91640842af65d1311657","permalink":"https://ssc442.netlify.app/resource/rmarkdown/","publishdate":"2020-01-13T00:00:00Z","relpermalink":"/resource/rmarkdown/","section":"resource","summary":"Key terms Add chunks Chunk names Chunk options Inline chunks Output formats   R Markdown is regular Markdown with R code and output sprinkled in. You can do everything you can with regular Markdown, but you can incorporate graphs, tables, and other R output directly in your document. You can create HTML, PDF, and Word documents, PowerPoint and HTML presentations, websites, books, and even interactive dashboards with R Markdown.","tags":null,"title":"Using R Markdown","type":"docs"},{"authors":null,"categories":null,"content":"   R style conventions Main style things to pay attention to for this class  Spacing Long lines Pipes (%\u0026gt;%) and ggplot layers (+) Comments    R style conventions R is fairly forgiving about how you type code (unlike other languages like Python, where miscounting spaces can ruin your code!). All of these things will do exactly the same thing:\nmpg %\u0026gt;% filter(cty \u0026gt; 10, class == \u0026quot;compact\u0026quot;) mpg %\u0026gt;% filter(cty \u0026gt; 10, class == \u0026quot;compact\u0026quot;) mpg %\u0026gt;% filter(cty \u0026gt; 10, class == \u0026quot;compact\u0026quot;) mpg %\u0026gt;% filter(cty\u0026gt;10, class==\u0026quot;compact\u0026quot;) filter(mpg,cty\u0026gt;10,class==\u0026quot;compact\u0026quot;) mpg %\u0026gt;% filter(cty \u0026gt; 10, class == \u0026quot;compact\u0026quot;) filter ( mpg,cty\u0026gt;10, class==\u0026quot;compact\u0026quot; ) But you’ll notice that only a few of those iterations (the first three) are easily readable.\nTo help improve readability and make it easier to share code with others, there’s an unofficial style guide for writing R code. It’s fairly short and just has lots of examples of good and bad ways of writing code (naming variables, dealing with long lines, using proper indentation levels, etc.)—you should glance through it some time.\nRStudio has a built-in way of cleaning up your code. Select some code, press ctrl + i (on Windows) or ⌘ + i (on macOS), and R will reformat the code for you. It’s not always perfect, but it’s really helpful for getting indentation right without having to manually hit space a billion times.\n Main style things to pay attention to for this class  Important note: I won’t ever grade you on any of this! If you submit something like filter(mpg,cty\u0026gt;10,class==\"compact\"), I might recommend adding spaces, but it won’t affect your grade or points or anything.\n Spacing  See the “Spacing” section in the tidyverse style guide.\n Put spaces after commas (like in regular English):\n# Good filter(mpg, cty \u0026gt; 10) # Bad filter(mpg , cty \u0026gt; 10) filter(mpg ,cty \u0026gt; 10) filter(mpg,cty \u0026gt; 10) Put spaces around operators like +, -, \u0026gt;, =, etc.:\n# Good filter(mpg, cty \u0026gt; 10) # Bad filter(mpg, cty\u0026gt;10) filter(mpg, cty\u0026gt; 10) filter(mpg, cty \u0026gt;10) Don’t put spaces around parentheses that are parts of functions:\n# Good filter(mpg, cty \u0026gt; 10) # Bad filter (mpg, cty \u0026gt; 10) filter ( mpg, cty \u0026gt; 10) filter( mpg, cty \u0026gt; 10 )  Long lines  See the “Long lines” section in the tidyverse style guide.\n It’s generally good practice to not have really long lines of code. A good suggestion is to keep lines at a maximum of 80 characters. Instead of counting characters by hand (ew), in RStudio go to “Tools” \u0026gt; “Global Options” \u0026gt; “Code” \u0026gt; “Display” and check the box for “Show margin”. You should now see a really thin line indicating 80 characters. Again, you can go beyond this—that’s fine. It’s just good practice to avoid going too far past it.\nYou can add line breaks inside longer lines of code. Line breaks should come after commas, and things like function arguments should align within the function:\n# Good filter(mpg, cty \u0026gt; 10, class == \u0026quot;compact\u0026quot;) # Good filter(mpg, cty \u0026gt; 10, class == \u0026quot;compact\u0026quot;) # Good filter(mpg, cty \u0026gt; 10, class == \u0026quot;compact\u0026quot;) # Bad filter(mpg, cty \u0026gt; 10, class %in% c(\u0026quot;compact\u0026quot;, \u0026quot;pickup\u0026quot;, \u0026quot;midsize\u0026quot;, \u0026quot;subcompact\u0026quot;, \u0026quot;suv\u0026quot;, \u0026quot;2seater\u0026quot;, \u0026quot;minivan\u0026quot;)) # Good filter(mpg, cty \u0026gt; 10, class %in% c(\u0026quot;compact\u0026quot;, \u0026quot;pickup\u0026quot;, \u0026quot;midsize\u0026quot;, \u0026quot;subcompact\u0026quot;, \u0026quot;suv\u0026quot;, \u0026quot;2seater\u0026quot;, \u0026quot;minivan\u0026quot;))  Pipes (%\u0026gt;%) and ggplot layers (+) Put each layer of a ggplot plot on separate lines, with the + at the end of the line, indented with two spaces:\n# Good ggplot(mpg, aes(x = cty, y = hwy, color = class)) + geom_point() + geom_smooth() + theme_bw() # Bad ggplot(mpg, aes(x = cty, y = hwy, color = class)) + geom_point() + geom_smooth() + theme_bw() # Super bad ggplot(mpg, aes(x = cty, y = hwy, color = class)) + geom_point() + geom_smooth() + theme_bw() # Super bad and won\u0026#39;t even work ggplot(mpg, aes(x = cty, y = hwy, color = class)) + geom_point() + geom_smooth() + theme_bw() Put each step in a dplyr pipeline on separate lines, with the %\u0026gt;% at the end of the line, indented with two spaces:\n# Good mpg %\u0026gt;% filter(cty \u0026gt; 10) %\u0026gt;% group_by(class) %\u0026gt;% summarize(avg_hwy = mean(hwy)) # Bad mpg %\u0026gt;% filter(cty \u0026gt; 10) %\u0026gt;% group_by(class) %\u0026gt;% summarize(avg_hwy = mean(hwy)) # Super bad mpg %\u0026gt;% filter(cty \u0026gt; 10) %\u0026gt;% group_by(class) %\u0026gt;% summarize(avg_hwy = mean(hwy)) # Super bad and won\u0026#39;t even work mpg %\u0026gt;% filter(cty \u0026gt; 10) %\u0026gt;% group_by(class) %\u0026gt;% summarize(avg_hwy = mean(hwy))  Comments  See the “Comments” section in the tidyverse style guide.\n Comments should start with a comment symbol and a single space: #\n# Good #Bad #Bad If the comment is really short (and won’t cause you to go over 80 characters in the line), you can include it in the same line as the code, separated by at least two spaces (it works with one space, but using a couple can enhance readability):\nmpg %\u0026gt;% filter(cty \u0026gt; 10) %\u0026gt;% # Only rows where cty is 10 + group_by(class) %\u0026gt;% # Divide into class groups summarize(avg_hwy = mean(hwy)) # Find the average hwy in each group You can add extra spaces to get inline comments to align, if you want:\nmpg %\u0026gt;% filter(cty \u0026gt; 10) %\u0026gt;% # Only rows where cty is 10 + group_by(class) %\u0026gt;% # Divide into class groups summarize(avg_hwy = mean(hwy)) # Find the average hwy in each group If the comment is really long, you can break it into multiple lines. RStudio can do this for you if you go to “Code” \u0026gt; “Reflow comment”\n# Good # Happy families are all alike; every unhappy family is unhappy in its own way. # Everything was in confusion in the Oblonskys’ house. The wife had discovered # that the husband was carrying on an intrigue with a French girl, who had been # a governess in their family, and she had announced to her husband that she # could not go on living in the same house with him. This position of affairs # had now lasted three days, and not only the husband and wife themselves, but # all the members of their family and household, were painfully conscious of it. # Bad # Happy families are all alike; every unhappy family is unhappy in its own way. Everything was in confusion in the Oblonskys’ house. The wife had discovered that the husband was carrying on an intrigue with a French girl, who had been a governess in their family, and she had announced to her husband that she could not go on living in the same house with him. This position of affairs had now lasted three days, and not only the husband and wife themselves, but all the members of their family and household, were painfully conscious of it. Though, if you’re dealing with comments that are that long, consider putting the text in R Markdown instead and having it be actual prose.\n  ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1627916210,"objectID":"f4734e734c67442efdc8d228e91ad766","permalink":"https://ssc442.netlify.app/resource/style/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/resource/style/","section":"resource","summary":"R style conventions Main style things to pay attention to for this class  Spacing Long lines Pipes (%\u0026gt;%) and ggplot layers (+) Comments    R style conventions R is fairly forgiving about how you type code (unlike other languages like Python, where miscounting spaces can ruin your code!). All of these things will do exactly the same thing:\nmpg %\u0026gt;% filter(cty \u0026gt; 10, class == \u0026quot;compact\u0026quot;) mpg %\u0026gt;% filter(cty \u0026gt; 10, class == \u0026quot;compact\u0026quot;) mpg %\u0026gt;% filter(cty \u0026gt; 10, class == \u0026quot;compact\u0026quot;) mpg %\u0026gt;% filter(cty\u0026gt;10, class==\u0026quot;compact\u0026quot;) filter(mpg,cty\u0026gt;10,class==\u0026quot;compact\u0026quot;) mpg %\u0026gt;% filter(cty \u0026gt; 10, class == \u0026quot;compact\u0026quot;) filter ( mpg,cty\u0026gt;10, class==\u0026quot;compact\u0026quot; ) But you’ll notice that only a few of those iterations (the first three) are easily readable.","tags":null,"title":"R style suggestions","type":"docs"},{"authors":null,"categories":null,"content":"  Because RStudio projects typically consist of multiple files (R scripts, datasets, graphical output, etc.) the easiest way to distribute them to you for examples, assignments, and projects is to combine all the different files in to a single compressed collection called a zip file. When you unzip a zipped file, your operating system extracts all the files that are contained inside into a new folder on your computer.\nUnzipping files on macOS is trivial, but unzipping files on Windows can mess you up if you don’t pay careful attention. Here’s a helpful guide to unzipping files on both macOS and Windows.\nUnzipping files on macOS Double click on the downloaded .zip file. macOS will automatically create a new folder with the same name as the .zip file, and all the file’s contents will be inside. Double click on the RStudio Project file (.Rproj) to get started.\n Unzipping files on Windows tl;dr: Right click on the .zip file, select “Extract All…”, and work with the resulting unzipped folder.\nUnlike macOS, Windows does not automatically unzip things for you. If you double click on the .zip file, Windows will show you what’s inside, but it will do so without actually extracting anything. This can be is incredibly confusing! Here’s what it looks like—the only clues that this folder is really a .zip file are that there’s a “Compressed Folder Tools” tab at the top, and there’s a “Ratio” column that shows how much each file is compressed.\nIt is very tempting to try to open files from this view. However, if you do, things will break and you won’t be able to correctly work with any of the files in the zipped folder. If you open the R Project file, for instance, RStudio will point to a bizarre working directory buried deep in some temporary folder:\nYou most likely won’t be able to open any data files or save anything, which will be frustrating.\nInstead, you need to right click on the .zip file and select “Extract All…”:\nThen choose where you want to unzip all the files and click on “Extract”\nYou should then finally have a real folder with all the contents of the zipped file. Open the R Project file and RStudio will point to the correct working directory and everything will work.\n ","date":1588723200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1627916210,"objectID":"c14c352fd4c4ab8c12a3cd60b30b9d8c","permalink":"https://ssc442.netlify.app/resource/unzipping/","publishdate":"2020-05-06T00:00:00Z","relpermalink":"/resource/unzipping/","section":"resource","summary":"Because RStudio projects typically consist of multiple files (R scripts, datasets, graphical output, etc.) the easiest way to distribute them to you for examples, assignments, and projects is to combine all the different files in to a single compressed collection called a zip file. When you unzip a zipped file, your operating system extracts all the files that are contained inside into a new folder on your computer.","tags":null,"title":"Unzipping files","type":"docs"},{"authors":null,"categories":null,"content":"  There are a ton of places to find data related to public policy and administration (as well as data on pretty much any topic you want) online:\n Data is Plural newsletter: Jeremy Singer-Vine sends a weekly newsletter of the most interesting public datasets he’s found. You should subscribe to it. He also has an archive of all the datasets he’s highlighted.\n Google Dataset Search: Google indexes thousands of public datasets; search for them here.\n Kaggle: Kaggle hosts machine learning competitions where people compete to create the fastest, most efficient, most predictive algorithms. A byproduct of these competitions is a host of fascinating datasets that are generally free and open to the public. See, for example, the European Soccer Database, the Salem Witchcraft Dataset or results from an Oreo flavors taste test.\n 360Giving: Dozens of British foundations follow a standard file format for sharing grant data and have made that data available online.\n US City Open Data Census: More than 100 US cities have committed to sharing dozens of types of data, including data about crime, budgets, campaign finance, lobbying, transit, and zoning. This site from the Sunlight Foundation and Code for America collects this data and rates cities by how well they’re doing.\n Political science and economics datasets: There’s a wealth of data available for political science- and economics-related topics:\n François Briatte’s extensive curated lists: Includes data from/about intergovernmental organizations (IGOs), nongovernmental organizations (NGOs), public opinion surveys, parliaments and legislatures, wars, human rights, elections, and municipalities. Thomas Leeper’s list of political science datasets: Good short list of useful datasets, divided by type of data (country-level data, survey data, social media data, event data, text data, etc.). Erik Gahner’s list of political science datasets: Huge list of useful datasets, divided by topic (governance, elections, policy, political elites, etc.)   ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1627916210,"objectID":"2210aa8aeb5724b04bdf63d813d61030","permalink":"https://ssc442.netlify.app/resource/data/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/resource/data/","section":"resource","summary":"There are a ton of places to find data related to public policy and administration (as well as data on pretty much any topic you want) online:\n Data is Plural newsletter: Jeremy Singer-Vine sends a weekly newsletter of the most interesting public datasets he’s found. You should subscribe to it. He also has an archive of all the datasets he’s highlighted.\n Google Dataset Search: Google indexes thousands of public datasets; search for them here.","tags":null,"title":"Data","type":"docs"},{"authors":null,"categories":null,"content":"   Groups Part 1: Rats, rats, rats.  Instructions Starter code  Part 2: Data Hunting Evaluations   Groups Your groups are listed here.\nEach member of the group must submit a copy of the project to D2L. Please write your group number and the group members’ names across the top.\nTurn in your copies by 11:59pm on October 8th (I have extended everyone’s deadline due to slow rollout of groups).\n  Part 1: Rats, rats, rats. New York City is full of urban wildlife, and rats are one of the city’s most infamous animal mascots. Rats in NYC are plentiful, but they also deliver food, so they’re useful too.\n   NYC keeps incredibly detailed data regarding animal sightings, including rats, and it makes this data publicly available.\nFor this first project, you will use R and ggplot2 to tell an interesting story hidden in the data. You must create a story by looking carefully at the data.\nInstructions Here’s what you need to do:\nDownload New York City’s database of rat sightings since 2010:\n  Rat_sightings.csv  Summarize the data somehow. The raw data has more than 100,000 rows, which means you’ll need to aggregate the data (filter(), group_by(), and summarize() will be your friends). Consider looking at the number of sightings per borough, per year, per dwelling type, etc., or a combination of these, like the change in the number sightings across the 5 boroughs between 2010 and 2016.\n Create an appropriate visualization based on the data you summarized.\n Write a memo explaining your process. We are specifically looking for a discussion of the following:\n What story are you telling with your new graphic? How have you applied reasonable standards in visual storytelling? What policy implication is there (if any)?  Upload the following outputs to D2L:\n A PDF file of your memo with your final code and graphic embedded in it.1 This means you’ll need to do all your coding in an R Markdown file and embed your code in chunks. Note that Part 2 of this project should be included in this PDF (see below). A standalone PDF version of your graphic. Use ggsave(plot_name, filename = \"output/blah.pdf\", width = XX, height = XX)    Starter code I’ve provided some starter code below. A couple comments about it:\n By default, read_csv() treats cells that are empty or “NA” as missing values. This rat dataset uses “N/A” to mark missing values, so we need to add that as a possible marker of missingness (hence na = c(\"\", \"NA\", \"N/A\")) To make life easier, I’ve renamed some of the key variables you might work with. You can rename others if you want. I’ve also created a few date-related variables (sighting_year, sighting_month, sighting_day, and sighting_weekday). You don’t have to use them, but they’re there if you need them. The functions that create these, like year() and wday() are part of the lubridate library. The date/time variables are formatted like 04/03/2017 12:00:00 AM, which R is not able to automatically parse as a date when reading the CSV file. You can use the mdy_hms() function in the lubridate library to parse dates that are structured as “month-day-year-hour-minute”. There are also a bunch of other iterations of this function, like ymd(), dmy(), etc., for other date formats. There’s one row with an unspecified borough, so I filter that out.  library(tidyverse) library(lubridate) rats_raw \u0026lt;- read_csv(\u0026quot;data/Rat_Sightings.csv\u0026quot;, na = c(\u0026quot;\u0026quot;, \u0026quot;NA\u0026quot;, \u0026quot;N/A\u0026quot;)) # If you get an error that says \u0026quot;All formats failed to parse. No formats # found\u0026quot;, it\u0026#39;s because the mdy_hms function couldn\u0026#39;t parse the date. The date # variable *should* be in this format: \u0026quot;04/03/2017 12:00:00 AM\u0026quot;, but in some # rare instances, it might load without the seconds as \u0026quot;04/03/2017 12:00 AM\u0026quot;. # If there are no seconds, use mdy_hm() instead of mdy_hms(). rats_clean \u0026lt;- rats_raw %\u0026gt;% rename(created_date = `Created Date`, location_type = `Location Type`, borough = Borough) %\u0026gt;% mutate(created_date = mdy_hms(created_date)) %\u0026gt;% mutate(sighting_year = year(created_date), sighting_month = month(created_date), sighting_day = day(created_date), sighting_weekday = wday(created_date, label = TRUE, abbr = FALSE)) %\u0026gt;% filter(borough != \u0026quot;Unspecified\u0026quot;) You’ll summarize the data with functions from dplyr, including stuff like count(), arrange(), filter(), group_by(), summarize(), and mutate(). Here are some examples of ways to summarize the data:\n# See the count of rat sightings by weekday rats_clean %\u0026gt;% count(sighting_weekday) # Assign a summarized data frame to an object to use it in a plot rats_by_weekday \u0026lt;- rats_clean %\u0026gt;% count(sighting_weekday, sighting_year) ggplot(rats_by_weekday, aes(x = fct_rev(sighting_weekday), y = n)) + geom_col() + coord_flip() + facet_wrap(~ sighting_year) # See the count of rat sightings by weekday and borough rats_clean %\u0026gt;% count(sighting_weekday, borough, sighting_year) # An alternative to count() is to specify the groups with group_by() and then # be explicit about how you\u0026#39;re summarizing the groups, such as calculating the # mean, standard deviation, or number of observations (we do that here with # `n()`). rats_clean %\u0026gt;% group_by(sighting_weekday, borough) %\u0026gt;% summarize(n = n())   Part 2: Data Hunting For the second part of the project, your task is simple. Your group must identify three different data sources2 for potential use in your final project. You are not bound to this decision.\nFor each, you must write a single paragraph about what about this data interests you. Add this to the memo from Part 1.\n Evaluations I will evaluate these projects (not the TA). I will only give top marks to those groups showing initiative and cleverness. I will use the following weights for final scores:\nPart 1\nTechnical difficulty: Does the final project show mastery of the skills we’ve discussed thus far? (10 points)\n Appropriateness of visuals: Do the visualizations tell a clear story? Have we learned something? (10 points)\n Storytelling: Does your memo clearly convey what you’re doing and why? (9 points)\n  Part 2\nEach piece of data (and description) is worth 7 points. (21 points total)\n  You can approach this in a couple different ways—you can write the memo and then include the full figure and code at the end, similar to this blog post, or you can write the memo in an incremental way, describing the different steps of creating the figure, ultimately arriving at a clean final figure, like this blog post.↩︎\n The three different sources need not be different websites or from different organizations. For example, three different tables from the US Census would be sufficient↩︎\n   ","date":1633651200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1632401667,"objectID":"1ee2ebbd4938399d5199cb912763ad52","permalink":"https://ssc442.netlify.app/assignment/project1/","publishdate":"2021-10-08T00:00:00Z","relpermalink":"/assignment/project1/","section":"assignment","summary":"Groups Part 1: Rats, rats, rats.  Instructions Starter code  Part 2: Data Hunting Evaluations   Groups Your groups are listed here.\nEach member of the group must submit a copy of the project to D2L. Please write your group number and the group members’ names across the top.\nTurn in your copies by 11:59pm on October 8th (I have extended everyone’s deadline due to slow rollout of groups).","tags":null,"title":"Project 1","type":"docs"},{"authors":null,"categories":null,"content":"   Weekly Writing Prompt   Weekly Writing Prompt This weekly writing is for those who did not attend class.\nComplete the exercises in the first “Try It” box in this week’s Content. (If you’re having trouble locating that box, the first question begins “One ball will be drawn at random from a box containing: 3 cyan balls, 5 magenta balls, and 7 yellow balls.”)\nAs always, you must knit your output to a PDF and submit that to D2L. No word docs, no .Rmd documents. PDFs, please.\n  ","date":1632614400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1632838512,"objectID":"a3ced8b26e9e5ffd1844127af0dde9f3","permalink":"https://ssc442.netlify.app/assignment/weekly3/","publishdate":"2021-09-26T00:00:00Z","relpermalink":"/assignment/weekly3/","section":"assignment","summary":"Weekly Writing Prompt   Weekly Writing Prompt This weekly writing is for those who did not attend class.\nComplete the exercises in the first “Try It” box in this week’s Content. (If you’re having trouble locating that box, the first question begins “One ball will be drawn at random from a box containing: 3 cyan balls, 5 magenta balls, and 7 yellow balls.”)\nAs always, you must knit your output to a PDF and submit that to D2L.","tags":null,"title":"Weekly Writing","type":"docs"},{"authors":null,"categories":null,"content":"   Readings  Guiding Questions  ggplot2  The components of a graph ggplot objects Geometries (briefly) Aesthetic mappings  Aesthetics in general Now, back to aesthetic mappings Legends for aesthetics  Annotation Layers  Global versus local aesthetic mappings  Try it! Some Quirky Stuff Scales and transformations  Log transformations Transforming data vs. transforming using scale_...  Axis labels, legends, and titles  Changing axis titles Titles  Axis ticks Additional geometries  geom_line Using different data with different geometries Multiple geometries  Try it!    Readings  This page.  Guiding Questions  No guiding questions today; we’re mostly learning some technical aspects of ggplot    ggplot2 Exploratory data visualization is perhaps the greatest strength of R. One can quickly go from idea to data to plot with a unique balance of flexibility and ease. For example, Excel may be easier than R for some plots, but it is nowhere near as flexible. D3.js may be more flexible and powerful than R, but it takes much longer to generate a plot. One of the reasons we use R is its incredible flexibility and ease.\nThroughout this course, we will be creating plots using the ggplot21 package.\nlibrary(dplyr) library(ggplot2) Many other approaches are available for creating plots in R. In fact, the plotting capabilities that come with a basic installation of R are already quite powerful. There are also other packages for creating graphics such as grid and lattice. We chose to use ggplot2 in this course because it breaks plots into components in a way that permits beginners to create relatively complex and aesthetically pleasing plots using syntax that is intuitive and comparatively easy to remember.\nOne reason ggplot2 is generally more intuitive for beginners is that it uses a so-called “grammar of graphics”2, the letters gg in ggplot2. This is analogous to the way learning grammar can help a beginner construct hundreds of different sentences by learning just a handful of verbs, nouns and adjectives without having to memorize each specific sentence. Similarly, by learning a handful of ggplot2 building blocks and its grammar, you will be able to create hundreds of different plots.\nAnother reason ggplot2 is easy for beginners is that its default behavior is carefully chosen to satisfy the great majority of cases and is visually pleasing. As a result, it is possible to create informative and elegant graphs with relatively simple and readable code.\nOne limitation is that ggplot2 is designed to work exclusively with data tables in tidy format (where rows are observations and columns are variables). However, a substantial percentage of datasets that beginners work with are in, or can be converted into, this format. An advantage of this approach is that, assuming that our data is tidy, ggplot2 simplifies plotting code and the learning of grammar for a variety of plots. You should review the previous content about tidy data if you are feeling lost.\nTo use ggplot2 you will have to learn several functions and arguments. These are hard to memorize, so we highly recommend you have the ggplot2 cheat sheet handy. You can get a copy here: https://www.rstudio.com/wp-content/uploads/2015/03/ggplot2-cheatsheet.pdf or simply perform an internet search for “ggplot2 cheat sheet”.\nThe components of a graph We will eventually construct a graph that summarizes the US murders dataset that looks like this:\nWe can clearly see how much states vary across population size and the total number of murders. Not surprisingly, we also see a clear relationship between murder totals and population size. A state falling on the dashed grey line has the same murder rate as the US average. The four geographic regions are denoted with color, which depicts how most southern states have murder rates above the average.\nThis data visualization shows us pretty much all the information in the data table. The code needed to make this plot is relatively simple. We will learn to create the plot part by part.\nThe first step in learning ggplot2 is to be able to break a graph apart into components. Let’s break down the plot above and introduce some of the ggplot2 terminology. The main five components to note are:\n Data: The US murders data table is being summarized. We refer to this as the data component.\n Geometry: The plot above is a scatterplot. This is referred to as the geometry component. Other possible geometries are barplot, histogram, smooth densities, qqplot, boxplot, pie (ew!), and many, many more. We will learn about these later.\n Aesthetic mapping: The plot uses several visual cues to represent the information provided by the dataset. The two most important cues in this plot are the point positions on the x-axis and y-axis, which represent population size and the total number of murders, respectively. Each point represents a different observation, and we map data about these observations to visual cues like x- and y-scale. Color is another visual cue that we map to region. We refer to this as the aesthetic mapping component. How we define the mapping depends on what geometry we are using.\n Annotations: These are things like axis labels, axis ticks (the lines along the axis at regular intervals or specific points of interest), axis scales (e.g. log-scale), titles, legends, etc.\n Style: An overall appearance of the graph determined by fonts, color palattes, layout, blank spaces, and more.\n  We also note that:\n The points are labeled with the state abbreviations. The range of the x-axis and y-axis appears to be defined by the range of the data. They are both on log-scales. There are labels, a title, a legend, and we use the style of The Economist magazine.  All of the flexibility and visualization power of ggplot is contained in these four elements (plus your data)\n ggplot objects We will now construct the plot piece by piece.\nWe start by loading the dataset:\nlibrary(dslabs) data(murders) The first step in creating a ggplot2 graph is to define a ggplot object. We do this with the function ggplot, which initializes the graph. If we read the help file for this function, we see that the first argument is used to specify what data is associated with this object:\nggplot(data = murders) We can also pipe the data in as the first argument. So this line of code is equivalent to the one above:\nmurders %\u0026gt;% ggplot() It renders a plot. But in this case, it renders a blank slate. The object was created and, because it was not assigned to an object, it was automatically evaluated. Of course, we can assign our plot to an object, for example like this:\np \u0026lt;- ggplot(data = murders) class(p) ## [1] \u0026quot;gg\u0026quot; \u0026quot;ggplot\u0026quot; To render the plot associated with this object, we simply print the object p. The following two lines of code each produce the same plot we see above:\nprint(p) p  Geometries (briefly) The plot above is incredibly boring (it’s only a blank slate). It’s boring because we didn’t tell ggplot2 what to do. In general, if R is doing something unexpected, it’s because you (the user) failed to tell it what you had in mind. Here, we want to make an actual plot, but we didn’t tell R what sort of plot to make. In order to tell it what sort of plot we want, we use “geometries”.\nSpecifically, in ggplot2 we create graphs by adding geometry layers. Layers can define geometries, compute summary statistics, define what scales to use, create annotations, or even change styles. To add layers, we use the symbol +. In general, a line of code will look like this:\n DATA %\u0026gt;% ggplot() + LAYER 1 + LAYER 2 + ... + LAYER N Usually, the first added layer after ggplot() + defines the geometry. After that, we may add additional geometries, we may rescale an axis, we may add annotations and labels, or we may change the style. For now, we want to make a scatterplot. What geometry do we use?\n Taking a quick look at the cheat sheet, we see that the function used to create plots with this geometry is geom_point.\n(Image courtesy of RStudio3. CC-BY-4.0 license4.)\nGeometry function names follow the pattern: geom_X where X is the name of some specific geometry. Some examples include geom_point, geom_bar, and geom_histogram. You’ve already seen a few of these. We will start with a scatterplot created using geom_point() for now, then circle back to more geometries after we cover aesthetic mappings, layers, and annotations.\nFor geom_point to run properly we need to provide data and an aesthetic mapping. The simplest mapping for a scatter plot is to say we want one variable on the X-axis, and a different one on the Y-axis, so each point is an {X,Y} pair. That is an aesthetic mapping because X and Y are aesthetics in a geom_point scatterplot.\nWe have already connected the object p with the murders data table, and if we add the layer geom_point it defaults to using this data. To find out what mappings are expected, we read the Aesthetics section of the help file ?geom_point help file:\n\u0026gt; Aesthetics \u0026gt; \u0026gt; geom_point understands the following aesthetics (required aesthetics are in bold): \u0026gt; \u0026gt; **x** \u0026gt; \u0026gt; **y** \u0026gt; \u0026gt; alpha \u0026gt; \u0026gt; colour \u0026gt; \u0026gt; fill \u0026gt; \u0026gt; group \u0026gt; \u0026gt; shape \u0026gt; \u0026gt; size \u0026gt; \u0026gt; stroke and—although it does not show in bold above—we see that at least two arguments are required: x and y. You can’t have a geom_point scatterplot unless you state what you want on the X and Y axes.\n Aesthetic mappings Aesthetic mappings describe how properties of the data connect with features of the graph, such as distance along an axis, size, or color. The aes function connects data with what we see on the graph by defining aesthetic mappings and will be one of the functions you use most often when plotting. The outcome of the aes function is often used as the argument of a geometry function. This example produces a scatterplot of population in millions (x-axis) versus total murders (y-axis):\nmurders %\u0026gt;% ggplot() + geom_point(aes(x = population/10^6, y = total)) Instead of defining our plot from scratch, we can also add a layer to the p object that was defined above as p \u0026lt;- ggplot(data = murders):\np + geom_point(aes(x = population/10^6, y = total)) The scales and annotations like axis labels are defined by default when adding this layer (note the x-axis label is exactly what we wrote in the function call). Like dplyr functions, aes also uses the variable names from the object component: we can use population and total without having to call them as murders$population and murders$total. The behavior of recognizing the variables from the data component is quite specific to aes. With most functions, if you try to access the values of population or total outside of aes you receive an error.\nNote that we did some rescaling within the aes() call - we can do simple things like multiplication or division on the variable names in the ggplot call. The axis labels reflect this. We will change the axis labels later.\nThe aesthetic mappings are very powerful - changing the variable in x= or y= changes the meaning of the plot entirely. We’ll come back to additional aesthetic mappings once we talk about aesthetics in general.\nAesthetics in general Even without mappings, a plots aesthetics can be useful. Things like color, fill, alpha, and size are aesthetics that can be changed.\nLet’s say we want larger points in our scatterplot. The size aesthetic can be used to set the size. The scale of size is “multiples of the defaults” (so size = 1 is the default)\np + geom_point(aes(x = population/10^6, y = total), size = 3) size is not a mapping so it is not in the aes() part: whereas mappings use data from specific observations and need to be inside aes(), operations we want to affect all the points the same way do not need to be included inside aes. We’ll see what happens if size is inside aes(size = xxx) in a second.\nWe can change the shape to one of the many different base-R options found here:\np + geom_point(aes(x = population/10^6, y = total), size = 3, shape = 17) We can also change the fill and the color:\np + geom_point(aes(x = population/10^6, y = total), size = 4, shape = 23, fill = \u0026#39;#18453B\u0026#39;) fill can take a common name like 'green', or can take a hex color like '#18453B', which is MSU Green according to MSU’s branding site. You can also find UM Maize and OSU Scarlet on respective branding pages, or google “XXX color hex.” We’ll learn how to build a color palatte later on.\ncolor (or colour, same thing because ggplot creators allow both spellings) is a little tricky with points - it changes the outline of the geometry rather than the fill color, but in geom_point() most shapes are only the outline, including the default. This is more useful with, say, a barplot where the outline and the fill might be different colors. Still, shapes 21-25 have both fill and color:\np + geom_point(aes(x = population/10^6, y = total), size = 5, shape = 23, fill = \u0026#39;#18453B\u0026#39;, color = \u0026#39;white\u0026#39;) The color = 'white' makes the outline of the shape white, which you can see if you look closely in the areas where the shapes overlap. This only works with shapes 21-25, or any other geometry that has both an outline and a fill.\n Now, back to aesthetic mappings Now that we’ve seen a few aesthetics (and know we can find more by looking at which aesthetics work with our geometry in the help file), let’s return to the power of aesthetic mappings.\nAn aesthetic mapping means we can vary an aesthetic (like fill or shape or size) according to some variable in our data. This opens up a world of possibilities! Let’s try adding to our x and y aesthetics with a color aesthetic (since points respond to color better than fill) that varies by region, which is a column in our data:\np + geom_point(aes(x = population/10^6, y = total, color = region), size = 3) We include color=region inside the aes call, which tells R to find a variable called region and change color based on that. R will choose a somewhat ghastly color palatte, and every unique value in the data for region will get a different color if the variable is discrete. If the variable is a continuous value, then ggplot will automatically make a color ramp. Thus, discrete and continuous values for aesthetic mappings work differently.\nLet’s see a useful example of a continuous aesthetic mapping to color. In our data, we are making a scatterplot of population and total murders, which really just shows that states with higher populations have higher murders. What we really want is murders per capita (I think COVID taught us a lot about rates vs. levels like “cases” and “cases per 100,000 people”). We can create a variable of “murders per capita” on the fly. Since “murders per capita” is a very small number and hard to read, we’ll multiply by 100 so that we get “percent of population murdered per year”:\np + geom_point(aes(x = population/10^5, y = total, color = 100*total/population), size = 3) While the clear pattern of “more population means more murders” is still there, look at the outlier in light blue in the bottom left. With the color ramp, see how easy it is to see here that there is one location where murders per capita is quite high?\nNote that size is outside of aes and is set to an explicit value, not to a variable. What if we set size to a variable in the data?\np + geom_point(aes(x = population/10^6, y = total, color = region, size = population/10^6))  Legends for aesthetics Here we see yet another useful default behavior: ggplot2 automatically adds a legend that maps color to region, and size to population (which we scaled by 1,000,000). To avoid adding this legend we set the geom_point argument show.legend = FALSE. This removes both the size and the color legend.\np + geom_point(aes(x = population/10^6, y = total, color = region, size = population/10^6), show.legend = FALSE) Later on, when we get to annotation layers, we’ll talk about controlling the legend text and layout. For now, we just need to know how to turn them off.\n  Annotation Layers A second layer in the plot we wish to make involves adding a label to each point to identify the state. The geom_label and geom_text functions permit us to add text to the plot with and without a rectangle behind the text, respectively.\nBecause each point (each state in this case) has a label, we need an aesthetic mapping to make the connection between points and labels. By reading the help file ?geom_text, we learn that we supply the mapping between point and label through the label argument of aes. That is, label is an aesthetic that we can map. So the code looks like this:\np + geom_point(aes(x = population/10^6, y = total)) + geom_text(aes(x = population/10^6, y = total, label = abb)) We have successfully added a second layer to the plot.\nAs an example of the unique behavior of aes mentioned above, note that this call:\np + geom_point(aes(x = population/10^6, y = total)) + geom_text(aes(population/10^6, total, label = abb)) is fine, whereas this call:\np + geom_point(aes(x = population/10^6, y = total)) + geom_text(aes(population/10^6, total), label = abb) will give you an error since abb is not found because it is outside of the aes function. The layer geom_text does not know where to find abb since it is a column name and not a global variable, and ggplot does not look for column names for non-mapped aesthetics. For a trivial example:\np + geom_point(aes(x = population/10^6, y = total)) + geom_text(aes(population/10^6, total), label = \u0026#39;abb\u0026#39;) Global versus local aesthetic mappings In the previous line of code, we define the mapping aes(population/10^6, total) twice, once in each geometry. We can avoid this by using a global aesthetic mapping. We can do this when we define the blank slate ggplot object. Remember that the function ggplot contains an argument that permits us to define aesthetic mappings:\nargs(ggplot) ## function (data = NULL, mapping = aes(), ..., environment = parent.frame()) ## NULL If we define a mapping in ggplot, all the geometries that are added as layers will default to this mapping. We redefine p:\np \u0026lt;- murders %\u0026gt;% ggplot(aes(x = population/10^6, y = total, label = abb)) and then we can simply write the following code to produce the previous plot:\np + geom_point(size = 3) + geom_text(nudge_x = 1.5) # offsets the label We keep the size and nudge_x arguments in geom_point and geom_text, respectively, because we want to only increase the size of points and only nudge the labels. If we put those arguments in aes then they would apply to both plots. Also note that the geom_point function does not need a label argument and therefore ignores that aesthetic.\nIf necessary, we can override the global mapping by defining a new mapping within each layer. These local definitions override the global. Here is an example:\np + geom_point(size = 3) + geom_text(aes(x = 10, y = 800, label = \u0026quot;Hello there!\u0026quot;)) Clearly, the second call to geom_text does not use x = population and y = total.\n  Try it! Let’s break in to smaller groups and try playing with some of the aesthetics and aesthetic mappings. If we’re online, we’ll use Zoom Breakout Rooms. Each of the rooms have a room number which will correspond with one of the tasks below. If we’re in person (woohoo!), we’ll form the same number of groups in class.\nIn each group, one person should be the main coder - someone who has the packages like dslabs installed and has successfully run the plots above. Each set of tasks ask you to learn about an aesthetic and put it into action with the murder data. We’ll leave about 5 minutes to do the task, then have you come back and share your results with the class.\nFor each group, we’ll start with the following code:\np + geom_point(aes(x = population/10^6, y = total)) + geom_text(aes(x = population/10^6, y = total, label = abb)) The alpha aesthetic mapping. The alpha aesthetic can only take a number between 0 and 1. So first, in murders, create a murders_per_capita column by dividing total by population. Second, find the max(murders$murders_per_capita) and then create another new column called murders_per_capita_rescaled which divides murders_per_capita by the max value. murders_per_capita_rescaled will be between 0 and 1, with the value of 1 for the state with the max murder rate. This is a little hard to do on the fly in ggplot. Set the alpha aesthetic mapping to murders_per_capita_rescaled for geom_point. Turn off the legend using show.legend=FALSE Include the geom_text labels, but make sure the aesthetic mapping does not apply to the labels. Use nudge_x = 1.5 as before to offset the labels. Be able to explain the plot.  Does the alpha aesthetic help present the data here? It’s OK if it doesn’t!   The stroke aesthetic mapping. The stroke aesthetic works a bit like the size aesthetic. It must be used with a plot that has both a border and a fill, like shapes 21-25, so use one of those. Use the stroke aesthetic mapping (meaning the stroke will change according to a value in the data) to set a different stroke size based on murders per capita. You can create a murders per capita variable on the fly, or add it to your murders data.  Include the text labels as before and use nudge_x = 1.5. Make sure you’re only setting the aesthetic for the points on the scatterplot!   The angle aesthetic Using the ?geom_text help, note that geom_text takes an aesthetic of angle. Use the angle aesthetic (not aesthetic mapping) in the appropriate place (e.g. on geom_text and not on other geometries) to adjust the labels on our plot. Now, try using the angle aesthetic mapping by using the total field as both the y value and the angle value in the geom_text layer. Does using angle as an aesthetic help? What about as an aesthetic mapping?  The color aesthetic mapping Set the color aesthetic mapping in geom_text to total/population.  Use the nudge_x = 1.5 aesthetic in geom_text still  Try it with and without the legend using show.legend. Be able to explain the plot.  Does the color aesthetic mapping help present the data here?   geom_label and the fill aesthetic Looking at ?geom_label (which is the same help as geom_text), we note that “The fill aesthetic controls the backgreound colour of the label”. Set the fill aesthetic mapping to total/population in geom_label (replacing geom_text but still using nudge_x=1.5) Set the fill aesthetic (not mapping) to the color of your choice. Be able to explain the plots.   Does the fill aesthetic mapping help present the data here? What color did you choose for the non-mapped fill aesthetic?     Some Quirky Stuff Load up our murders data\nlibrary(dslabs) library(ggplot2) library(dplyr) data(murders) p \u0026lt;- ggplot(data = murders, aes(x = population, y = total, label = abb))  Scales and transformations Log transformations Last lecture, we re-scaled our population by 10^6 (millions), but still had a lot of variation because some states are tiny and some are huge. Sometimes, we want to have one (or both) of our axes scaled non-linearly. For instance, if we wanted to have our x-axis be in log base 10, then each major tick would represent a factor of 10 over the last. This is not the default, so this change needs to be added through a scales layer. A quick look at the cheat sheet reveals the scale_x_continuous function lets us control the behavior of scales. We use them like this:\np + geom_point(size = 3) + geom_text(nudge_x = 0.05) + scale_x_continuous(trans = \u0026quot;log10\u0026quot;) + scale_y_continuous(trans = \u0026quot;log10\u0026quot;) A couple of things here: adding things like scale_x_continuous(...) operates on the whole plot. In some cases, order matters, but it doesn’t here, so we can throw scale_x_continuous anywhere. Because we have altered the whole plot’s scale to be in the log-scale now, the nudge must be made smaller. It is in log-base-10 units. Using ?scale_x_continuous brings us to the help for both scale_x_continuous and scale_y_continuous, which shows us the options for transformations trans = ...\nThis particular transformation is so common that ggplot2 provides the specialized functions scale_x_log10 and scale_y_log10 which “inherit” (take the place of) the scale_x_continuous functions but have log base 10 as default. We can use these to rewrite the code like this:\np + geom_point(size = 3) + geom_text(nudge_x = 0.05) + scale_x_log10() + scale_y_log10() This can make a plot much easier to read, though one has to be sure to pay attention to the values on the axes. Plotting anything with very large outliers will almost always be better if done in log-scale. Adding the scale layer is an easy way to fix this.\nWe can also use one of many built-in transformations. Of note: reverse just inverts the scale, which can be helpful, log uses the natural log, sqrt takes the square root (dropping anything with a negative value), reciprocal takes 1/x. If your x-axis is in a date format, you can also scale to hms (hour-minute-second) or date.\n Transforming data vs. transforming using scale_... We could simply take the log of population and log of total in the call and we’d get something very similar. Note that we had to override the aesthetic mapping set in p in each of the geometries:\np + geom_point(aes(x = log(population, base=10), y = log(total, base=10)), size = 3) + geom_text(aes(x = log(population, base=10), y = log(total, base=10)), nudge_x = 0.05) This avoids using scale_x_continuous or it’s child function scale_x_log10. One advantage to using scale_x... is that the axes are correctly labeled. When we transform the data directly, the axis labels only show the transformed values, so 7,000,000 becomes 7.0. This could be confusing! We could update the axis labels to say “total murders (log base 10)” and “total population (log base 10)”, but that’s cumbersome. Using scale_x... is a lot more refined and easy.\n  Axis labels, legends, and titles But let’s say we did want to re-name our x-axis label. Or maybe we don’t like that the variable column name is lower-case “p”.\nAs with many things in ggplot, there are many ways to get the same result. We’ll go over one way of changing titles and labels, but know that there are many more.\nChanging axis titles We’ll use the labs(...) annotation layer to do this, which is pretty straightforward. ?labs shows us what we can change, and while it looks pretty basic, the real meat is in the ... argument, which the help says is “A list of new name-value pairs”. This means we can re-define the label on anything that is an aesthetic mapping. X and Y are aesthetic mappings, so…\np + geom_point(size = 3) + geom_text(nudge_x = 0.05) + scale_x_log10() + scale_y_log10() + labs(x = \u0026#39;Population\u0026#39;, y = \u0026#39;Total murders\u0026#39;) Now, let’s use an aesthetic mapping that generates a legend, like color, and see what labs renames:\np + geom_point(aes(color = region), size = 3) + geom_text(nudge_x = 0.05) + scale_x_log10() + scale_y_log10() + labs(x = \u0026#39;Population\u0026#39;, y = \u0026#39;Total murders\u0026#39;, color = \u0026#39;US Region\u0026#39;) We can rename the aesthetic mapping-relevant label using labs. Even if there are multiple mapped aesthetics:\np + geom_point(aes(color = region, size = total/population)) + geom_text(nudge_x = 0.05) + scale_x_log10() + scale_y_log10() + labs(x = \u0026#39;Population\u0026#39;, y = \u0026#39;Total murders\u0026#39;, color = \u0026#39;US Region\u0026#39;, size = \u0026#39;Murder rate\u0026#39;)  Titles In ?labs, we also see some things that look like titles and captions. We can include those:\np + geom_point(aes(color = region, size = total/population)) + geom_text(nudge_x = 0.05) + scale_x_log10() + scale_y_log10() + labs(x = \u0026#39;Population\u0026#39;, y = \u0026#39;Total murders\u0026#39;, color = \u0026#39;US Region\u0026#39;, size = \u0026#39;Murder rate\u0026#39;, title = \u0026#39;This is a title\u0026#39;, subtitle = \u0026#39;This is a subtitle\u0026#39;, caption = \u0026#39;This is a caption\u0026#39;, tag = \u0026#39;This is a tag\u0026#39;) Now that you know how, always label your plots with at least a title and have meaningful axis and legend labels.\n  Axis ticks In addition to the axis labels, we may want to format or change the axis tick labels (like “1e+06” above) or even where the tick marks and lines are drawn. If we don’t specify anything, the axis labels and tick marks are drawn as best as ggplot can do, but we can change this. This might be especially useful if our data has some meaningful cutoffs that aren’t found by the default, or we just don’t like where the marks fall or how they are labeled. This is easy to fix with ggplot.\nTo change the tick mark labels, we have to set the tick mark locations. Then we can set a label for each tick mark. Let’s go back to our murders data and, for simplicity, take the log transformation off the Y axis. We’ll use scale_y_continuous to tell R where to put the breaks (breaks =) and what to label the breaks. We have to give it one label for every break. Let’s say we just want a line at the 500’s and let’s say we want to (absurdly) use written numerics for each of the Y-axis lines. Since scale_y_log10 inherits from scale_y_continuous, we can just use that and add the breaks and labels:\np + geom_point(aes(color = region), size = 3) + geom_text(nudge_x = .05) + scale_x_log10() + scale_y_log10(breaks = c(0,50, 100, 500,1000,1500), labels = c(\u0026#39;Zero\u0026#39;,\u0026#39;Fifty\u0026#39;,\u0026#39;One hundred\u0026#39;,\u0026#39;Five hundred\u0026#39;,\u0026#39;One thousand\u0026#39;,\u0026#39;Fifteen hundred\u0026#39;)) + labs(x = \u0026#39;Population\u0026#39;, y = \u0026#39;Total murders\u0026#39;, color = \u0026#39;US Region\u0026#39;) We have manually set both the location and the label for the y-axis. Note that R filled in the in-between “minor” tick lines, but we can take those out. Since we are setting the location of the lines, we can do anything we want:\np + geom_point(aes(color = region), size = 3) + geom_text(nudge_x = .05) + scale_x_log10() + scale_y_log10(breaks = c(0,50, 100, 721, 1000,1500), labels = c(\u0026#39;Zero\u0026#39;,\u0026#39;Fifty\u0026#39;,\u0026#39;One hundred\u0026#39;,\u0026#39;Seven hundred twenty one\u0026#39;,\u0026#39;One thousand\u0026#39;,\u0026#39;Fifteen hundred\u0026#39;), minor_breaks = NULL) + labs(x = \u0026#39;Population\u0026#39;, y = \u0026#39;Total murders\u0026#39;, color = \u0026#39;US Region\u0026#39;) So we can now define where axis tick lines should lie and how they should be labeled.\n Additional geometries Let’s say we are happy with our axis tick locations, but we want to add a single additional line. Maybe we want to divide at 1,000,000 population (a vertical line at 1,000,000) becuase we think those over 1,000,000 are somehow different, and we want to call attention to the data around that point. As a more general example, if we were to plot, say, car accidents by age, we would maybe want to label age 21, when people can legally purchase alcohol (and subsequently cause car accidents).\nThis brings us to our first additional geometry beyond geom_point (OK, we used geom_text, but that’s more of an annotation). geom_vline lets us add a single vertical line (without aesthetic mappings). If we look at ?geom_vline we see that it requires ones aesthetic:xintercept. It also takes aesthetics like color and size, and introduces the linetype aesthetic:\np + geom_point(aes(color = region), size = 3) + geom_text(nudge_x = .05) + geom_vline(aes(xintercept = 1000000), col = \u0026#39;red\u0026#39;, size = 2, linetype = 2) + scale_x_log10() + scale_y_log10(breaks = c(0,50, 100, 721, 1000,1500), labels = c(\u0026#39;Zero\u0026#39;,\u0026#39;Fifty\u0026#39;,\u0026#39;One hundred\u0026#39;,\u0026#39;Seven hundred twenty one\u0026#39;,\u0026#39;One thousand\u0026#39;,\u0026#39;Fifteen hundred\u0026#39;), minor_breaks = NULL) + labs(x = \u0026#39;Population\u0026#39;, y = \u0026#39;Total murders\u0026#39;, color = \u0026#39;US Region\u0026#39;) Combining geometries is as easy as adding the layers with +.\ngeom_line For a good old line plot, we use the line geometry at geom_line. The help for ?geom_line tells us that we need an x and a y aesthetic (much like geom_points). Since our murders data isn’t really suited to a line graph, we’ll use a daily stock price. We’ll get this using tidyquant, which pulls stock prices from Yahoo Finance and maintains the “tidy” format. You’ll need to install.packages('tidyquant') before you run this the first time.\nlibrary(tidyquant) AAPL = tq_get(\u0026quot;AAPL\u0026quot;, from = \u0026#39;2009-01-01\u0026#39;, to = \u0026#39;2021-08-01\u0026#39;, get = \u0026#39;stock.prices\u0026#39;) head(AAPL) ## # A tibble: 6 × 8 ## symbol date open high low close volume adjusted ## \u0026lt;chr\u0026gt; \u0026lt;date\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; ## 1 AAPL 2009-01-02 3.07 3.25 3.04 3.24 746015200 2.78 ## 2 AAPL 2009-01-05 3.33 3.44 3.31 3.38 1181608400 2.90 ## 3 AAPL 2009-01-06 3.43 3.47 3.30 3.32 1289310400 2.85 ## 4 AAPL 2009-01-07 3.28 3.30 3.22 3.25 753048800 2.79 ## 5 AAPL 2009-01-08 3.23 3.33 3.22 3.31 673500800 2.84 ## 6 AAPL 2009-01-09 3.33 3.34 3.22 3.24 546845600 2.78 Now, we can plot a line graph of the Apple closing stock price over the requested date range. We want this to be a time series, so the x-axis will be the date and the y-axis will be the closing price.\nggplot(AAPL, aes(x = date, y = close)) + geom_line() + labs(x = \u0026#39;Date\u0026#39;, y = \u0026#39;Closing price\u0026#39;, title = \u0026#39;Apple stock price\u0026#39;) In geom_line, R will automatically sort on the x-variable. If you don’t want this, then geom_path will use whatever order the data is in. Either way, if you have multiple observations for the same value on the x-axis, then you’ll get something pretty messy because R will try to connect, in some order, all the points. Let’s see an example with two stocks:\nAAPLNFLX = tq_get(c(\u0026quot;AAPL\u0026quot;,\u0026quot;NFLX\u0026quot;), from = \u0026#39;2021-01-01\u0026#39;, to = \u0026#39;2021-08-01\u0026#39;, get = \u0026#39;stock.prices\u0026#39;) ## Warning: `type_convert()` only converts columns of type \u0026#39;character\u0026#39;. ## - `df` has no columns of type \u0026#39;character\u0026#39; ## Warning: `type_convert()` only converts columns of type \u0026#39;character\u0026#39;. ## - `df` has no columns of type \u0026#39;character\u0026#39; ggplot(AAPLNFLX, aes(x = date, y = close)) + geom_line() + labs(x = \u0026#39;Date\u0026#39;, y = \u0026#39;Closing price\u0026#39;, title = \u0026#39;Apple and Netflix stock price\u0026#39;) That looks kinda strange. That’s because, for every date, we have two values - the NFLX and the AAPL value, so each day has a vertical line drawn between the two prices. This is nonsense, especially since what we want to see is the history of NFLX and AAPL over time.\nAesthetics to the rescue! Remember, when we use an aesthetic mapping, we are able to separate out data by things like color or linetype. Let’s use color as the aesthetic here, and map it to the stock ticker:\nAAPLNFLX = tq_get(c(\u0026quot;AAPL\u0026quot;,\u0026quot;NFLX\u0026quot;), from = \u0026#39;2021-01-01\u0026#39;, to = \u0026#39;2021-08-01\u0026#39;, get = \u0026#39;stock.prices\u0026#39;) ## Warning: `type_convert()` only converts columns of type \u0026#39;character\u0026#39;. ## - `df` has no columns of type \u0026#39;character\u0026#39; ## Warning: `type_convert()` only converts columns of type \u0026#39;character\u0026#39;. ## - `df` has no columns of type \u0026#39;character\u0026#39; ggplot(AAPLNFLX, aes(x = date, y = close, color = symbol)) + geom_line() + labs(x = \u0026#39;Date\u0026#39;, y = \u0026#39;Closing price\u0026#39;, title = \u0026#39;Apple and Netflix stock price\u0026#39;) Well there we go! We can now see each stock price over time, with a convenient legend. Later on, we’ll learn how to change the color palatte. If we don’t necessarily want a different color but we do want to separate the lines, we can use the group aesthetic.\nAAPLNFLX = tq_get(c(\u0026quot;AAPL\u0026quot;,\u0026quot;NFLX\u0026quot;), from = \u0026#39;2021-01-01\u0026#39;, to = \u0026#39;2021-08-01\u0026#39;, get = \u0026#39;stock.prices\u0026#39;) ## Warning: `type_convert()` only converts columns of type \u0026#39;character\u0026#39;. ## - `df` has no columns of type \u0026#39;character\u0026#39; ## Warning: `type_convert()` only converts columns of type \u0026#39;character\u0026#39;. ## - `df` has no columns of type \u0026#39;character\u0026#39; ggplot(AAPLNFLX, aes(x = date, y = close, group = symbol)) + geom_line() + labs(x = \u0026#39;Date\u0026#39;, y = \u0026#39;Closing price\u0026#39;, title = \u0026#39;Apple and Netflix stock price\u0026#39;) Similar result as geom_line, but without the color difference (which makes it rather hard to tell what you’re looking at). But if we add labels using geom_label, we’ll get one label for every point, which will be overwhelming. The solution? Use some filtered data so that there is only one point for each label. But that means replacing the data in ggplot. Here’s how.\n Using different data with different geometries Just as we can use different aesthetic mappings on each geometry, we can use different data entirely. This is useful when we want one geometry to have one set of data (like the stock prices above), but another geometry to only have a subset of the data. Why would we want that? Well, we’d like to label just one part of each of the lines in our plot, right? That means we want to label a subset of the stock data.\nTo replace data in a geometry, we just need to specify the data = argument separately:\nggplot(AAPLNFLX, aes(x = date, y = close, group = symbol)) + geom_line() + geom_label(data = AAPLNFLX %\u0026gt;% group_by(symbol) %\u0026gt;% slice(100), aes(label = symbol), nudge_y = 20) + labs(x = \u0026#39;Date\u0026#39;, y = \u0026#39;Closing price\u0026#39;, title = \u0026#39;Apple and Netflix stock price\u0026#39;) In geom_label, we specified we wanted the 100th observation from each symbol to be the label location. Then, we nudged it up along y by 20 so that it’s clear of the line.\nR also has a very useful ggrepel package that gives us geom_label_repel which takes care of the nudging for us, even in complicated situations (lots of points, lines, etc.). It does a decent job here of moving the label to a point where it doesn’t cover a lot of data.\nlibrary(ggrepel) ggplot(AAPLNFLX, aes(x = date, y = close, group = symbol)) + geom_line() + geom_label_repel(data = AAPLNFLX %\u0026gt;% group_by(symbol) %\u0026gt;% slice(100), aes(label = symbol)) + labs(x = \u0026#39;Date\u0026#39;, y = \u0026#39;Closing price\u0026#39;, title = \u0026#39;Apple and Netflix stock price\u0026#39;) Now, we don’t lose a lot of space to a legend, and we haven’t had to use color to separate the stock symbols.\n Multiple geometries Since this section is about adding geometries, we can combine points and lines. Since lines connect points, it will look like a giant connect-the-dots.\nlibrary(ggrepel) ggplot(AAPLNFLX, aes(x = date, y = close, group = symbol)) + geom_line() + geom_point() + geom_label_repel(data = AAPLNFLX %\u0026gt;% group_by(symbol) %\u0026gt;% slice(100), aes(label = symbol)) + labs(x = \u0026#39;Date\u0026#39;, y = \u0026#39;Closing price\u0026#39;, title = \u0026#39;Apple and Netflix stock price\u0026#39;)   Try it! TRY IT\nStart by loading the dplyr and ggplot2 library as well as the murders and heights data.\nlibrary(dplyr) library(ggplot2) library(dslabs) data(heights) data(murders) With ggplot2 plots can be saved as objects. For example we can associate a dataset with a plot object like this  p \u0026lt;- ggplot(data = murders) Because data is the first argument we don’t need to spell it out\np \u0026lt;- ggplot(murders) and we can also use the pipe:\np \u0026lt;- murders %\u0026gt;% ggplot() What is class of the object p?\nRemember that to print an object you can use the command print or simply type the object. Print the object p defined in exercise one and describe what you see.  Nothing happens. A blank slate plot. A scatterplot. A histogram.  Using the pipe %\u0026gt;%, create an object p but this time associated with the heights dataset instead of the murders dataset.\n What is the class of the object p you have just created?\n Now we are going to add a layer and the corresponding aesthetic mappings. For the murders data we plotted total murders versus population sizes. Explore the murders data frame to remind yourself what are the names for these two variables and select the correct answer. Hint: Look at ?murders.\n  state and abb. total_murders and population_size. total and population. murders and size.  To create the scatterplot we add a layer with geom_point. The aesthetic mappings require us to define the x-axis and y-axis variables, respectively. So the code looks like this:  murders %\u0026gt;% ggplot(aes(x = , y = )) + geom_point() except we have to define the two variables x and y. Fill this out with the correct variable names.\nNote that if we don’t use argument names, we can obtain the same plot by making sure we enter the variable names in the right order like this:  murders %\u0026gt;% ggplot(aes(population, total)) + geom_point() Remake the plot but now with total in the x-axis and population in the y-axis.\nIf instead of points we want to add text, we can use the geom_text() or geom_label() geometries. The following code  murders %\u0026gt;% ggplot(aes(population, total)) + geom_label() will give us the error message: Error: geom_label requires the following missing aesthetics: label\nWhy is this?\nWe need to map a character to each point through the label argument in aes. We need to let geom_label know what character to use in the plot. The geom_label geometry does not require x-axis and y-axis values. geom_label is not a ggplot2 command.  Rewrite the code above to use abbreviation as the label through aes\n Change the color of the labels to blue. How will we do this?\n  Adding a column called blue to murders. Because each label needs a different color we map the colors through aes. Use the color argument in ggplot. Because we want all colors to be blue, we do not need to map colors, just use the color argument in geom_label.  Rewrite the code above to make the labels blue.\n Now suppose we want to use color to represent the different regions. In this case which of the following is most appropriate:\n  Adding a column called color to murders with the color we want to use. Because each label needs a different color we map the colors through the color argument of aes . Use the color argument in ggplot. Because we want all colors to be blue, we do not need to map colors, just use the color argument in geom_label.  Rewrite the code above to make the labels’ color be determined by the state’s region.\n Now we are going to change the x-axis to a log scale to account for the fact the distribution of population is skewed. Let’s start by defining an object p holding the plot we have made up to now\n  p \u0026lt;- murders %\u0026gt;% ggplot(aes(population, total, label = abb, color = region)) + geom_label() To change the y-axis to a log scale we learned about the scale_x_log10() function. Add this layer to the object p to change the scale and render the plot.\nRepeat the previous exercise but now change both axes to be in the log scale.\n Now edit the code above to add the title “Gun murder data” to the plot. Hint: use the labs function or the ggtitle function.\n      https://ggplot2.tidyverse.org/↩︎\n http://www.springer.com/us/book/9780387245447↩︎\n https://github.com/rstudio/cheatsheets↩︎\n https://github.com/rstudio/cheatsheets/blob/master/LICENSE↩︎\n   ","date":1631577600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1631718784,"objectID":"267a7446c3b4fe31bb41b58ba3b49b11","permalink":"https://ssc442.netlify.app/content/03-content/","publishdate":"2021-09-14T00:00:00Z","relpermalink":"/content/03-content/","section":"content","summary":"Readings  Guiding Questions  ggplot2  The components of a graph ggplot objects Geometries (briefly) Aesthetic mappings  Aesthetics in general Now, back to aesthetic mappings Legends for aesthetics  Annotation Layers  Global versus local aesthetic mappings  Try it! Some Quirky Stuff Scales and transformations  Log transformations Transforming data vs. transforming using scale_...  Axis labels, legends, and titles  Changing axis titles Titles  Axis ticks Additional geometries  geom_line Using different data with different geometries Multiple geometries  Try it!","tags":null,"title":"Effective Visualizations","type":"docs"},{"authors":null,"categories":null,"content":"   Readings  Guiding Question  Final Projects  Teams  Randomness and Data Analytics  Learning From Data Formalization The Target Function Why Estimate an Unknown Function? The Parable of the Marbles Outside the Data Hoeffding’s Inequality An example of Hoeffding’s Inequality  The tidyverse  Tidy data Manipulating data frames  Adding a column with mutate Subsetting with filter Selecting columns with select  The pipe: %\u0026gt;% Summarizing data  summarize pull Group then summarize with group_by  Sorting data frames  Nested sorting The top \\(n\\)  Tibbles  Tibbles display better Subsets of tibbles are tibbles Tibbles can have complex entries Tibbles can be grouped Create a tibble using tibble instead of data.frame  The dot operator do The purrr package Tidyverse conditionals  case_when between  Lecture Video    Readings  This page. Chapter 1 of Introduction to Statistical Learning, available here. Optional: The “Tidy Your Data” tutorial on Rstudio Clould Primers  Guiding Question For future lectures, the guiding questions will be more pointed and at a higher level to help steer your thinking. Here, we want to ensure you remember some basics and accordingly the questions are straightforward.\n Why do we want tidy data? What are the challenges associated with shaping things into a tidy format?    Final Projects Your final is a group project. Accordingly, you need to start planning soon.\nTo aid in your planning, here are the required elements of your project (note: the assignment that currently exists on this site, if you find it, is old and will change a lot between now and next week).\nYou must find existing data to analyze. Aggregating and merging data from multiple sources is encouraged. You must visualize 3 intersting features of that data. You must come up with some analysis—using tools from this course—which relates your data to either a prediction or a policy conclusion. You must think critically about your analysis and be able to identify potential issues/ You must present your analysis as if presenting to a C-suite executive.  If you have any additional questions, you can find some more information in the Assignments section of this website.\nTeams You must form teams of 3-4 people. I will send out a survey link via email to better understand your teams. If you are in a group (and everyone agrees you’re in a group) then only one of you needs to respond to the survey.\nIf you are not listed on another person’s team and do not respond to the survey, I will interpret this as evidence that you have opted to not form a team—or you like adventure! Accordingly, you will be automatically added to the “willing to be randomly assigned” pool and will be paired with others in the class.\nMore Information on Teams  You should strongly consider coordinating your work via Github. Your team will earn the same scores on all projects. (Note that projects are not labs / writings. They are the shorter two projects and the final project.) Teams will submit only one write-up for the mini-projects and the final.  To combat additional freeloading, we will use a reporting system. We’ll discuss that a bit later.\n   Randomness and Data Analytics And the fabulous importance of probabilistic inference…\nThis lecture is very “high-level,” which means it is talking about abstract concepts. It is also quite important. We want to discuss why we eventually will need ot utilize tons of difficult mathematics. Why do we care so much about hypothesis tests and the like? Moreover, we can highlight why we want our data structured to behave nicely.\nLearning From Data The following are the baisc requirements for statistical learning\nA pattern exists.\n This pattern is not easily expressed in a closed mathematical form.\n You have data.\n   Formalization We think of our outcome-of-interest as a reponse or target that we wish to predict or wish to learn something about.\nWe generically refer to the response as \\(Y\\)\nOther aspects of the data are known as features, inputs, predictors, or regressors. We call one of these \\(X_i\\).\n The subscript \\(i\\) indicates that we have an \\(X\\) realized for every individual in our data  We can refer to the input vector collectively as:\n\\[X = \\begin{bmatrix} x_{11} \u0026amp; x_{12} \\\\ x_{21} \u0026amp; x_{22} \\\\ \\vdots \u0026amp; \\vdots \\\\ x_{N1} \u0026amp; x_{N2} \\end{bmatrix}\\]\nWe are seeking some unknown function that maps \\(X\\) to \\(Y\\)\nPut another way, we are seeking to explain \\(Y\\) as follows:\n\\[Y = f(X) + e\\]\n The Target Function We call the function \\(f: \\mathcal{X} \\rightarrow \\mathcal{Y}\\) the target function\nHow do we find the function? We don’t! We get as close as we can, though:\n Observe data \\((\\mathbf{x}_1, y_1), \\cdots, (\\mathbf{x}_N, y_N)\\)\n Use some algorithm to approximate \\(f\\)\n Produce final hypothesis function \\(g \\approx f\\)\n Evaluate how well \\(g\\) approximates \\(f\\) and iterate as needed.\n   Why Estimate an Unknown Function? With a good estimate of \\(f\\) we can make predictions of \\(Y\\) at new points \\(X = x\\)\nWe can also understand which components of \\(X = (X_1, X_2, \\cdots, X_m)\\) are important in explaining \\(Y\\), and which are (potentially) irrelevant\n e.g. GDP and yearsindustrialized have a big impact on emissions but hydroutilization typically does not.  Depending on the complexity of \\(f\\), we may be able to meaningfully understand how each component of \\(X\\) affects \\(Y\\).\n(But we should be careful about assigning causal interpretations, more on this later)\n The Parable of the Marbles Imagine a bag of marbles with two types of marbles: ♣️ and ♦️.\nWe are going to pick a sample of \\(n\\) marbles (with replacement).\nWe want to learn something about \\(\\mu\\), the objective probability to pick a ♣️.\nIn addition to defining the objective probability of picking a ♣️, we have an observed fraction \\(\\eta\\), which will define as the fraction of ♣️ in the sample.\nQuestion: Can we say anything exact and for-sure about \\(\\mu\\) (outside the data) after observing \\(\\eta\\) (the data)?\n No. It is possible for the sample to be all ♣️, ♣️, ♣️, ♣️, ♣️ even when the bag is is 50/50 ♦️\n No matter what we draw, we can’t (based on that draw alone) eliminate the possibility of drawing a ♦️.\n And unless we assume that the only two values in the world are ♦️ and ♣️, we can’t rule out 💩1\n   Question: Then why do we do things like polling (e.g. to predict the outcome of a presidential election)?\n The bad case, that we draw something that has is completely misleading, is possible but not probable.   Outside the Data Put another way, since \\(f\\) is unknown, it can take on any value outside the data we have, no matter how large the data.\n This is called No Free Lunch  You cannot know anything for sure about \\(f\\) outside the data without making assumptions.\nIs there any hope to know anything about \\(f\\) outside the data set without making assumptions about \\(f\\)?\nYes, if we are willing to give up the “for sure”\n Hoeffding’s Inequality Hoeffding’s Inequality states, loosely, that \\(\\eta\\) cannot be too far from \\(\\mu\\).\n\\[\\mathbb{P}\\left[|\\eta - \\mu| \u0026gt; \\epsilon \\right] \\leq 2e^{-2\\epsilon^2n}\\] \\(\\eta \\approx \\mu\\) is called probably approximately correct (PAC) learning.\n An example of Hoeffding’s Inequality Example: n = 1,000. Draw a sample and observe \\(\\eta\\)\n $$99% of the time, \\(\\mu - .05 \\leq \\eta \\leq \\mu+.05\\)\n This is implied by setting \\(\\epsilon = 0.05\\) and using \\(n=1,000\\)  99.9999996% of the time \\(\\mu - .10 \\leq \\eta \\leq \\mu + .10\\%\\)\n  What does this mean?\nIf I repeatedly pick a sample of size 1,000, observe \\(\\eta\\) and claim that \\(\\mu \\in \\left[\\eta - .05, \\eta + .05\\right]\\) (or that the error bar is \\(\\pm 0.05\\)), I will be right 99% of the time.\nOn any particular sample you may be wrong, but not often.\nNOTE\nThis week’s content is split into two “halves”: the critical data manipulation information contained below and a more-entertaining discussion of visualization included in the Exercises.\n   The tidyverse In the first weeks’ content (or maybe that is week zero?), we demonstrated how to manipulate vectors by reordering and subsetting them through indexing. However, once we start more advanced analyses, the preferred unit for data storage is not the vector but the data frame. In this lecture, we learn to work directly with data frames, which greatly facilitate the organization of information. We will be using data frames for the majority of this class and you will use them for the majority of your data science life (however long that might be). We will focus on a specific data format referred to as tidy and on specific collection of packages that are particularly helpful for working with tidy data referred to as the tidyverse.\nWe can load all the tidyverse packages at once by installing and loading the tidyverse package:2\nlibrary(tidyverse) We will learn how to implement the tidyverse approach throughout the book, but before delving into the details, in this chapter we introduce some of the most widely used tidyverse functionality, starting with the dplyr package for manipulating data frames and the purrr package for working with functions. Note that the tidyverse also includes a graphing package, ggplot2, which we introduce later in Chapter ?? in the Data Visualization part of the book; the readr package discussed in Chapter ??; and many others. In this chapter, we first introduce the concept of tidy data and then demonstrate how we use the tidyverse to work with data frames in this format.\nTidy data We say that a data table is in tidy format if each row represents one observation and columns represent the different variables available for each of these observations. The murders dataset is an example of a tidy data frame.\nlibrary(dslabs) data(murders) head(murders) ## state abb region population total ## 1 Alabama AL South 4779736 135 ## 2 Alaska AK West 710231 19 ## 3 Arizona AZ West 6392017 232 ## 4 Arkansas AR South 2915918 93 ## 5 California CA West 37253956 1257 ## 6 Colorado CO West 5029196 65 Each row represent a state with each of the five columns providing a different variable related to these states: name, abbreviation, region, population, and total murders.\nTo see how the same information can be provided in different formats, consider the following example:\nlibrary(dslabs) data(\u0026quot;gapminder\u0026quot;) tidy_data \u0026lt;- gapminder %\u0026gt;% filter(country %in% c(\u0026quot;South Korea\u0026quot;, \u0026quot;Germany\u0026quot;) \u0026amp; !is.na(fertility)) %\u0026gt;% select(country, year, fertility) head(tidy_data, 6) ## country year fertility ## 1 Germany 1960 2.41 ## 2 South Korea 1960 6.16 ## 3 Germany 1961 2.44 ## 4 South Korea 1961 5.99 ## 5 Germany 1962 2.47 ## 6 South Korea 1962 5.79 This tidy dataset provides fertility rates for two countries across the years. This is a tidy dataset because each row presents one observation with the three variables being country, year, and fertility rate. However, this dataset originally came in another format and was reshaped for the dslabs package. Originally, the data was in the following format:\n## country 1960 1961 1962 ## 1 Germany 2.41 2.44 2.47 ## 2 South Korea 6.16 5.99 5.79 The same information is provided, but there are two important differences in the format: 1) each row includes several observations and 2) one of the variables, year, is stored in the header. For the tidyverse packages to be optimally used, data need to be reshaped into tidy format, which you will learn to do throughout this course. For starters, though, we will use example datasets that are already in tidy format.\nAlthough not immediately obvious, as you go through the book you will start to appreciate the advantages of working in a framework in which functions use tidy formats for both inputs and outputs. You will see how this permits the data analyst to focus on more important aspects of the analysis rather than the format of the data.\nTRY IT\nExamine the built-in dataset co2. Which of the following is true:  co2 is tidy data: it has one year for each row. co2 is not tidy: we need at least one column with a character vector. co2 is not tidy: it is a matrix instead of a data frame. co2 is not tidy: to be tidy we would have to wrangle it to have three columns (year, month and value), then each co2 observation would have a row.  Examine the built-in dataset ChickWeight. Which of the following is true:  ChickWeight is not tidy: each chick has more than one row. ChickWeight is tidy: each observation (a weight) is represented by one row. The chick from which this measurement came is one of the variables. ChickWeight is not tidy: we are missing the year column. ChickWeight is tidy: it is stored in a data frame.  Examine the built-in dataset BOD. Which of the following is true:  BOD is not tidy: it only has six rows. BOD is not tidy: the first column is just an index. BOD is tidy: each row is an observation with two values (time and demand) BOD is tidy: all small datasets are tidy by definition.  Which of the following built-in datasets is tidy (you can pick more than one):  BJsales EuStockMarkets DNase Formaldehyde Orange UCBAdmissions    Manipulating data frames The dplyr package from the tidyverse introduces functions that perform some of the most common operations when working with data frames and uses names for these functions that are relatively easy to remember. For instance, to change the data table by adding a new column, we use mutate. To filter the data table to a subset of rows, we use filter. Finally, to subset the data by selecting specific columns, we use select.\nAdding a column with mutate We want all the necessary information for our analysis to be included in the data table. So the first task is to add the murder rates to our murders data frame. The function mutate takes the data frame as a first argument and the name and values of the variable as a second argument using the convention name = values. So, to add murder rates, we use:\nlibrary(dslabs) data(\u0026quot;murders\u0026quot;) murders \u0026lt;- mutate(murders, rate = total / population * 100000) Notice that here we used total and population inside the function, which are objects that are not defined in our workspace. But why don’t we get an error?\nThis is one of dplyr’s main features. Functions in this package, such as mutate, know to look for variables in the data frame provided in the first argument. In the call to mutate above, total will have the values in murders$total. This approach makes the code much more readable.\nWe can see that the new column is added:\nhead(murders) ## state abb region population total rate ## 1 Alabama AL South 4779736 135 2.824424 ## 2 Alaska AK West 710231 19 2.675186 ## 3 Arizona AZ West 6392017 232 3.629527 ## 4 Arkansas AR South 2915918 93 3.189390 ## 5 California CA West 37253956 1257 3.374138 ## 6 Colorado CO West 5029196 65 1.292453 Although we have overwritten the original murders object, this does not change the object that loaded with data(murders). If we load the murders data again, the original will overwrite our mutated version.\n Subsetting with filter Now suppose that we want to filter the data table to only show the entries for which the murder rate is lower than 0.71. To do this we use the filter function, which takes the data table as the first argument and then the conditional statement as the second. Like mutate, we can use the unquoted variable names from murders inside the function and it will know we mean the columns and not objects in the workspace.\nfilter(murders, rate \u0026lt;= 0.71) ## state abb region population total rate ## 1 Hawaii HI West 1360301 7 0.5145920 ## 2 Iowa IA North Central 3046355 21 0.6893484 ## 3 New Hampshire NH Northeast 1316470 5 0.3798036 ## 4 North Dakota ND North Central 672591 4 0.5947151 ## 5 Vermont VT Northeast 625741 2 0.3196211  Selecting columns with select Although our data table only has six columns, some data tables include hundreds. If we want to view just a few, we can use the dplyr select function. In the code below we select three columns, assign this to a new object and then filter the new object:\nnew_table \u0026lt;- select(murders, state, region, rate) filter(new_table, rate \u0026lt;= 0.71) ## state region rate ## 1 Hawaii West 0.5145920 ## 2 Iowa North Central 0.6893484 ## 3 New Hampshire Northeast 0.3798036 ## 4 North Dakota North Central 0.5947151 ## 5 Vermont Northeast 0.3196211 In the call to select, the first argument murders is an object, but state, region, and rate are variable names.\nTRY IT\nLoad the dplyr package and the murders dataset.  library(dplyr) library(dslabs) data(murders) You can add columns using the dplyr function mutate. This function is aware of the column names and inside the function you can call them unquoted:\nmurders \u0026lt;- mutate(murders, population_in_millions = population / 10^6) We can write population rather than murders$population. The function mutate knows we are grabbing columns from murders.\nUse the function mutate to add a murders column named rate with the per 100,000 murder rate as in the example code above. Make sure you redefine murders as done in the example code above ( murders \u0026lt;- [your code]) so we can keep using this variable.\nIf rank(x) gives you the ranks of x from lowest to highest, rank(-x) gives you the ranks from highest to lowest. Use the function mutate to add a column rank containing the rank, from highest to lowest murder rate. Make sure you redefine murders so we can keep using this variable.\n With dplyr, we can use select to show only certain columns. For example, with this code we would only show the states and population sizes:\n  select(murders, state, population) %\u0026gt;% head() Use select to show the state names and abbreviations in murders. Do not redefine murders, just show the results.\nThe dplyr function filter is used to choose specific rows of the data frame to keep. Unlike select which is for columns, filter is for rows. For example, you can show just the New York row like this:  filter(murders, state == \u0026quot;New York\u0026quot;) You can use other logical vectors to filter rows.\nUse filter to show the top 5 states with the highest murder rates. After we add murder rate and rank, do not change the murders dataset, just show the result. Remember that you can filter based on the rank column.\nWe can remove rows using the != operator. For example, to remove Florida, we would do this:  no_florida \u0026lt;- filter(murders, state != \u0026quot;Florida\u0026quot;) Create a new data frame called no_south that removes states from the South region. How many states are in this category? You can use the function nrow for this.\nWe can also use %in% to filter with dplyr. You can therefore see the data from New York and Texas like this:  filter(murders, state %in% c(\u0026quot;New York\u0026quot;, \u0026quot;Texas\u0026quot;)) Create a new data frame called murders_nw with only the states from the Northeast and the West. How many states are in this category?\nSuppose you want to live in the Northeast or West and want the murder rate to be less than 1. We want to see the data for the states satisfying these options. Note that you can use logical operators with filter. Here is an example in which we filter to keep only small states in the Northeast region.  filter(murders, population \u0026lt; 5000000 \u0026amp; region == \u0026quot;Northeast\u0026quot;) Make sure murders has been defined with rate and rank and still has all states. Create a table called my_states that contains rows for states satisfying both the conditions: it is in the Northeast or West and the murder rate is less than 1. Use select to show only the state name, the rate, and the rank.\n   The pipe: %\u0026gt;% With dplyr we can perform a series of operations, for example select and then filter, by sending the results of one function to another using what is called the pipe operator: %\u0026gt;%. Some details are included below.\nWe wrote code above to show three variables (state, region, rate) for states that have murder rates below 0.71. To do this, we defined the intermediate object new_table. In dplyr we can write code that looks more like a description of what we want to do without intermediate objects:\n\\[ \\mbox{original data } \\rightarrow \\mbox{ select } \\rightarrow \\mbox{ filter } \\]\nFor such an operation, we can use the pipe %\u0026gt;%. The code looks like this:\nmurders %\u0026gt;% select(state, region, rate) %\u0026gt;% filter(rate \u0026lt;= 0.71) ## state region rate ## 1 Hawaii West 0.5145920 ## 2 Iowa North Central 0.6893484 ## 3 New Hampshire Northeast 0.3798036 ## 4 North Dakota North Central 0.5947151 ## 5 Vermont Northeast 0.3196211 This line of code is equivalent to the two lines of code above. What is going on here?\nIn general, the pipe sends the result of the left side of the pipe to be the first argument of the function on the right side of the pipe. Here is a very simple example:\n16 %\u0026gt;% sqrt() ## [1] 4 We can continue to pipe values along:\n16 %\u0026gt;% sqrt() %\u0026gt;% log2() ## [1] 2 The above statement is equivalent to log2(sqrt(16)).\nRemember that the pipe sends values to the first argument, so we can define other arguments as if the first argument is already defined:\n16 %\u0026gt;% sqrt() %\u0026gt;% log(base = 2) ## [1] 2 Therefore, when using the pipe with data frames and dplyr, we no longer need to specify the required first argument since the dplyr functions we have described all take the data as the first argument. In the code we wrote:\nmurders %\u0026gt;% select(state, region, rate) %\u0026gt;% filter(rate \u0026lt;= 0.71) murders is the first argument of the select function, and the new data frame (formerly new_table) is the first argument of the filter function.\nNote that the pipe works well with functions where the first argument is the input data. Functions in tidyverse packages like dplyr have this format and can be used easily with the pipe.\nTRY IT\nThe pipe %\u0026gt;% can be used to perform operations sequentially without having to define intermediate objects. Start by redefining murder to include rate and rank.  murders \u0026lt;- mutate(murders, rate = total / population * 100000, rank = rank(-rate)) In the solution to the previous exercise, we did the following:\nmy_states \u0026lt;- filter(murders, region %in% c(\u0026quot;Northeast\u0026quot;, \u0026quot;West\u0026quot;) \u0026amp; rate \u0026lt; 1) select(my_states, state, rate, rank) The pipe %\u0026gt;% permits us to perform both operations sequentially without having to define an intermediate variable my_states. We therefore could have mutated and selected in the same line like this:\nmutate(murders, rate = total / population * 100000, rank = rank(-rate)) %\u0026gt;% select(state, rate, rank) Notice that select no longer has a data frame as the first argument. The first argument is assumed to be the result of the operation conducted right before the %\u0026gt;%.\nRepeat the previous exercise, but now instead of creating a new object, show the result and only include the state, rate, and rank columns. Use a pipe %\u0026gt;% to do this in just one line.\nReset murders to the original table by using data(murders). Use a pipe to create a new data frame called my_states that considers only states in the Northeast or West which have a murder rate lower than 1, and contains only the state, rate and rank columns. The pipe should also have four components separated by three %\u0026gt;%. The code should look something like this:  my_states \u0026lt;- murders %\u0026gt;% mutate SOMETHING %\u0026gt;% filter SOMETHING %\u0026gt;% select SOMETHING   Summarizing data An important part of exploratory data analysis is summarizing data. The average and standard deviation are two examples of widely used summary statistics. More informative summaries can often be achieved by first splitting data into groups. In this section, we cover two new dplyr verbs that make these computations easier: summarize and group_by. We learn to access resulting values using the pull function.\nsummarize The summarize function in dplyr provides a way to compute summary statistics with intuitive and readable code. We start with a simple example based on heights. The heights dataset includes heights and sex reported by students in an in-class survey.\nlibrary(dplyr) library(dslabs) data(heights) The following code computes the average and standard deviation for females:\ns \u0026lt;- heights %\u0026gt;% filter(sex == \u0026quot;Female\u0026quot;) %\u0026gt;% summarize(average = mean(height), standard_deviation = sd(height)) s ## average standard_deviation ## 1 64.93942 3.760656 This takes our original data table as input, filters it to keep only females, and then produces a new summarized table with just the average and the standard deviation of heights. We get to choose the names of the columns of the resulting table. For example, above we decided to use average and standard_deviation, but we could have used other names just the same.\nBecause the resulting table stored in s is a data frame, we can access the components with the accessor $:\ns$average ## [1] 64.93942 s$standard_deviation ## [1] 3.760656 As with most other dplyr functions, summarize is aware of the variable names and we can use them directly. So when inside the call to the summarize function we write mean(height), the function is accessing the column with the name “height” and then computing the average of the resulting numeric vector. We can compute any other summary that operates on vectors and returns a single value. For example, we can add the median, minimum, and maximum heights like this:\nheights %\u0026gt;% filter(sex == \u0026quot;Female\u0026quot;) %\u0026gt;% summarize(median = median(height), minimum = min(height), maximum = max(height)) ## median minimum maximum ## 1 64.98031 51 79 We can obtain these three values with just one line using the quantile function: for example, quantile(x, c(0,0.5,1)) returns the min (0th percentile), median (50th percentile), and max (100th percentile) of the vector x. However, if we attempt to use a function like this that returns two or more values inside summarize:\nheights %\u0026gt;% filter(sex == \u0026quot;Female\u0026quot;) %\u0026gt;% summarize(range = quantile(height, c(0, 0.5, 1))) we will receive an error: Error: expecting result of length one, got : 2. With the function summarize, we can only call functions that return a single value. In Section ??, we will learn how to deal with functions that return more than one value.\nFor another example of how we can use the summarize function, let’s compute the average murder rate for the United States. Remember our data table includes total murders and population size for each state and we have already used dplyr to add a murder rate column:\nmurders \u0026lt;- murders %\u0026gt;% mutate(rate = total/population*100000) Remember that the US murder rate is not the average of the state murder rates:\nsummarize(murders, mean(rate)) ## mean(rate) ## 1 2.779125 This is because in the computation above the small states are given the same weight as the large ones. The US murder rate is the total number of murders in the US divided by the total US population. So the correct computation is:\nus_murder_rate \u0026lt;- murders %\u0026gt;% summarize(rate = sum(total) / sum(population) * 100000) us_murder_rate ## rate ## 1 3.034555 This computation counts larger states proportionally to their size which results in a larger value.\n pull The us_murder_rate object defined above represents just one number. Yet we are storing it in a data frame:\nclass(us_murder_rate) ## [1] \u0026quot;data.frame\u0026quot; since, as most dplyr functions, summarize always returns a data frame.\nThis might be problematic if we want to use this result with functions that require a numeric value. Here we show a useful trick for accessing values stored in data when using pipes: when a data object is piped that object and its columns can be accessed using the pull function. To understand what we mean take a look at this line of code:\nus_murder_rate %\u0026gt;% pull(rate) ## [1] 3.034555 This returns the value in the rate column of us_murder_rate making it equivalent to us_murder_rate$rate.\nTo get a number from the original data table with one line of code we can type:\nus_murder_rate \u0026lt;- murders %\u0026gt;% summarize(rate = sum(total) / sum(population) * 100000) %\u0026gt;% pull(rate) us_murder_rate ## [1] 3.034555 which is now a numeric:\nclass(us_murder_rate) ## [1] \u0026quot;numeric\u0026quot;  Group then summarize with group_by A common operation in data exploration is to first split data into groups and then compute summaries for each group. For example, we may want to compute the average and standard deviation for men’s and women’s heights separately. The group_by function helps us do this.\nIf we type this:\nheights %\u0026gt;% group_by(sex) ## # A tibble: 1,050 × 2 ## # Groups: sex [2] ## sex height ## \u0026lt;fct\u0026gt; \u0026lt;dbl\u0026gt; ## 1 Male 75 ## 2 Male 70 ## 3 Male 68 ## 4 Male 74 ## 5 Male 61 ## 6 Female 65 ## 7 Female 66 ## 8 Female 62 ## 9 Female 66 ## 10 Male 67 ## # … with 1,040 more rows The result does not look very different from heights, except we see Groups: sex [2] when we print the object. Although not immediately obvious from its appearance, this is now a special data frame called a grouped data frame, and dplyr functions, in particular summarize, will behave differently when acting on this object. Conceptually, you can think of this table as many tables, with the same columns but not necessarily the same number of rows, stacked together in one object. When we summarize the data after grouping, this is what happens:\nheights %\u0026gt;% group_by(sex) %\u0026gt;% summarize(average = mean(height), standard_deviation = sd(height)) ## # A tibble: 2 × 3 ## sex average standard_deviation ## \u0026lt;fct\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; ## 1 Female 64.9 3.76 ## 2 Male 69.3 3.61 The summarize function applies the summarization to each group separately.\nFor another example, let’s compute the median murder rate in the four regions of the country:\nmurders %\u0026gt;% group_by(region) %\u0026gt;% summarize(median_rate = median(rate)) ## # A tibble: 4 × 2 ## region median_rate ## \u0026lt;fct\u0026gt; \u0026lt;dbl\u0026gt; ## 1 Northeast 1.80 ## 2 South 3.40 ## 3 North Central 1.97 ## 4 West 1.29   Sorting data frames When examining a dataset, it is often convenient to sort the table by the different columns. We know about the order and sort function, but for ordering entire tables, the dplyr function arrange is useful. For example, here we order the states by population size:\nmurders %\u0026gt;% arrange(population) %\u0026gt;% head() ## state abb region population total rate ## 1 Wyoming WY West 563626 5 0.8871131 ## 2 District of Columbia DC South 601723 99 16.4527532 ## 3 Vermont VT Northeast 625741 2 0.3196211 ## 4 North Dakota ND North Central 672591 4 0.5947151 ## 5 Alaska AK West 710231 19 2.6751860 ## 6 South Dakota SD North Central 814180 8 0.9825837 With arrange we get to decide which column to sort by. To see the states by murder rate, from lowest to highest, we arrange by rate instead:\nmurders %\u0026gt;% arrange(rate) %\u0026gt;% head() ## state abb region population total rate ## 1 Vermont VT Northeast 625741 2 0.3196211 ## 2 New Hampshire NH Northeast 1316470 5 0.3798036 ## 3 Hawaii HI West 1360301 7 0.5145920 ## 4 North Dakota ND North Central 672591 4 0.5947151 ## 5 Iowa IA North Central 3046355 21 0.6893484 ## 6 Idaho ID West 1567582 12 0.7655102 Note that the default behavior is to order in ascending order. In dplyr, the function desc transforms a vector so that it is in descending order. To sort the table in descending order, we can type:\nmurders %\u0026gt;% arrange(desc(rate)) Nested sorting If we are ordering by a column with ties, we can use a second column to break the tie. Similarly, a third column can be used to break ties between first and second and so on. Here we order by region, then within region we order by murder rate:\nmurders %\u0026gt;% arrange(region, rate) %\u0026gt;% head() ## state abb region population total rate ## 1 Vermont VT Northeast 625741 2 0.3196211 ## 2 New Hampshire NH Northeast 1316470 5 0.3798036 ## 3 Maine ME Northeast 1328361 11 0.8280881 ## 4 Rhode Island RI Northeast 1052567 16 1.5200933 ## 5 Massachusetts MA Northeast 6547629 118 1.8021791 ## 6 New York NY Northeast 19378102 517 2.6679599  The top \\(n\\) In the code above, we have used the function head to avoid having the page fill up with the entire dataset. If we want to see a larger proportion, we can use the top_n function. This function takes a data frame as it’s first argument, the number of rows to show in the second, and the variable to filter by in the third. Here is an example of how to see the top 5 rows:\nmurders %\u0026gt;% top_n(5, rate) ## state abb region population total rate ## 1 District of Columbia DC South 601723 99 16.452753 ## 2 Louisiana LA South 4533372 351 7.742581 ## 3 Maryland MD South 5773552 293 5.074866 ## 4 Missouri MO North Central 5988927 321 5.359892 ## 5 South Carolina SC South 4625364 207 4.475323 Note that rows are not sorted by rate, only filtered. If we want to sort, we need to use arrange. Note that if the third argument is left blank, top_n filters by the last column.\nTRY IT\nFor these exercises, we will be using the data from the survey collected by the United States National Center for Health Statistics (NCHS). This center has conducted a series of health and nutrition surveys since the 1960’s. Starting in 1999, about 5,000 individuals of all ages have been interviewed every year and they complete the health examination component of the survey. Part of the data is made available via the NHANES package. Once you install the NHANES package, you can load the data like this:\nlibrary(NHANES) data(NHANES) The NHANES data has many missing values. The mean and sd functions in R will return NA if any of the entries of the input vector is an NA. Here is an example:\nlibrary(dslabs) data(na_example) mean(na_example) ## [1] NA sd(na_example) ## [1] NA To ignore the NAs we can use the na.rm argument:\nmean(na_example, na.rm = TRUE) ## [1] 2.301754 sd(na_example, na.rm = TRUE) ## [1] 1.22338 Let’s now explore the NHANES data.\nWe will provide some basic facts about blood pressure. First let’s select a group to set the standard. We will use 20-to-29-year-old females. AgeDecade is a categorical variable with these ages. Note that the category is coded like ” 20-29”, with a space in front! What is the average and standard deviation of systolic blood pressure as saved in the BPSysAve variable? Save it to a variable called ref.  Hint: Use filter and summarize and use the na.rm = TRUE argument when computing the average and standard deviation. You can also filter the NA values using filter.\nUsing a pipe, assign the average to a numeric variable ref_avg. Hint: Use the code similar to above and then pull.\n Now report the min and max values for the same group.\n Compute the average and standard deviation for females, but for each age group separately rather than a selected decade as in question 1. Note that the age groups are defined by AgeDecade. Hint: rather than filtering by age and gender, filter by Gender and then use group_by.\n Repeat exercise 4 for males.\n We can actually combine both summaries for exercises 4 and 5 into one line of code. This is because group_by permits us to group by more than one variable. Obtain one big summary table using group_by(AgeDecade, Gender).\n For males between the ages of 40-49, compare systolic blood pressure across race as reported in the Race1 variable. Order the resulting table from lowest to highest average systolic blood pressure.\n     Tibbles Tidy data must be stored in data frames. We introduced the data frame in Section ?? and have been using the murders data frame throughout the book. In Section ?? we introduced the group_by function, which permits stratifying data before computing summary statistics. But where is the group information stored in the data frame?\nmurders %\u0026gt;% group_by(region) ## # A tibble: 51 × 6 ## # Groups: region [4] ## state abb region population total rate ## \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;fct\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; ## 1 Alabama AL South 4779736 135 2.82 ## 2 Alaska AK West 710231 19 2.68 ## 3 Arizona AZ West 6392017 232 3.63 ## 4 Arkansas AR South 2915918 93 3.19 ## 5 California CA West 37253956 1257 3.37 ## 6 Colorado CO West 5029196 65 1.29 ## 7 Connecticut CT Northeast 3574097 97 2.71 ## 8 Delaware DE South 897934 38 4.23 ## 9 District of Columbia DC South 601723 99 16.5 ## 10 Florida FL South 19687653 669 3.40 ## # … with 41 more rows Notice that there are no columns with this information. But, if you look closely at the output above, you see the line A tibble followd by dimensions. We can learn the class of the returned object using:\nmurders %\u0026gt;% group_by(region) %\u0026gt;% class() ## [1] \u0026quot;grouped_df\u0026quot; \u0026quot;tbl_df\u0026quot; \u0026quot;tbl\u0026quot; \u0026quot;data.frame\u0026quot; The tbl, pronounced tibble, is a special kind of data frame. The functions group_by and summarize always return this type of data frame. The group_by function returns a special kind of tbl, the grouped_df. We will say more about these later. For consistency, the dplyr manipulation verbs (select, filter, mutate, and arrange) preserve the class of the input: if they receive a regular data frame they return a regular data frame, while if they receive a tibble they return a tibble. But tibbles are the preferred format in the tidyverse and as a result tidyverse functions that produce a data frame from scratch return a tibble. For example, in Chapter ?? we will see that tidyverse functions used to import data create tibbles.\nTibbles are very similar to data frames. In fact, you can think of them as a modern version of data frames. Nonetheless there are three important differences which we describe next.\nTibbles display better The print method for tibbles is more readable than that of a data frame. To see this, compare the outputs of typing murders and the output of murders if we convert it to a tibble. We can do this using as_tibble(murders). If using RStudio, output for a tibble adjusts to your window size. To see this, change the width of your R console and notice how more/less columns are shown.\n Subsets of tibbles are tibbles If you subset the columns of a data frame, you may get back an object that is not a data frame, such as a vector or scalar. For example:\nclass(murders[,4]) ## [1] \u0026quot;numeric\u0026quot; is not a data frame. With tibbles this does not happen:\nclass(as_tibble(murders)[,4]) ## [1] \u0026quot;tbl_df\u0026quot; \u0026quot;tbl\u0026quot; \u0026quot;data.frame\u0026quot; This is useful in the tidyverse since functions require data frames as input.\nWith tibbles, if you want to access the vector that defines a column, and not get back a data frame, you need to use the accessor $:\nclass(as_tibble(murders)$population) ## [1] \u0026quot;numeric\u0026quot; A related feature is that tibbles will give you a warning if you try to access a column that does not exist. If we accidentally write Population instead of population this:\nmurders$Population ## NULL returns a NULL with no warning, which can make it harder to debug. In contrast, if we try this with a tibble we get an informative warning:\nas_tibble(murders)$Population ## Warning: Unknown or uninitialised column: `Population`. ## NULL  Tibbles can have complex entries While data frame columns need to be vectors of numbers, strings, or logical values, tibbles can have more complex objects, such as lists or functions. Also, we can create tibbles with functions:\ntibble(id = c(1, 2, 3), func = c(mean, median, sd)) ## # A tibble: 3 × 2 ## id func ## \u0026lt;dbl\u0026gt; \u0026lt;list\u0026gt; ## 1 1 \u0026lt;fn\u0026gt; ## 2 2 \u0026lt;fn\u0026gt; ## 3 3 \u0026lt;fn\u0026gt;  Tibbles can be grouped The function group_by returns a special kind of tibble: a grouped tibble. This class stores information that lets you know which rows are in which groups. The tidyverse functions, in particular the summarize function, are aware of the group information.\n Create a tibble using tibble instead of data.frame It is sometimes useful for us to create our own data frames. To create a data frame in the tibble format, you can do this by using the tibble function.\ngrades \u0026lt;- tibble(names = c(\u0026quot;John\u0026quot;, \u0026quot;Juan\u0026quot;, \u0026quot;Jean\u0026quot;, \u0026quot;Yao\u0026quot;), exam_1 = c(95, 80, 90, 85), exam_2 = c(90, 85, 85, 90)) Note that base R (without packages loaded) has a function with a very similar name, data.frame, that can be used to create a regular data frame rather than a tibble. One other important difference is that by default data.frame coerces characters into factors without providing a warning or message:\ngrades \u0026lt;- data.frame(names = c(\u0026quot;John\u0026quot;, \u0026quot;Juan\u0026quot;, \u0026quot;Jean\u0026quot;, \u0026quot;Yao\u0026quot;), exam_1 = c(95, 80, 90, 85), exam_2 = c(90, 85, 85, 90)) class(grades$names) ## [1] \u0026quot;character\u0026quot; To avoid this, we use the rather cumbersome argument stringsAsFactors:\ngrades \u0026lt;- data.frame(names = c(\u0026quot;John\u0026quot;, \u0026quot;Juan\u0026quot;, \u0026quot;Jean\u0026quot;, \u0026quot;Yao\u0026quot;), exam_1 = c(95, 80, 90, 85), exam_2 = c(90, 85, 85, 90), stringsAsFactors = FALSE) class(grades$names) ## [1] \u0026quot;character\u0026quot; To convert a regular data frame to a tibble, you can use the as_tibble function.\nas_tibble(grades) %\u0026gt;% class() ## [1] \u0026quot;tbl_df\u0026quot; \u0026quot;tbl\u0026quot; \u0026quot;data.frame\u0026quot;   The dot operator One of the advantages of using the pipe %\u0026gt;% is that we do not have to keep naming new objects as we manipulate the data frame. As a quick reminder, if we want to compute the median murder rate for states in the southern states, instead of typing:\ntab_1 \u0026lt;- filter(murders, region == \u0026quot;South\u0026quot;) tab_2 \u0026lt;- mutate(tab_1, rate = total / population * 10^5) rates \u0026lt;- tab_2$rate median(rates) ## [1] 3.398069 We can avoid defining any new intermediate objects by instead typing:\nfilter(murders, region == \u0026quot;South\u0026quot;) %\u0026gt;% mutate(rate = total / population * 10^5) %\u0026gt;% summarize(median = median(rate)) %\u0026gt;% pull(median) ## [1] 3.398069 We can do this because each of these functions takes a data frame as the first argument. But what if we want to access a component of the data frame. For example, what if the pull function was not available and we wanted to access tab_2$rate? What data frame name would we use? The answer is the dot operator.\nFor example to access the rate vector without the pull function we could use\nrates \u0026lt;- filter(murders, region == \u0026quot;South\u0026quot;) %\u0026gt;% mutate(rate = total / population * 10^5) %\u0026gt;% .$rate median(rates) ## [1] 3.398069 In the next section, we will see other instances in which using the . is useful.\n do The tidyverse functions know how to interpret grouped tibbles. Furthermore, to facilitate stringing commands through the pipe %\u0026gt;%, tidyverse functions consistently return data frames, since this assures that the output of a function is accepted as the input of another. But most R functions do not recognize grouped tibbles nor do they return data frames. The quantile function is an example we described in Section ??. The do function serves as a bridge between R functions such as quantile and the tidyverse. The do function understands grouped tibbles and always returns a data frame.\nIn Section ??, we noted that if we attempt to use quantile to obtain the min, median and max in one call, we will receive an error: Error: expecting result of length one, got : 2.\ndata(heights) heights %\u0026gt;% filter(sex == \u0026quot;Female\u0026quot;) %\u0026gt;% summarize(range = quantile(height, c(0, 0.5, 1))) We can use the do function to fix this.\nFirst we have to write a function that fits into the tidyverse approach: that is, it receives a data frame and returns a data frame.\nmy_summary \u0026lt;- function(dat){ x \u0026lt;- quantile(dat$height, c(0, 0.5, 1)) tibble(min = x[1], median = x[2], max = x[3]) } We can now apply the function to the heights dataset to obtain the summaries:\nheights %\u0026gt;% group_by(sex) %\u0026gt;% my_summary ## # A tibble: 1 × 3 ## min median max ## \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; ## 1 50 68.5 82.7 But this is not what we want. We want a summary for each sex and the code returned just one summary. This is because my_summary is not part of the tidyverse and does not know how to handled grouped tibbles. do makes this connection:\nheights %\u0026gt;% group_by(sex) %\u0026gt;% do(my_summary(.)) ## # A tibble: 2 × 4 ## # Groups: sex [2] ## sex min median max ## \u0026lt;fct\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; ## 1 Female 51 65.0 79 ## 2 Male 50 69 82.7 Note that here we need to use the dot operator. The tibble created by group_by is piped to do. Within the call to do, the name of this tibble is . and we want to send it to my_summary. If you do not use the dot, then my_summary has no argument and returns an error telling us that argument \"dat\" is missing. You can see the error by typing:\nheights %\u0026gt;% group_by(sex) %\u0026gt;% do(my_summary()) If you do not use the parenthesis, then the function is not executed and instead do tries to return the function. This gives an error because do must always return a data frame. You can see the error by typing:\nheights %\u0026gt;% group_by(sex) %\u0026gt;% do(my_summary)  The purrr package In Section ?? we learned about the sapply function, which permitted us to apply the same function to each element of a vector. We constructed a function and used sapply to compute the sum of the first n integers for several values of n like this:\ncompute_s_n \u0026lt;- function(n){ x \u0026lt;- 1:n sum(x) } n \u0026lt;- 1:25 s_n \u0026lt;- sapply(n, compute_s_n) s_n ## [1] 1 3 6 10 15 21 28 36 45 55 66 78 91 105 120 136 153 171 190 ## [20] 210 231 253 276 300 325 This type of operation, applying the same function or procedure to elements of an object, is quite common in data analysis. The purrr package includes functions similar to sapply but that better interact with other tidyverse functions. The main advantage is that we can better control the output type of functions. In contrast, sapply can return several different object types; for example, we might expect a numeric result from a line of code, but sapply might convert our result to character under some circumstances. purrr functions will never do this: they will return objects of a specified type or return an error if this is not possible.\nThe first purrr function we will learn is map, which works very similar to sapply but always, without exception, returns a list:\nlibrary(purrr) # or library(tidyverse) n \u0026lt;- 1:25 s_n \u0026lt;- map(n, compute_s_n) class(s_n) ## [1] \u0026quot;list\u0026quot; If we want a numeric vector, we can instead use map_dbl which always returns a vector of numeric values.\ns_n \u0026lt;- map_dbl(n, compute_s_n) class(s_n) ## [1] \u0026quot;numeric\u0026quot; This produces the same results as the sapply call shown above.\nA particularly useful purrr function for interacting with the rest of the tidyverse is map_df, which always returns a tibble data frame. However, the function being called needs to return a vector or a list with names. For this reason, the following code would result in a Argument 1 must have names error:\ns_n \u0026lt;- map_df(n, compute_s_n) We need to change the function to make this work:\ncompute_s_n \u0026lt;- function(n){ x \u0026lt;- 1:n tibble(sum = sum(x)) } s_n \u0026lt;- map_df(n, compute_s_n) head(s_n) ## # A tibble: 6 × 1 ## sum ## \u0026lt;int\u0026gt; ## 1 1 ## 2 3 ## 3 6 ## 4 10 ## 5 15 ## 6 21 The purrr package provides much more functionality not covered here. For more details you can consult this online resource.\n Tidyverse conditionals A typical data analysis will often involve one or more conditional operations. In Section ?? we described the ifelse function, which we will use extensively in this book. In this section we present two dplyr functions that provide further functionality for performing conditional operations.\ncase_when The case_when function is useful for vectorizing conditional statements. It is similar to ifelse but can output any number of values, as opposed to just TRUE or FALSE. Here is an example splitting numbers into negative, positive, and 0:\nx \u0026lt;- c(-2, -1, 0, 1, 2) case_when(x \u0026lt; 0 ~ \u0026quot;Negative\u0026quot;, x \u0026gt; 0 ~ \u0026quot;Positive\u0026quot;, x == 0 ~ \u0026quot;Zero\u0026quot;) ## [1] \u0026quot;Negative\u0026quot; \u0026quot;Negative\u0026quot; \u0026quot;Zero\u0026quot; \u0026quot;Positive\u0026quot; \u0026quot;Positive\u0026quot; A common use for this function is to define categorical variables based on existing variables. For example, suppose we want to compare the murder rates in four groups of states: New England, West Coast, South, and other. For each state, we need to ask if it is in New England, if it is not we ask if it is in the West Coast, if not we ask if it is in the South, and if not we assign other. Here is how we use case_when to do this:\nmurders %\u0026gt;% mutate(group = case_when( abb %in% c(\u0026quot;ME\u0026quot;, \u0026quot;NH\u0026quot;, \u0026quot;VT\u0026quot;, \u0026quot;MA\u0026quot;, \u0026quot;RI\u0026quot;, \u0026quot;CT\u0026quot;) ~ \u0026quot;New England\u0026quot;, abb %in% c(\u0026quot;WA\u0026quot;, \u0026quot;OR\u0026quot;, \u0026quot;CA\u0026quot;) ~ \u0026quot;West Coast\u0026quot;, region == \u0026quot;South\u0026quot; ~ \u0026quot;South\u0026quot;, TRUE ~ \u0026quot;Other\u0026quot;)) %\u0026gt;% group_by(group) %\u0026gt;% summarize(rate = sum(total) / sum(population) * 10^5) ## # A tibble: 4 × 2 ## group rate ## \u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; ## 1 New England 1.72 ## 2 Other 2.71 ## 3 South 3.63 ## 4 West Coast 2.90  between A common operation in data analysis is to determine if a value falls inside an interval. We can check this using conditionals. For example, to check if the elements of a vector x are between a and b we can type\nx \u0026gt;= a \u0026amp; x \u0026lt;= b However, this can become cumbersome, especially within the tidyverse approach. The between function performs the same operation.\nbetween(x, a, b) TRY IT\nLoad the murders dataset. Which of the following is true?  murders is in tidy format and is stored in a tibble. murders is in tidy format and is stored in a data frame. murders is not in tidy format and is stored in a tibble. murders is not in tidy format and is stored in a data frame.  Use as_tibble to convert the murders data table into a tibble and save it in an object called murders_tibble.\n Use the group_by function to convert murders into a tibble that is grouped by region.\n Write tidyverse code that is equivalent to this code:\n  exp(mean(log(murders$population))) Write it using the pipe so that each function is called without arguments. Use the dot operator to access the population. Hint: The code should start with murders %\u0026gt;%.\nUse the map_df to create a data frame with three columns named n, s_n, and s_n_2. The first column should contain the numbers 1 through 100. The second and third columns should each contain the sum of 1 through \\(n\\) with \\(n\\) the row number.     Lecture Video All videos are in the SSC442 Mediaspace channel available here \n  `{=html} --    I discovered the emo::ji() function at 8:55am. My wife joked that I would find a way to use the poop emoji by 9:00am. It is now 8:59am. She was right.↩︎\n If you have not installed this package already, you must use install.packages(\"tidyverse\") prior to the library() call you see below.↩︎\n   ","date":1630972800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1632838512,"objectID":"f4445f225dbc16ad343f16f0677c881d","permalink":"https://ssc442.netlify.app/content/02-content/","publishdate":"2021-09-07T00:00:00Z","relpermalink":"/content/02-content/","section":"content","summary":"Readings  Guiding Question  Final Projects  Teams  Randomness and Data Analytics  Learning From Data Formalization The Target Function Why Estimate an Unknown Function? The Parable of the Marbles Outside the Data Hoeffding’s Inequality An example of Hoeffding’s Inequality  The tidyverse  Tidy data Manipulating data frames  Adding a column with mutate Subsetting with filter Selecting columns with select  The pipe: %\u0026gt;% Summarizing data  summarize pull Group then summarize with group_by  Sorting data frames  Nested sorting The top \\(n\\)  Tibbles  Tibbles display better Subsets of tibbles are tibbles Tibbles can have complex entries Tibbles can be grouped Create a tibble using tibble instead of data.","tags":null,"title":"Introduction to the tidyverse","type":"docs"},{"authors":null,"categories":null,"content":"   Office Hours Contacting Me What is This Course and Can / Should You Take It? What This Course is Not Success in this Course Course materials  R and RStudio Online Help  Evaluations and Grades  Class Participation Academic honesty Grading  Resources Accommodations Mental Health and Wellbeing Mandated Reporting Acknowledgements Miscellanea  TA Office Hours Using Office Hours Letters of Recommendation / References    Instructor  Prof. Ben Bushong  25A Marshall-Adams Hall  bbushong@msu.edu  @benbushong   Course details  Tuesday and Thursday  September – December, 2021  12:40pm - 2:00pm  Slack   Contacting me Please consider whether your question is short and concrete; if so, feel free to email me. If your question is deep, vague, interesting, or otherwise complex, please come to office hours or we can discuss in class. See syllabus for details.\n  Office Hours My office hours are 4:15 - 5:15 on Thursdays. Zoom link here (Passcode: GODUCKS).\nThe TA’s office hours are 10:15 - 11:15 on Wednesdays. Zoom link here (Passcode: officehour)\n Contacting Me I have moved this up front in a (likely unsuccessful) attempt to minimize our collective headache.\nEmail is a blessing and a curse. Instant communication is wonderful, but often email is the wrong medium to have a productive conversation about course material. Moreover, I get a lot of emails. This means that I am frequently triaging emails into two piles: “my house is burning down” and “everything else”. Your email is unlikely to make the former pile. So, asking questions about course material is always best done in-class or in office hours. Students always roll their eyes when professors say things like that, but it’s true that if you have a question, it’s very likely someone else has the same question.\nThat said, it benefits us both if any emails you send are clear and effective. There’s an (unfunny) joke in academia that professors (i) read an email until they find a question; (ii) respond to that question and; (iii) ignore the rest of the email. I won’t do this, but I think it is helpful to assume that the person on the receiving end of an email will operate this way.\nSome general tips:\n Always include [SSC442] in your subject line (brackets included). Use a short but informative subject line. For example: [SSC442] Final Project Grading Use your University-supplied email for University business. This helps me know who you are. One topic, one email. If you have multiple things to discuss, and you anticipate followup replies, it is best to split them into two emails so that the threads do not get cluttered. Ask direct questions. If you’re asking multiple questions in one email, use a bulleted list. Don’t ask questions that are answered by reading the syllabus. This drives me nuts. I’ve also found that students are overly polite in emails. I suppose it may be intimidating to email a professor, and you should try to match the style that the professor prefers, but I view email for a course as a casual form of communication. Said another way: get to the point. Students often send an entire paragraph introducing themselves, but if you use your University email address, and add the course name in the subject, I will already know who you are. Here’s an example of an excellent email:   Subject: [SSC442] Lab, Question 2, Typo\nHi Prof. Bushong,\nThere seems to be a typo in the Lab on Question 2. The problem says to use a column of data that doesn’t seem to exist. Can you correct this or which should we use?\nThanks, Student McStudentFace\n Now on to your regularly scheduled syllabus.\n What is This Course and Can / Should You Take It? Innovations in statistical learning have created many engineering breakthroughs. From real time voice recognition to automatic categorization (and in some cases production) of news stories, machine learning is transforming the way we live our lives. These techniques are, at their heart, novel ways to work with data, and therefore they should have implications for social science. This course explores the intersection of statistical learning (or machine learning) and social science and aims to answer two primary questions about these new techniques:\nHow does statistical learning work and what kinds of statistical guarantees can be made about the performance of statistical-learning algorithms?\n How can statistical learning be used to answer questions that interest social science researchers, such as testing theories or improving social policy?\n  In order to address these questions, we will cover so-called “standard” techniques such as supervised and unsupervised learning, statistical learning theory and nonparametric and Bayesian approaches. If it were up to me, this course would be titled “Statistical Learning for Social Scientists”—I believe this provides a more appropriate guide to the content of this course. And while this class will cover these novel statistical methodologies in some detail, it is not a substitute for the appropriate class in Computer Science or Statistics. Nor is this a class that teaches specific skills for the job market. Rather, this class will teach you to think about data analytics broadly. We will spend a great deal of time learning how to interpret the output of statistical learning algorithms and approaches, and will also spend a great deal of time on better understanding the basic ideas in statistical learning. This, of course, comes at some cost in terms of time spent on learning computational and/or programming skills.\nEnrollment for credit in this course is simply not suitable for those unprepared in or uninterested in elementary statistical theory no matter the intensity of interest in machine learning or “Big Data”. Really.\nYou will be required to understand elementary mathematics in this course and should have at least some exposure to statistical theory. The class is front-loaded technically: early lectures are more mathematically oriented, while later lectures are more applied.\nThe topics covered in this course are listed later in this document. I will assign readings sparingly from Introduction to Statistical Learning, henceforth referred to as ISL. This text is available for free online and, for those who like physical books, can be purchased for about $25. Importantly, the lectures deviate a fair bit from the reading, and thus you will rely on your course notes more than you might in other classes.\nIf—after you have read this document and preferably after attending the first lecture—you have any questions about whether this course is appropriate for you, please come talk to me.\n What This Course is Not The focus of this course is conceptual. The goal is to create a working understanding of when and how tools from computer science and statistics can be profitably applied to problems in social science. Though students will be required to apply some of these techniques themselves, this course is not…\n…a replacement for EC420 or a course in causal inference.\nAs social scientists, we are most often concerned with causal inference in order to analyze and write policies. Statistical learning and the other methods we will discuss in this course are generally not well-suited to these problems, and while I’ll give a short overview of standard methods, this is only to build intuitions. Ultimately, this course has a different focus and you should still pursue standard methodological insights from your home departments.\n…a course on the computational aspects of the underlying methods.\nThere are many important innovations that have made machine learning techniques computationally feasible. We will not discuss these, as there are computer science courses better equipped to cover them. When appropriate, we will discuss whether something is computable, and we will even give rough approximations of the amount of time required (e.g. P vs NP). But we will not discuss how optimizers work or best practices in programming.\n…a primer on the nitty-gritty of how to use these tools or a way to pad your resume.\nThe mechanics of implementation, whether it be programming languages or learning to use APIs, will not be covered in any satisfying level of depth. Students will be expected to learn most of the programming skills on their own. Specifically, while there will be some material to remind you of basic R commands, this is not a good course for people who are simply looking to learn the mechanics of programming. This course is designed to get you to use both traditional analytics and, eventually, machine learning tools. We will do some review of basic programming, and you will have the opportunity to explore topics that interest you through a final project, but ultimately this is a course that largely focuses on the theoretical and practical aspects of statistical learning as applied to social science and not a class on programming.\nPerhaps most importantly, this course is an attempt to push undergraduate education toward the frontiers in social science. Accordingly, please allow some messiness. Some topics may be underdeveloped for a given person’s passions, but given the wide variety of technical skills and overall interests, this is a near certainty. Both the challenge and opportunity of this area comes from the fact that there is no fully developed, wholly unifying framework. Our collective struggle—me from teaching, you from learning—will ultimately bear fruit.\n Success in this Course I promise, you are equipped to succeed in this course.\nLearning R can be difficult at first. Like learning a new language—Spanish, French, or Mandarin—it takes dedication and perseverance. Hadley Wickham (the chief data scientist at RStudio and the author of some amazing R packages you’ll be using like) ggplot2—made this wise observation:\n It’s easy when you start out programming to get really frustrated and think, “Oh it’s me, I’m really stupid,” or, “I’m not made out to program.” But, that is absolutely not the case. Everyone gets frustrated. I still get frustrated occasionally when writing R code. It’s just a natural part of programming. So, it happens to everyone and gets less and less over time. Don’t blame yourself. Just take a break, do something fun, and then come back and try again later.\n Even experienced programmers (like me) find themselves bashing their heads against seemingly intractable errors.1 If you’re finding yourself bashing your head against a wall and not making progress, try the following. First, take a break. Sometimes you just need space to see an error. Next, talk to classmates. Finally, if you genuinely cannot see the solution, e-mail the TA. But, honestly, it’s probably just a typo.\n\n Course materials The course website can be found at https://ssc442.netlify.app (but you know that. You’re on it right now.)\nAll of the readings and software in this class are free. There are free online version of all the texts including Introduction to Statistical Learning and R / RStudio are free. (Don’t pay for RStudio.) We will reference outside readings and there exist paper versions of some “books” but you won’t need to buy anything2\nR and RStudio You will do all of your analysis with the open source (and free!) programming language R. You will use RStudio as the main program to access R. I find it helpful to think of R as an engine and RStudio as a car dashboard—R handles all the calculations produces the actual statistics and graphical output, while RStudio provides a nice interface for running R code.\nR is free, but it can sometimes be a pain to install and configure. To make life easier, you can use the free RStudio.cloud service, which lets you run a full instance of RStudio in your web browser. This means you won’t have to install anything on your computer to get started with R. We recommend this for those who may be switching between computers and are trying to get some work done. That said, while RStudio.cloud is convenient, it can be slow and it is not designed to be able to handle larger datasets or more complicated analysis and graphics. You also can’t use your own custom fonts with RStudio.cloud.3 And, generally speaking, you should have (from the prerequisite course) sufficient experience to make your R work. If not, over the course of the semester, you’ll probably want to get around to installing R, RStudio, and other R packages on your computer and wean yourself off of RStudio.cloud. If you plan on making a career out of data science, you should consider this a necessary step.\nYou can find instructions for installing R, RStudio, and all the tidyverse packages here. And you may find some other goodies.\n Online Help Data science and statistical programming can be difficult. Computers are stupid: they do only what you ask, not what you intend. This means that little errors in your code can cause hours of headache, even if you’ve been doing this stuff for years!\nFortunately there are tons of online resources to help you with this. Two of the most important are StackOverflow (a Q\u0026amp;A site with hundreds of thousands of answers to all sorts of programming questions) and RStudio Community (a forum specifically designed for people using RStudio and the tidyverse (i.e. you)).\nIf you use Twitter, you can try posting R-related questions and content with #rstats. The community there is exceptionally generous and helpful.\nSearching for help with R on Google can sometimes be tricky because the program name is, um, a single letter. Google is generally smart enough to figure out what you mean when you search for “r scatterplot”, but if it does struggle, try searching for “rstats” instead (e.g. “rstats scatterplot”). Likewise, whenever using a specific package, try searching for that package name instead of the letter “r” (e.g. “ggplot scatterplot”). Good, concise searches are generally more effective.\nHelp with Using R: There are some excellent additional tutorials on R available through Rstudio Clould Primers.\n  Evaluations and Grades Your grade in this course will be based on attendance/participation, labs, weekly writings, and a final project.\nThe general breakdown will be approximately 55% for labs, participation, and weekly writings, and 45% for projects (see below for specific details). The primary focus of the course is a final project; this requires two “mini-projects” to ensure you’re making satisfactory progress. Assignment of numeric grades will follow the standard, where ties (e.g., 91.5%) are rounded to favor the student. Evaluations (read: grades) are designed not to deter anyone from taking this course who might otherwise be interested, but will be taken seriously.\nWeekly writings are intended to be an easy way to get some points. Labs will be short homework assignments that require you to do something practical using a basic statistical language. Support will be provided for the R language only. You must have access to computing resources and the ability to program basic statistical analyses. As mentioned above, this course will not teach you how to program or how to write code in a specific language. If you are unprepared to do implement basic statistical coding, please take (or retake) PLS202. I highly encourage seeking coding advice from those who instruct computer science courses – it’s their job and they are better at it than I am. I’ll try to provide a good service, but I’m really not an expert in computer science.\nMore in-depth descriptions for all the assignments are on the assignments page. As the course progresses, the assignments themselves will be posted within that page.\nTo Recap:\n   Assignment Points Percent    Class Participation 20 4%  Weekly Writings (11 x 10), drop lowest 100 20%  Labs (11 x 15), drop lowest 150 30%  Mini project 1 50 10%  Mini project 2 50 10%  Final project 130 26%  Total 500 —        Grade Range Grade Range    4.0 92-100% 2.0 72-76%  3.5 87-91% 1.5 67-72%  3.0 82-87% 1.0 62-67%  2.5 77-81% 0.0 bad-66%     Class Participation Participation can take many forms. The bare minimum can best be described as “showing your presence and having some engagement.” To encourage some form of participation, I will often pose questions to the class. I am not above bribery - your response to these extra credit questions will earn extra credit points, up to 5, for participation. Thus, you can easily pad your score by (1) meeting the minimum participation requirements such that I know you are present, and (2) earning extra credit by responding to in-class extra credit prompts. I will clearly state which questions are extra credit. When it comes to participation, wrong answers get the same credit as right answers. We are here to learn. If you knew everything already, you wouldn’t be in the class.\n Academic honesty Violation of MSU’s Spartan Code of Honor will result in a grade of 0.0 in the course. Moreover, I am required by MSU policy to report suspected cases of academic dishonesty for possible disciplinary action.4\n Grading All grades are considered final. Any request for a re-grade beyond simple point-tallying mistakes will require that the entire assignment be re-graded. Any points previously awarded may be changed in either direction in the re-grade.\n  Resources Mental health concerns or stressful events may lead to diminished academic performance or reduce a student’s ability to participate in daily activities. Services are available to assist you with addressing these and other concerns you may be experiencing. You can learn more about the broad range of confidential mental health services available on campus via the Counseling \u0026amp; Psychiatric Services (CAPS) website at www.caps.msu.edu.\n Accommodations This class is designed to be fairly accomodating without a student asking. However, if you need a special accommodation for a disability, religious observance, or have any other concerns about your ability to perform well in this course, please contact me immediately so that we can discuss the issue and make appropriate arrangements.\nMichigan State University is committed to providing equal opportunity for participation in all programs, services and activities. Requests for accommodations by persons with disabilities may be made by contacting the Resource Center for Persons with Disabilities at 517-884-RCPD or on the web at here. Once your eligibility for an accommodation has been determined, you will be issued a verified individual services accommodation (“VISA”) form. Please present this form to me at the start of the term and/or two weeks prior to the accommodation date (test, project, etc). Requests received after this date will be honored whenever possible.\n Mental Health and Wellbeing Things for you might be especially hard right now.\nI’m fully committed to making sure that you learn everything you were hoping to learn from this class. I will make whatever accommodations I can to help you finish your exercises, do well on your projects, and learn and understand the class material. Under ordinary conditions, I am flexible and lenient with grading and course expectations when students face difficult challenges. Given the challenges of the past two years, that flexibility and leniency is intensified.\nIf you feel like you’re behind or not understanding everything, do not suffer in silence. Please contact me. I’m available at e-mail.\n Mandated Reporting Essays, journals, and other materials submitted for this class are generally considered confidential pursuant to the University’s student record policies. However, students should be aware that University employees, including instructors, may not be able to maintain confidentiality when it conflicts with their responsibility to report certain issues to protect the health and safety of MSU community members and others. As the instructor, I must report the following information to other University offices (including the Department of Police and Public Safety) if you share it with me: • Suspected child abuse/neglect, even if this maltreatment happened when you were a child; • Allegations of sexual assault, relationship violence, stalking, or sexual harassment; and • Credible threats of harm to oneself or to others. These reports may trigger contact from a campus official who will want to talk with you about the incident that you have shared. In almost all cases, it will be your decision whether you wish to speak with that individual. If you would like to talk about these events in a more confidential setting, you are encouraged to make an appointment with the MSU Counseling and Psychiatric Services.\n Acknowledgements This syllabus and course structure was developed in tandem with Prof. Justin Kirkpatrick. All credit goes to Prof. Kirkpatrick; all errors are my own.\n Miscellanea D2L will be used sparingly for submission of weekly writings and assignments and distribution of grades.\nTA Office Hours Our TA, Xueshi Wang, has generously offered to host (digital) office hours on Wednesdays between 10:10 and 11:10. Zoom link below. She can be contacted via email using wangxu36 @ msu.edu\n Using Office Hours Please use my office hours. It would be remarkable if you didn’t need some assistance with the material, and I am here to help. One of the benefits of open office hours is to accommodate many students at once; if fellow students are “in my office”, please join in and feel very free to show up in groups. Office hours will move around a little bit throughout the semester to attempt to meet the needs of all students.\nIn addition to drop-in office hours, I always have sign-up office hours for advising and other purposes. As a general rule, please first seek course-related help from the drop-in office hours. However, if my scheduled office hours are always infeasible for you, let me know, and then I may encourage you to make appointments with me. I ask that you schedule your studying so that you are prepared to ask questions during office hours – office hours are not a lecture and if you’re not prepared with questions we will end up awkwardly staring at each other for an hour until you leave.\nSome gentle requests regarding office hours and on contacting me. First, my office hours end sharply at the end, so don’t arrive 10 minutes before the scheduled end and expect a full session. Please arrive early if you have lengthy questions, or if you don’t want to risk not having time due to others’ questions. You are free to ask me some stuff by e-mail, (e.g. a typo or something on a handout), but please know e-mail sucks for answering many types of questions. “How do I do this lab?” or “What’s up with R?” are short questions with long answers. Come to office hours.\n Letters of Recommendation / References If you are applying for further study or another pursuit that requires letters of recommendation and you’d like me to recommend you, I will be glad to write a letter on your behalf if your final grade is a 4.0. Grades below a 4.0 may be handled on a case-by-case basis. In addition, you should have held at least three substantial conversations with me about the course material or other academic subjects over the course of the semester.\n   By the end of the course, you will realize that 1) I make many many many errors; 2) that I frequently cannot remember a command or the correct syntax; and 3) that none of this matters too much in the big picture because I know the broad approaches I’m trying to take and I know how to Google stuff. Learn from my idiocy.↩︎\n If you’ve got money to burn, you can buy me a burrito.↩︎\n This bothers me way more than it should.↩︎\n So just don’t cheat or plagiarize. This is an easy problem to avoid.↩︎\n   ","date":1630454400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1631128901,"objectID":"e4d5a4a79239f08c6ad0d7cbf1be756c","permalink":"https://ssc442.netlify.app/syllabus/","publishdate":"2021-09-01T00:00:00Z","relpermalink":"/syllabus/","section":"","summary":"Office Hours Contacting Me What is This Course and Can / Should You Take It? What This Course is Not Success in this Course Course materials  R and RStudio Online Help  Evaluations and Grades  Class Participation Academic honesty Grading  Resources Accommodations Mental Health and Wellbeing Mandated Reporting Acknowledgements Miscellanea  TA Office Hours Using Office Hours Letters of Recommendation / References    Instructor  Prof.","tags":null,"title":"Syllabus","type":"page"},{"authors":null,"categories":null,"content":"   Requirements Teams Suggested outline  Introduction Theory and Background Data and Analyses Conclusion    Requirements Data analytics is inherently a hands-on endeavor. Thus, the final project for this class is hands-on. As per the overview page, the final project has the following elements:\nFor your final project in this class, you will analyze existing data in some area of interest to you.1 Aggregating data from multiple sources is encouraged, but is not required.  You must visualize (at least) three interesting features of that data. Visualizations should aid the reader in understanding something about the data that might not be readily aparent.[^4]\n You must come up with some analysis—using tools from the course—which relates your data to either a prediction or a policy conclusion. For example, if you collected data from Major League Baseball games, you could try to “predict” whether a left-hander was pitching based solely on the outcomes of the batsmen.\n You will submit three things via D2L:\n   A PDF of your report (see the outline below for details of what this needs to contain) rendered from your R Markdown. You might want to write the prose-heavy sections in a word processor like Word or Google Docs and copy/paste the text into your R Markdown document, since RStudio doesn’t have a nice spell checker or grammar checker. This should have no visible R code, warnings, or messages in it. To do this, you must set echo = FALSE in the code chunk options knitr::opts_chunk$set(echo = FALSE, ...) at the beginning of your document template before you knit.\n The same PDF as above, but with all the R code in it (set echo = TRUE at the beginning of your document and reknit the file). Please label files in an obvious way.\n A CSV file of your data; or a link to the data online if your code pulls from the internet. This must be a separate file titled “data.csv” or “data.txt” as applicable.\n  This project is due by 11:59 PM on Tuesday, April 27th, 2021. No late work will be accepted. For real. MSU has grading deadlines and I’ve given you every second that can be spared.\nThere is no final exam. This project is your final exam.\nThe project will not be graded using a check system, and will be graded by me (the main instructor, not a TA). I will evaluate the following four elements of your project:\nTechnical skills: Was the project easy? Does it showcase mastery of data analysis? (20%)\n Visual design: Was the information smartly conveyed and usable? Was it beautiful? (25%)\n Analytic design: Was the analysis appropriate? Was it sensible, given the dataset? (20%)\n Story: Did we learn something? (25%)\n Following instructions: Did you surpress R code as asked? Did you submit a separate datafile and label it correctly? (10%)\n  If you’ve engaged with the course content and completed the exercises and mini projects throughout the course, you should do just fine with the final project.\n Teams  My team sucks; how can I punish them for their lack of effort?\n On this front, we will be more supportive. While you have to put up with your team regardless of their quality, you can indicate that your team members are not carrying their fair share by issuing a strike. This processs works as follows: 1. A team member systematically fails to exert effort on collaborative projects (for example, by not showing up for meetings or not communicating, or by simply leeching off others without contributing.) 2. Your frustration reaches a boiling point. You decide this has to stop. You decide to issue a strike 3. You send an email with the following information: - Subject line: [SSC442] Strike against [Last name of Recipient] - Body: You do not need to provide detailed reasoning. However, you must discuss the actions (plural) you took to remedy the situation before sending the strike email.\nA strike is a serious matter, and will reduce that team member’s grade on joint work by 10%. If any team-member gets strikes from all other members of his or her team, their grade will be reduced by 50%.\nStrikes are anonymous so that you do not need to fear social retaliation. However, they are not anonymous to allow you to issue them without thoughtful consideration. Perhaps the other person has a serious issue that is preventing them from completing work (e.g., a relative passing away). Please be thoughtful in using this remedy and consider it a last resort.\nDo I really need to create a team GitHub repository? I don't like GitHub / programming/ work. --  I’m on a smaller-than-normal team. Does this mean that I have to do more work?\n Your instructors are able to count and are aware the teams are imbalanced. Evaluations of final projects will take this into account. While your final product should reflect the best ability of your team, we do not anticipate that the uneven teams will lead to substantively different outputs.\n Suggested outline You must write and present your analysis as if presenting to a C-suite executive. If you are not familiar with this terminology, the C-suite includes, e.g., the CEO, CFO, and COO of a given company. Generally speaking, such executives are not particularly analytically oriented, and therefore your explanations need to be clear, consise (their time is valuable) and contain actionable (or valuable) information.2 - Concretely, this requires a written memo, which describes the data, analyses, and results. This must be clear and easy to understand for a non-expert in your field. Figures and tables do not apply to the page limit.\nBelow is a very loose guide to the sort of content that we expect for the final project. Word limits are suggestions only. Note your final report will be approximately\nIntroduction Describe the motivation for this analysis. Briefly describe the dataset, and explain why the analysis you’re undertaking matters for society. (Or matters for some decision-making. You should not feel constrained to asking only “big questions.” The best projects will be narrow-scope but well-defined.) (≈300 words)\n Theory and Background Provide in-depth background about the data of interest and about your analytics question. (≈300 words)\n“Theory” Provide some theoretical guidance to the functional relationship you hope to explore. If you’re interested on how, say, height affects scoring in the NBA, write down a proposed function that might map height to scoring. Describe how you might look for this unknown relationship in the data.(≈300 words)\n Hypotheses Make predictions. Declare what you think will happen. (Note, this may carry over from second project.) (≈250 words)\n  Data and Analyses Data Given your motivations, limits on feasibility, and hypotheses, describe the data you use. (≈100 words)\n Analyses Generate the analyses relevant to your hypotheses and interests. Here you must include three figures and must describe what they contain in simple, easy to digest language. Why did you visualize these elements? Your analyses also must include brief discussion.\n(As many words as you need to fully describe your analysis and results)\n  Conclusion What caveats should we consider? Do you believe this is a truly causal relationship? Why does any of this matter to the decision-maker? (≈75 words)\n   Note that existing is taken to mean that you are not permitted to collect data by interacting with other people. That is not to say that you cannot gather data that previously has not been gathered into a single place—this sort of exercise is encouraged. But you cannot stand with a clipboard outside a store and count visitors (for instance).↩︎\n This exercise provides you with an opportunity to identify your marketable skills and to practice them. I encourage those who will be looking for jobs soon to take this exercise seriously.↩︎\n   ","date":1617494400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1629128785,"objectID":"8d16837a0c729f9c31150a71deaf1f1e","permalink":"https://ssc442.netlify.app/assignment/final-project/","publishdate":"2021-04-04T00:00:00Z","relpermalink":"/assignment/final-project/","section":"assignment","summary":"Requirements Teams Suggested outline  Introduction Theory and Background Data and Analyses Conclusion    Requirements Data analytics is inherently a hands-on endeavor. Thus, the final project for this class is hands-on. As per the overview page, the final project has the following elements:\nFor your final project in this class, you will analyze existing data in some area of interest to you.1 Aggregating data from multiple sources is encouraged, but is not required.","tags":null,"title":"Final project","type":"docs"},{"authors":null,"categories":null,"content":"    Readings Guiding Questions Data visualization principles  Encoding data using visual cues Avoid Psuedo-3D Plots Avoid too many significant digits Know your audience Know when to include 0 Do not distort quantities Order categories by a meaningful value Show the data Faceting  Use common axes with facets Align plots vertically to see horizontal changes and horizontally to see vertical changes Facet grids Visual cues to be compared should be adjacent, continued Use color  Think of the color blind  Using a discrete color palette Using a continuous color palette  gridExtra and grid.arrange    Readings  This page.   Guiding Questions  Why do we create visualizations? What types of data are best suited for visuals? How do we best visualize the variability in our data? What makes a visual compelling? What are the worst visuals? Which of these are most frequently used? Why?  As with last week’s content, the technical aspects of this lecture will be explored in greater detail in the Thursday practical lecture. Today, we will focus on some principles.\n “The greatest value of a picture is when it forces us to notice what we never expected to see.” – John Tukey\n  Data visualization principles We have already provided some rules to follow as we created plots for our examples. Here, we aim to provide some general principles we can use as a guide for effective data visualization. Much of this section is based on a talk by Karl Broman1 titled “Creating Effective Figures and Tables”2 and includes some of the figures which were made with code that Karl makes available on his GitHub repository3, as well as class notes from Peter Aldhous’ Introduction to Data Visualization course4. Following Karl’s approach, we show some examples of plot styles we should avoid, explain how to improve them, and use these as motivation for a list of principles. We compare and contrast plots that follow these principles to those that don’t.\nThe principles are mostly based on research related to how humans detect patterns and make visual comparisons. The preferred approaches are those that best fit the way our brains process visual information. When deciding on a visualization approach, it is also important to keep our goal in mind. We may be comparing a viewable number of quantities, describing distributions for categories or numeric values, comparing the data from two groups, or describing the relationship between two variables. As a final note, we want to emphasize that for a data scientist it is important to adapt and optimize graphs to the audience. For example, an exploratory plot made for ourselves will be different than a chart intended to communicate a finding to a general audience.\nAs with the discussion above, we will be using these libraries—note the addition of gridExtra:\nlibrary(tidyverse) library(dslabs) library(gridExtra) Encoding data using visual cues We start by describing some principles for encoding data. There are several approaches at our disposal including position, aligned lengths, angles, area, brightness, and color hue.\nTo illustrate how some of these strategies compare, let’s suppose we want to report the results from two hypothetical polls regarding browser preference taken in 2000 and then 2015. For each year, we are simply comparing five quantities – the five percentages. A widely used graphical representation of percentages, popularized by Microsoft Excel, is the pie chart:\nHere we are representing quantities with both areas and angles, since both the angle and area of each pie slice are proportional to the quantity the slice represents. This turns out to be a sub-optimal choice since, as demonstrated by perception studies, humans are not good at precisely quantifying angles and are even worse when area is the only available visual cue. The donut chart is an example of a plot that uses only area:\nTo see how hard it is to quantify angles and area, note that the rankings and all the percentages in the plots above changed from 2000 to 2015. Can you determine the actual percentages and rank the browsers’ popularity? Can you see how the percentages changed from 2000 to 2015? It is not easy to tell from the plot. In fact, the pie R function help file states that:\n Pie charts are a very bad way of displaying information. The eye is good at judging linear measures and bad at judging relative areas. A bar chart or dot chart is a preferable way of displaying this type of data.\n In this case, simply showing the numbers is not only clearer, but would also save on printing costs if printing a paper copy:\n  Browser  2000  2015      Opera  3  2    Safari  21  22    Firefox  23  21    Chrome  26  29    IE  28  27     The preferred way to plot these quantities is to use length and position as visual cues, since humans are much better at judging linear measures. The barplot uses this approach by using bars of length proportional to the quantities of interest. By adding horizontal lines at strategically chosen values, in this case at every multiple of 10, we ease the visual burden of quantifying through the position of the top of the bars. Compare and contrast the information we can extract from the two figures.\nNotice how much easier it is to see the differences in the barplot. In fact, we can now determine the actual percentages by following a horizontal line to the x-axis.\nIf for some reason you need to make a pie chart, label each pie slice with its respective percentage so viewers do not have to infer them from the angles or area:\nIn general, when displaying quantities, position and length are preferred over angles and/or area. Brightness and color are even harder to quantify than angles. But, as we will see later, they are sometimes useful when more than two dimensions must be displayed at once.\n Avoid Psuedo-3D Plots The figure below, taken from the scientific literature5, shows three variables: dose, drug type and survival. Although your screen/book page is flat and two-dimensional, the plot tries to imitate three dimensions and assigned a dimension to each variable.\n(Image courtesy of Karl Broman)\nHumans are not good at seeing in three dimensions (which explains why it is hard to parallel park) and our limitation is even worse with regard to pseudo-three-dimensions. To see this, try to determine the values of the survival variable in the plot above. Can you tell when the purple ribbon intersects the red one? This is an example in which we can easily use color to represent the categorical variable instead of using a pseudo-3D:\n##First read data url \u0026lt;- \u0026quot;https://github.com/kbroman/Talk_Graphs/raw/master/R/fig8dat.csv\u0026quot; dat \u0026lt;- read.csv(url) ##Now make alternative plot dat %\u0026gt;% gather(drug, survival, -log.dose) %\u0026gt;% mutate(drug = gsub(\u0026quot;Drug.\u0026quot;,\u0026quot;\u0026quot;,drug)) %\u0026gt;% ggplot(aes(log.dose, survival, color = drug)) + geom_line() Notice how much easier it is to determine the survival values.\nPseudo-3D is sometimes used completely gratuitously: plots are made to look 3D even when the 3rd dimension does not represent a quantity. This only adds confusion and makes it harder to relay your message. Here are two examples:\n(Images courtesy of Karl Broman)\n Avoid too many significant digits By default, statistical software like R returns many significant digits. The default behavior in R is to show 7 significant digits. That many digits often adds no information and the added visual clutter can make it hard for the viewer to understand the message. As an example, here are the per 10,000 disease rates, computed from totals and population in R, for California across the five decades:\n  state  year  Measles  Pertussis  Polio      California  1940  37.8826320  18.3397861  0.8266512    California  1950  13.9124205  4.7467350  1.9742639    California  1960  14.1386471  NA  0.2640419    California  1970  0.9767889  NA  NA    California  1980  0.3743467  0.0515466  NA     We are reporting precision up to 0.00001 cases per 10,000, a very small value in the context of the changes that are occurring across the dates. In this case, two significant figures is more than enough and clearly makes the point that rates are decreasing:\n  state  year  Measles  Pertussis  Polio      California  1940  37.9  18.3  0.8    California  1950  13.9  4.7  2.0    California  1960  14.1  NA  0.3    California  1970  1.0  NA  NA    California  1980  0.4  0.1  NA     Useful ways to change the number of significant digits or to round numbers are signif and round. You can define the number of significant digits globally by setting options like this: options(digits = 3).\nAnother principle related to displaying tables is to place values being compared on columns rather than rows. Note that our table above is easier to read than this one:\n  state  disease  1940  1950  1960  1970  1980      California  Measles  37.9  13.9  14.1  1  0.4    California  Pertussis  18.3  4.7  NA  NA  0.1    California  Polio  0.8  2.0  0.3  NA  NA      Know your audience Graphs can be used for 1) our own exploratory data analysis, 2) to convey a message to experts, or 3) to help tell a story to a general audience. Make sure that the intended audience understands each element of the plot.\nAs a simple example, consider that for your own exploration it may be more useful to log-transform data and then plot it. However, for a general audience that is unfamiliar with converting logged values back to the original measurements, using a log-scale for the axis instead of log-transformed values will be much easier to digest.\n Know when to include 0 When using barplots, it is misinformative not to start the bars at 0. This is because, by using a barplot, we are implying the length is proportional to the quantities being displayed. By avoiding 0, relatively small differences can be made to look much bigger than they actually are. This approach is often used by politicians or media organizations trying to exaggerate a difference. Below is an illustrative example used by Peter Aldhous in this lecture: http://paldhous.github.io/ucb/2016/dataviz/week2.html.\n(Source: Fox News, via Media Matters6.)\nFrom the plot above, it appears that apprehensions have almost tripled when, in fact, they have only increased by about 16%. Starting the graph at 0 illustrates this clearly:\nHere is another example, described in detail in a Flowing Data blog post:\n(Source: Fox News, via Flowing Data7.)\nThis plot makes a 13% increase look like a five fold change. Here is the appropriate plot:\nFinally, here is an extreme example that makes a very small difference of under 2% look like a 10-100 fold change:\n(Source: Venezolana de Televisión via Pakistan Today8 and Diego Mariano.)\nHere is the appropriate plot:\nWhen using position rather than length, it is then not necessary to include 0. This is particularly the case when we want to compare differences between groups relative to the within-group variability. Here is an illustrative example showing country average life expectancy stratified across continents in 2012:\nNote that in the plot on the left, which includes 0, the space between 0 and 43 adds no information and makes it harder to compare the between and within group variability.\n Do not distort quantities During President Barack Obama’s 2011 State of the Union Address, the following chart was used to compare the US GDP to the GDP of four competing nations:\n(Source: The 2011 State of the Union Address9)\nJudging by the area of the circles, the US appears to have an economy over five times larger than China’s and over 30 times larger than France’s. However, if we look at the actual numbers, we see that this is not the case. The actual ratios are 2.6 and 5.8 times bigger than China and France, respectively. The reason for this distortion is that the radius, rather than the area, was made to be proportional to the quantity, which implies that the proportion between the areas is squared: 2.6 turns into 6.5 and 5.8 turns into 34.1. Here is a comparison of the circles we get if we make the value proportional to the radius and to the area:\ngdp \u0026lt;- c(14.6, 5.7, 5.3, 3.3, 2.5) gdp_data \u0026lt;- data.frame(Country = rep(c(\u0026quot;United States\u0026quot;, \u0026quot;China\u0026quot;, \u0026quot;Japan\u0026quot;, \u0026quot;Germany\u0026quot;, \u0026quot;France\u0026quot;),2), y = factor(rep(c(\u0026quot;Radius\u0026quot;,\u0026quot;Area\u0026quot;),each=5), levels = c(\u0026quot;Radius\u0026quot;, \u0026quot;Area\u0026quot;)), GDP= c(gdp^2/min(gdp^2), gdp/min(gdp))) %\u0026gt;% mutate(Country = reorder(Country, GDP)) gdp_data %\u0026gt;% ggplot(aes(Country, y, size = GDP)) + geom_point(show.legend = FALSE, color = \u0026quot;blue\u0026quot;) + scale_size(range = c(2,25)) + coord_flip() + ylab(\u0026quot;\u0026quot;) + xlab(\u0026quot;\u0026quot;) # identical to labs(y = \u0026quot;\u0026quot;, x = \u0026quot;\u0026quot;) Not surprisingly, ggplot2 defaults to using area rather than radius. Of course, in this case, we really should not be using area at all since we can use position and length:\ngdp_data %\u0026gt;% filter(y == \u0026quot;Area\u0026quot;) %\u0026gt;% ggplot(aes(Country, GDP)) + geom_bar(stat = \u0026quot;identity\u0026quot;, width = 0.5) + labs(y = \u0026quot;GDP in trillions of US dollars\u0026quot;)  Order categories by a meaningful value When one of the axes is used to show categories, as is done in barplots, the default ggplot2 behavior is to order the categories alphabetically when they are defined by character strings. If they are defined by factors, they are ordered by the factor levels. We rarely want to use alphabetical order. Instead, we should order by a meaningful quantity. In all the cases above, the barplots were ordered by the values being displayed. The exception was the graph showing barplots comparing browsers. In this case, we kept the order the same across the barplots to ease the comparison. Specifically, instead of ordering the browsers separately in the two years, we ordered both years by the average value of 2000 and 2015.\nWe previously learned how to use the reorder function, which helps us achieve this goal. To appreciate how the right order can help convey a message, suppose we want to create a plot to compare the murder rate across states. We are particularly interested in the most dangerous and safest states. Note the difference when we order alphabetically (the default) versus when we order by the actual rate:\ndata(murders) p1 \u0026lt;- murders %\u0026gt;% mutate(murder_rate = total / population * 100000) %\u0026gt;% ggplot(aes(x = state, y = murder_rate)) + geom_bar(stat=\u0026quot;identity\u0026quot;) + coord_flip() + theme(axis.text.y = element_text(size = 8)) + xlab(\u0026quot;\u0026quot;) p2 \u0026lt;- murders %\u0026gt;% mutate(murder_rate = total / population * 100000) %\u0026gt;% mutate(state = reorder(state, murder_rate)) %\u0026gt;% # here\u0026#39;s the magic! ggplot(aes(x = state, y = murder_rate)) + geom_bar(stat=\u0026quot;identity\u0026quot;) + coord_flip() + theme(axis.text.y = element_text(size = 8)) + xlab(\u0026quot;\u0026quot;) grid.arrange(p1, p2, ncol = 2) # we\u0026#39;ll cover this later We can make the second plot like this:\ndata(murders) murders %\u0026gt;% mutate(murder_rate = total / population * 100000) %\u0026gt;% mutate(state = reorder(state, murder_rate)) %\u0026gt;% ggplot(aes(state, murder_rate)) + geom_bar(stat=\u0026quot;identity\u0026quot;) + coord_flip() + theme(axis.text.y = element_text(size = 6)) + xlab(\u0026quot;\u0026quot;) The reorder function lets us reorder groups as well. Earlier we saw an example related to income distributions across regions. Here are the two versions plotted against each other:\nThe first orders the regions alphabetically, while the second orders them by the group’s median.\n Show the data We have focused on displaying single quantities across categories. We now shift our attention to displaying data, with a focus on comparing groups.\nTo motivate our first principle, “show the data”, we go back to our artificial example of describing heights to a person who is unaware of some basic facts about the population of interest (and is otherwise unsophisticated). This time let’s assume that this person is interested in the difference in heights between males and females. A commonly seen plot used for comparisons between groups, popularized by software such as Microsoft Excel, is the dynamite plot, which shows the average and standard errors.10 The plot looks like this:\nThe average of each group is represented by the top of each bar and the antennae extend out from the average to the average plus two standard errors. If all ET receives is this plot, he will have little information on what to expect if he meets a group of human males and females. The bars go to 0: does this mean there are tiny humans measuring less than one foot? Are all males taller than the tallest females? Is there a range of heights? ET can’t answer these questions since we have provided almost no information on the height distribution.\nThis brings us to our first principle: show the data. This simple ggplot2 code already generates a more informative plot than the barplot by simply showing all the data points:\nheights %\u0026gt;% ggplot(aes(sex, height)) + geom_point() For example, this plot gives us an idea of the range of the data. However, this plot has limitations as well, since we can’t really see all the 238 and 812 points plotted for females and males, respectively, and many points are plotted on top of each other. As we have previously described, visualizing the distribution is much more informative. But before doing this, we point out two ways we can improve a plot showing all the points.\nThe first is to add jitter, which adds a small random shift to each point. In this case, adding horizontal jitter does not alter the interpretation, since the point heights do not change, but we minimize the number of points that fall on top of each other and, therefore, get a better visual sense of how the data is distributed. A second improvement comes from using alpha blending: making the points somewhat transparent. The more points fall on top of each other, the darker the plot, which also helps us get a sense of how the points are distributed. Here is the same plot with jitter and alpha blending:\nheights %\u0026gt;% ggplot(aes(sex, height)) + geom_jitter(width = 0.1, alpha = 0.2) Now we start getting a sense that, on average, males are taller than females. We also note dark horizontal bands of points, demonstrating that many report values that are rounded to the nearest integer.\n Faceting Looking at the previous plot, it’s easy to tell that males tend to be taller than females. Before, we showed how we can plot two distributions over each other using an aesthetic mapping. Something like this:\nheights %\u0026gt;% ggplot(aes(x = height, fill = sex)) + geom_histogram(alpha = .5, show.legend = TRUE) + labs(fill = \u0026#39;Sex\u0026#39;) ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. Sometimes, putting the plots on top of each other, even with a well-chosen alpha, does not clearly communicate the differences in the distribution. When we want to compare side-by-side, we will often use facets. Facets are a bit like supercharged aesthetic mapping because they let us separate plots based on categorical variables, but instead of putting them together, we can have side-by-side plots.\nTwo functions in ggplot give facets: facet_wrap and facet_grid. We’ll use facet_grid as this is a little more powerful.\nFacets are added as an additional layer like this: + facet_grid(. ~ sex). Inside the function, we have a “formula” that is written without quotes (which is unusual for R). Since facet_grid takes a “formula”, all we have to do to facet is decide how we want to lay out our plots. If we want each of the faceting groups to lie along the vertical axis, we put the variable on which we want to facet before the “~”, and after the “~” we simply put a period. If we want the groups to lie along the horizontal axis, we put the variable after the “~” and the period before. In the example, we’ll separate the histogram by drawing them side by side along the horizontal axis.\nheights %\u0026gt;% ggplot(aes(x = height)) + geom_histogram(binwidth = 1, color=\u0026quot;black\u0026quot;) + facet_grid(.~sex) This would be the result if we took the females, plotted the histogram, then took the males, made another histogram, and then put them side by side. But we do it in one command by adding +facet_grid(...)\nUse common axes with facets Since we have plots side-by-side, they can have different scales along the x-axis (or along the y-axis if we were stacking with sex ~ .). We want to be careful here - if we don’t have matching scales on these axes, then it’ll be really hard to visually see differences in the distribution.\nAs an example of what not to do, and to show that we can use the scales argument in facet_grid, we can allow the x-axis to freely scale between the plots. This makes it hard to tell that males are, on average, taller because the average male height, despite being larger than the average female height (70 vs. 65 or so) falls in the same location within the plot box. Note that 80 is the extreme edge for the left plot, but not in the right plot.\nheights %\u0026gt;% ggplot(aes(height)) + geom_histogram(binwidth = 1, color=\u0026quot;black\u0026quot;) + facet_grid(. ~ sex, scales = \u0026quot;free_x\u0026quot;)  Align plots vertically to see horizontal changes and horizontally to see vertical changes In these histograms, the visual cue related to decreases or increases in height are shifts to the left or right, respectively: horizontal changes. Aligning the plots vertically helps us see this change when the axes are fixed:\nheights %\u0026gt;% ggplot(aes(height)) + geom_histogram(binwidth = 1, color=\u0026quot;black\u0026quot;) + facet_grid(. ~ sex) p2 \u0026lt;- heights %\u0026gt;% ggplot(aes(height)) + geom_histogram(binwidth = 1, color=\u0026quot;black\u0026quot;) + facet_grid(sex~.) p2 This plot makes it much easier to notice that men’s heights are, on average, higher.\nThe sample size of females is smaller than of males – that is, we have more males in the data. Try table(heights$sex) to see this. It’s also clear from the above plot because the height of the bars on the y-axis (count) are smaller for females. If we are interested in the distribution within our sample, this is useful. If we’re interested in the distribution of females vs. the distribution of males, we might want to re-scale the y-axis.\np2 \u0026lt;- heights %\u0026gt;% ggplot(aes(height)) + geom_histogram(binwidth = 1, color=\u0026quot;black\u0026quot;) + facet_grid(sex~., scales = \u0026#39;free_y\u0026#39;) p2 We still have count on the y-axis, so we didn’t switch to density (though it would look the same). Instead, we rescaled the y-axis, which gives us a different perspective but still contains the count information.\nIf we want the more compact summary provided by boxplots, we then align them horizontally since, by default, boxplots move up and down with changes in height. Following our show the data principle, we then overlay all the data points:\np3 \u0026lt;- heights %\u0026gt;% ggplot(aes(sex, height)) + geom_boxplot(coef=3) + geom_jitter(width = 0.1, alpha = 0.2) + ylab(\u0026quot;Height in inches\u0026quot;) Now contrast and compare these three plots, based on exactly the same data:\nNotice how much more we learn from the two plots on the right. Barplots are useful for showing one number, but not very useful when we want to describe distributions.\n Facet grids As the name implies, facet_grid can make more than just side-by-plots. If we specify variables on boths sides of the “~”, we get a grid of plots.\ngapminder::gapminder %\u0026gt;% filter(year %in% c(1952,1972, 1992, 2002)) %\u0026gt;% filter(continent != \u0026#39;Oceania\u0026#39;) %\u0026gt;% ggplot(aes(x = lifeExp)) + geom_density() + facet_grid(continent ~ year) This makes it easy to read the life expectancy distribution over time (left-to-right) and across continents (up-and-down). It makes it easy to see that Africa has spread it’s life expectancy distribution (some improved, some didn’t), while Europe has become more clustered at the top end over time. Faceting in a grid is very helpful when you have a time dimension.\n Visual cues to be compared should be adjacent, continued For each continent, let’s compare income in 1970 versus 2010. When comparing income data across regions between 1970 and 2010, we made a figure similar to the one below, but this time we investigate continents rather than regions.\nNote that there are two gapminder datasets, one in dslabs and one in the gapminder package. The dslabs version has more data, so I will switch to that here by using dslabs::gapminder as our data.\ndslabs::gapminder %\u0026gt;% filter(year %in% c(1970, 2010) \u0026amp; !is.na(gdp)) %\u0026gt;% mutate(dollars_per_day = gdp/population/365) %\u0026gt;% mutate(labels = paste(year, continent)) %\u0026gt;% # creating text labels ggplot(aes(x = labels, y = dollars_per_day)) + geom_boxplot() + theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.25)) + scale_y_continuous(trans = \u0026quot;log2\u0026quot;) + ylab(\u0026quot;Income in dollars per day\u0026quot;) The default in ggplot2 is to order labels alphabetically so the labels with 1970 come before the labels with 2010, making the comparisons challenging because a continent’s distribution in 1970 is visually far from its distribution in 2010. It is much easier to make the comparison between 1970 and 2010 for each continent when the boxplots for that continent are next to each other:\ndslabs::gapminder %\u0026gt;% filter(year %in% c(1970, 2010) \u0026amp; !is.na(gdp)) %\u0026gt;% mutate(dollars_per_day = gdp/population/365) %\u0026gt;% mutate(labels = paste(continent, year)) %\u0026gt;% ggplot(aes(labels, dollars_per_day)) + geom_boxplot() + theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = .25)) + scale_y_continuous(trans = \u0026quot;log2\u0026quot;) + ylab(\u0026quot;Income in dollars per day\u0026quot;)  Use color The comparison becomes even easier to make if we use color to denote the two things we want to compare. Now we do not have to make the labels column and can just use continent on the x-axis:\n  Think of the color blind About 10% of the population is color blind. Unfortunately, the default colors used in ggplot2 are not optimal for this group. However, ggplot2 does make it easy to change the color palette used in the plots. An example of how we can use a color blind friendly palette is described here: http://www.cookbook-r.com/Graphs/Colors_(ggplot2)/#a-colorblind-friendly-palette:\ncolor_blind_friendly_cols \u0026lt;- c(\u0026quot;#999999\u0026quot;, \u0026quot;#E69F00\u0026quot;, \u0026quot;#56B4E9\u0026quot;, \u0026quot;#009E73\u0026quot;, \u0026quot;#F0E442\u0026quot;, \u0026quot;#0072B2\u0026quot;, \u0026quot;#D55E00\u0026quot;, \u0026quot;#CC79A7\u0026quot;) Here are the colors From Seafood Prices Reveal Impacts of a Major Ecological Disturbance:\nThere are several resources that can help you select colors, for example this one: http://bconnelly.net/2013/10/creating-colorblind-friendly-figures/.\nUsing a discrete color palette If you’re simply trying to differentiate between groups by using color, there are many ways of changing your color palette in ggplot. Most use scale_fill_discrete or scale_color_discrete (depending on the aesthetic for which you’re setting the color).\nThe easiest way of getting good-looking (e.g. non-default) colors is the scale_fill_viridis_d function, which “inherits” (takes the place of and has the properties of) scale_fill_discrete. Viridis has four color palettes and each is designed to be used to maximize the differentiation between colors.\nWe will subset our dslabs::gapminder dataset to five different years and take a look at what Viridis colors can do across those five:\ngp = dslabs::gapminder %\u0026gt;% filter(year == 1990 | year == 1995 | year==2000 | year == 2005 | year==2010 ) %\u0026gt;% ggplot(aes(x = continent, y = gdp/population, fill = as.factor(year))) + coord_flip() gp + geom_boxplot() + labs(title = \u0026#39;Default\u0026#39;) The default uses five different colors plucked seemingly at random. They are actually drawn from a palette of default ggplot colors.\nLet’s try Viridis\ngp = dslabs::gapminder %\u0026gt;% filter(year == 1990 | year == 1995 | year==2000 | year == 2005 | year==2010 ) %\u0026gt;% ggplot(aes(x = continent, y = gdp/population, fill = as.factor(year))) + coord_flip() + labs(fill = \u0026#39;Year\u0026#39;) viridis_a = gp + geom_boxplot() + labs(title = \u0026#39;Viridis A\u0026#39;) + scale_fill_viridis_d(option = \u0026#39;A\u0026#39;) viridis_b = gp + geom_boxplot() + labs(title = \u0026#39;Viridis B\u0026#39;) + scale_fill_viridis_d(option = \u0026#39;B\u0026#39;) viridis_c = gp + geom_boxplot() + labs(title = \u0026#39;Viridis C\u0026#39;) + scale_fill_viridis_d(option = \u0026#39;C\u0026#39;) viridis_d = gp + geom_boxplot() + labs(title = \u0026#39;Viridis D\u0026#39;) + scale_fill_viridis_d(option = \u0026#39;D\u0026#39;) grid.arrange(viridis_a, viridis_b, viridis_c, viridis_d) Viridis uses a better palette of colors that, though distinct, have some cohesiveness to them.\nWe can also use a custom palette, like the colorblind palette from before. If the palette has more entries than we have (N) distinct categories, R reverts to the default.\ngp = dslabs::gapminder %\u0026gt;% filter(year == 1990 | year == 1995 | year==2000 | year == 2005 | year==2010 ) %\u0026gt;% ggplot(aes(x = continent, y = gdp/population, fill = as.factor(year))) + coord_flip() + labs(fill = \u0026#39;Year\u0026#39;) custom_a = gp + geom_boxplot() + labs(title = \u0026#39;Viridis A\u0026#39;) + scale_fill_discrete(type = color_blind_friendly_cols) custom_b = gp + geom_boxplot() + labs(title = \u0026#39;Viridis A\u0026#39;) + scale_fill_discrete(type = color_blind_friendly_cols[1:3]) grid.arrange(custom_a, custom_b) In the lower plot, we only give it a length-3 vector of colors, and it needs 5, so it returns to default.\n Using a continuous color palette We may often want to use the color to indicate a numeric value instead of simply using it to delineate groupings. When this is the case, the fill or color aesthetic is set to a continuous value. For instance, if one were to plot election results by precinct, we may represent precincts with heavy Republican support as dark red, swing districts as purple or white, and Democratic districts as blue. The intensity of red/blue indicates how heavily slanted votes in that precinct were in the election. This is known as a color ramp.\nLets plot one country’s GDP by year, but have the color indicate the life expectancy:\ndslabs::gapminder %\u0026gt;% filter(country==\u0026#39;Romania\u0026#39; \u0026amp; year\u0026gt;1980) %\u0026gt;% ggplot(aes(x = year, y = gdp/population, color = life_expectancy)) + scale_fill_continuous() + geom_point(size = 5) + labs(x = \u0026#39;Year\u0026#39;, y = \u0026#39;GDP Per Capita\u0026#39;, fill = \u0026#39;Life Expectancy\u0026#39;) We can see that GDP per capita went up, then down in 1989 (fall of the Soviet Union), then up after that. The color ramp tells us that life expectancy reached 75 years near the end, and it certainly improved in the post-2000 era.\nWe can set some of the points on the ramp manually - here, the ramp starts at dark blue and ends at light blue, but what if we wanted to start at red, and at blue, and cross white in the middle? Easy! We use scale_color_gradient2 and specify the colors for low, mid, and high, and specify the midpoint at 72.5 years.\ndslabs::gapminder %\u0026gt;% filter(country==\u0026#39;Romania\u0026#39; \u0026amp; year\u0026gt;1980) %\u0026gt;% ggplot(aes(x = year, y = gdp/population, color = life_expectancy)) + scale_color_gradient2(low = \u0026#39;red\u0026#39;, mid = \u0026#39;white\u0026#39;, high = \u0026#39;blue\u0026#39;, midpoint = 72.5) + geom_point(size = 5) + labs(x = \u0026#39;Year\u0026#39;, y = \u0026#39;GDP Per Capita\u0026#39;, fill = \u0026#39;Life Expectancy\u0026#39;) The midpoint specification is extra useful when there is a threshold (like 50% of the vote) that indicates a different qualitative outcome.\nThe gradient2 method does not always work with the colorblind discrete palette - the colors interpolated may be in the range in which colorblindness tends to be a problem:\ndslabs::gapminder %\u0026gt;% filter(country==\u0026#39;Romania\u0026#39; \u0026amp; year\u0026gt;1980) %\u0026gt;% ggplot(aes(x = year, y = gdp/population, color = life_expectancy)) + scale_color_gradient2(low = color_blind_friendly_cols[3], mid = color_blind_friendly_cols[4], high = color_blind_friendly_cols[5], midpoint = 72.5) + geom_point(size = 5) + labs(x = \u0026#39;Year\u0026#39;, y = \u0026#39;GDP Per Capita\u0026#39;, fill = \u0026#39;Life Expectancy\u0026#39;)   gridExtra and grid.arrange The gridExtra package has been used a few times in this lesson to combine plots using the grid.arrange function. The use is pretty intuitive - you save your plots as objects plot1 \u0026lt;- ggplot(data, aes(x = var1)) and plot2 \u0026lt;- ggplot(data, aes(x = var2)), and then use grid.arrange(plot1, plot2) to combine. The function will align as best it can, and there are more advanced grob-based functions that can adjust and align axes between plots, but we won’t get into them. If we want to set the layout, we can specify nrow and ncol to set the rows and columns.\nThe very-useful patchwork package is quickly replacing grid.arrange and provides more flexibility.\n   http://kbroman.org/↩︎\n https://www.biostat.wisc.edu/~kbroman/presentations/graphs2017.pdf↩︎\n https://github.com/kbroman/Talk_Graphs↩︎\n http://paldhous.github.io/ucb/2016/dataviz/index.html↩︎\n https://projecteuclid.org/download/pdf_1/euclid.ss/1177010488↩︎\n http://mediamatters.org/blog/2013/04/05/fox-news-newest-dishonest-chart-immigration-enf/193507↩︎\n http://flowingdata.com/2012/08/06/fox-news-continues-charting-excellence/↩︎\n https://www.pakistantoday.com.pk/2018/05/18/whats-at-stake-in-venezuelan-presidential-vote↩︎\n https://www.youtube.com/watch?v=kl2g40GoRxg↩︎\n If you’re unfamiliar, standard errors are defined later in the course—do not confuse them with the standard deviation of the data.↩︎\n   ","date":1612828800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1632235346,"objectID":"570f902af3e232a725f0155a46b1910b","permalink":"https://ssc442.netlify.app/content/04-content/","publishdate":"2021-09-21T00:00:00Z","relpermalink":"/content/04-content/","section":"content","summary":"Readings Guiding Questions Data visualization principles  Encoding data using visual cues Avoid Psuedo-3D Plots Avoid too many significant digits Know your audience Know when to include 0 Do not distort quantities Order categories by a meaningful value Show the data Faceting  Use common axes with facets Align plots vertically to see horizontal changes and horizontally to see vertical changes Facet grids Visual cues to be compared should be adjacent, continued Use color  Think of the color blind  Using a discrete color palette Using a continuous color palette  gridExtra and grid.","tags":null,"title":"Visualizations in Practice","type":"docs"},{"authors":null,"categories":null,"content":"   Required Reading  Supplemental Readings Guiding Questions  Discrete probability  Relative frequency Notation Probability distributions Monte Carlo simulations for categorical data  Setting the random seed With and without replacement  Independence Conditional probabilities Addition and multiplication rules  Multiplication rule Multiplication rule under independence Addition rule  Combinations and permutations  Monte Carlo example  Examples  Monty Hall problem Birthday problem  Infinity in practice Theoretical continuous distributions  Theoretical distributions as approximations The probability density  Monte Carlo simulations for continuous variables Continuous distributions  Random variables  Definition of Random variables Sampling models The probability distribution of a random variable Distributions versus probability distributions Notation for random variables The expected value and standard error  Population SD versus the sample SD  Central Limit Theorem  How large is large in the Central Limit Theorem?  Statistical properties of averages Law of large numbers  Misinterpreting law of averages     Required Reading  This page.  Supplemental Readings   Why It’s So Hard for Us to Visualize Uncertainty  Amanda Cox’s keynote address at the 2017 OpenVis Conf  Communicating Uncertainty When Lives Are on the Line  Showing uncertainty during the live election forecast \u0026amp; Trolling the uncertainty dial   Guiding Questions  Why is uncertainty inherently a major part of data analytics? How have past attempts to visualize uncertainty failed? What is the right way to visualize election uncertainty?  As with last week, today’s lecture will ask you to work with R during the lecture.\n  Discrete probability We start by covering some basic principles related to categorical data. The subset of probability is referred to as discrete probability. It will help us understand the probability theory we will later introduce for numeric and continuous data, which is much more common in data science applications. Discrete probability is more useful in card games and therefore we use these as examples.\nRelative frequency The word probability is used in everyday language. Answering questions about probability is often hard, if not impossible. Here we discuss a mathematical definition of probability that does permit us to give precise answers to certain questions.\nFor example, if I have 2 red beads and 3 blue beads inside an urn1 (most probability books use this archaic term, so we do too) and I pick one at random, what is the probability of picking a red one? Our intuition tells us that the answer is 2/5 or 40%. A precise definition can be given by noting that there are five possible outcomes of which two satisfy the condition necessary for the event “pick a red bead”. Since each of the five outcomes has the same chance of occurring, we conclude that the probability is .4 for red and .6 for blue.\nA more tangible way to think about the probability of an event is as the proportion of times the event occurs when we repeat the experiment an infinite number of times, independently, and under the same conditions.\n Notation We use the notation \\(\\mbox{Pr}(A)\\) to denote the probability of event \\(A\\) happening. We use the very general term event to refer to things that can happen when something occurs by chance. In our previous example, the event was “picking a red bead”. In a political poll in which we call 100 likely voters at random, an example of an event is “calling 48 Democrats and 52 Republicans”.\nIn data science applications, we will often deal with continuous variables. These events will often be things like “is this person taller than 6 feet”. In this case, we write events in a more mathematical form: \\(X \\geq 6\\). We will see more of these examples later. Here we focus on categorical data.\n Probability distributions If we know the relative frequency of the different categories, defining a distribution for categorical outcomes is relatively straightforward. We simply assign a probability to each category. In cases that can be thought of as beads in an urn, for each bead type, their proportion defines the distribution.\nIf we are randomly calling likely voters from a population that is 44% Democrat, 44% Republican, 10% undecided, and 2% Green Party, these proportions define the probability for each group. The probability distribution is:\n  Pr(picking a Republican) = 0.44  Pr(picking a Democrat) = 0.44  Pr(picking an undecided) = 0.10  Pr(picking a Green) = 0.02     Monte Carlo simulations for categorical data Computers provide a way to actually perform the simple random experiment described above: pick a bead at random from a bag that contains three blue beads and two red ones. Random number generators permit us to mimic the process of picking at random.\nAn example is the sample function in R. We demonstrate its use in the code below. First, we use the function rep to generate the urn:\nbeads \u0026lt;- rep(c(\u0026quot;red\u0026quot;, \u0026quot;blue\u0026quot;), times = c(2,3)) beads ## [1] \u0026quot;red\u0026quot; \u0026quot;red\u0026quot; \u0026quot;blue\u0026quot; \u0026quot;blue\u0026quot; \u0026quot;blue\u0026quot; and then use sample to pick a bead at random:\nsample(beads, 1) ## [1] \u0026quot;blue\u0026quot; This line of code produces one random outcome. We want to repeat this experiment an infinite number of times, but it is impossible to repeat forever. Instead, we repeat the experiment a large enough number of times to make the results practically equivalent to repeating forever. This is an example of a Monte Carlo simulation.\nMuch of what mathematical and theoretical statisticians study, which we do not cover in this class, relates to providing rigorous definitions of “practically equivalent” as well as studying how close a large number of experiments gets us to what happens in the limit. Later in this lecture, we provide a practical approach to deciding what is “large enough”.\nTo perform our first Monte Carlo simulation, we use the replicate function, which permits us to repeat the same task any number of times. Here, we repeat the random event \\(B =\\) 10,000 times:\nB \u0026lt;- 10000 events \u0026lt;- replicate(B, sample(beads, 1)) We can now see if our definition actually is in agreement with this Monte Carlo simulation approximation. We can use table to see the distribution:\ntab \u0026lt;- table(events) tab ## events ## blue red ## 5983 4017 and prop.table gives us the proportions:\nprop.table(tab) ## events ## blue red ## 0.5983 0.4017 The numbers above are the estimated probabilities provided by this Monte Carlo simulation. Statistical theory, not covered here, tells us that as \\(B\\) gets larger, the estimates get closer to 3/5=.6 and 2/5=.4.\nAlthough this is a simple and not very useful example, we will use Monte Carlo simulations to estimate probabilities in cases in which it is harder to compute the exact ones. Before delving into more complex examples, we use simple ones to demonstrate the computing tools available in R.\nSetting the random seed Before we continue, we will briefly explain the following important line of code:\nset.seed(1986) Throughout this class, we use random number generators. This implies that many of the results presented can actually change by chance, which then suggests that a frozen version of the class may show a different result than what you obtain when you try to code as shown in the class. This is actually fine since the results are random and change from time to time. However, if you want to ensure that results are exactly the same every time you run them, you can set R’s random number generation seed to a specific number. Above we set it to 1986. We want to avoid using the same seed everytime. A popular way to pick the seed is the year - month - day. For example, we picked 1986 on December 20, 2018: \\(2018 - 12 - 20 = 1986\\).\nYou can learn more about setting the seed by looking at the documentation:\n?set.seed In the exercises, we may ask you to set the seed to assure that the results you obtain are exactly what we expect them to be.\n With and without replacement The function sample has an argument that permits us to pick more than one element from the urn. However, by default, this selection occurs without replacement: after a bead is selected, it is not put back in the bag. Notice what happens when we ask to randomly select five beads:\nsample(beads, 5) ## [1] \u0026quot;red\u0026quot; \u0026quot;blue\u0026quot; \u0026quot;blue\u0026quot; \u0026quot;blue\u0026quot; \u0026quot;red\u0026quot; sample(beads, 5) ## [1] \u0026quot;red\u0026quot; \u0026quot;red\u0026quot; \u0026quot;blue\u0026quot; \u0026quot;blue\u0026quot; \u0026quot;blue\u0026quot; sample(beads, 5) ## [1] \u0026quot;blue\u0026quot; \u0026quot;red\u0026quot; \u0026quot;blue\u0026quot; \u0026quot;red\u0026quot; \u0026quot;blue\u0026quot; This results in rearrangements that always have three blue and two red beads. If we ask that six beads be selected, we get an error:\nsample(beads, 6) Error in sample.int(length(x), size, replace, prob) : cannot take a sample larger than the population when 'replace = FALSE'\nHowever, the sample function can be used directly, without the use of replicate, to repeat the same experiment of picking 1 out of the 5 beads, continually, under the same conditions. To do this, we sample with replacement: return the bead back to the urn after selecting it. We can tell sample to do this by changing the replace argument, which defaults to FALSE, to replace = TRUE:\nevents \u0026lt;- sample(beads, B, replace = TRUE) prop.table(table(events)) ## events ## blue red ## 0.6017 0.3983 Not surprisingly, we get results very similar to those previously obtained with replicate.\n  Independence We say two events are independent if the outcome of one does not affect the other. The classic example is coin tosses. Every time we toss a fair coin, the probability of seeing heads is 1/2 regardless of what previous tosses have revealed. The same is true when we pick beads from an urn with replacement. In the example above, the probability of red is 0.40 regardless of previous draws.\nMany examples of events that are not independent come from card games. When we deal the first card, the probability of getting a King is 1/13 since there are thirteen possibilities: Ace, Deuce, Three, \\(\\dots\\), Ten, Jack, Queen, King, and Ace. Now if we deal a King for the first card, and don’t replace it into the deck, the probabilities of a second card being a King is less because there are only three Kings left: the probability is 3 out of 51. These events are therefore not independent: the first outcome affected the next one.\nTo see an extreme case of non-independent events, consider our example of drawing five beads at random without replacement:\nx \u0026lt;- sample(beads, 5) If you have to guess the color of the first bead, you will predict blue since blue has a 60% chance. But if I show you the result of the last four outcomes:\nx[2:5] ## [1] \u0026quot;blue\u0026quot; \u0026quot;blue\u0026quot; \u0026quot;blue\u0026quot; \u0026quot;red\u0026quot; would you still guess blue? Of course not. Now you know that the probability of red is 1 since the only bead left is red. The events are not independent, so the probabilities change.\n Conditional probabilities When events are not independent, conditional probabilities are useful. We already saw an example of a conditional probability: we computed the probability that a second dealt card is a King given that the first was a King. In probability, we use the following notation:\n\\[ \\mbox{Pr}(\\mbox{Card 2 is a king} \\mid \\mbox{Card 1 is a king}) = 3/51 \\]\nWe use the \\(\\mid\\) as shorthand for “given that” or “conditional on”.\nWhen two events, say \\(A\\) and \\(B\\), are independent, we have:\n\\[ \\mbox{Pr}(A \\mid B) = \\mbox{Pr}(A) \\]\nThis is the mathematical way of saying: the fact that \\(B\\) happened does not affect the probability of \\(A\\) happening. In fact, this can be considered the mathematical definition of independence.\n Addition and multiplication rules Multiplication rule If we want to know the probability of two events, say \\(A\\) and \\(B\\), occurring, we can use the multiplication rule:\n\\[ \\mbox{Pr}(A \\mbox{ and } B) = \\mbox{Pr}(A)\\mbox{Pr}(B \\mid A) \\] Let’s use Blackjack as an example. In Blackjack, you are assigned two random cards. After you see what you have, you can ask for more. The goal is to get closer to 21 than the dealer, without going over. Face cards are worth 10 points and Aces are worth 11 or 1 (you choose).\nSo, in a Blackjack game, to calculate the chances of getting a 21 by drawing an Ace and then a face card, we compute the probability of the first being an Ace and multiply by the probability of drawing a face card or a 10 given that the first was an Ace: \\(1/13 \\times 16/51 \\approx 0.025\\)\nThe multiplication rule also applies to more than two events. We can use induction to expand for more events:\n\\[ \\mbox{Pr}(A \\mbox{ and } B \\mbox{ and } C) = \\mbox{Pr}(A)\\mbox{Pr}(B \\mid A)\\mbox{Pr}(C \\mid A \\mbox{ and } B) \\]\n Multiplication rule under independence When we have independent events, then the multiplication rule becomes simpler:\n\\[ \\mbox{Pr}(A \\mbox{ and } B \\mbox{ and } C) = \\mbox{Pr}(A)\\mbox{Pr}(B)\\mbox{Pr}(C) \\]\nBut we have to be very careful before using this since assuming independence can result in very different and incorrect probability calculations when we don’t actually have independence.\nAs an example, imagine a court case in which the suspect was described as having a mustache and a beard. The defendant has a mustache and a beard and the prosecution brings in an “expert” to testify that 1/10 men have beards and 1/5 have mustaches, so using the multiplication rule we conclude that only \\(1/10 \\times 1/5\\) or 0.02 have both.\nBut to multiply like this we need to assume independence! Say the conditional probability of a man having a mustache conditional on him having a beard is .95. So the correct calculation probability is much higher: \\(1/10 \\times 95/100 = 0.095\\).\nThe multiplication rule also gives us a general formula for computing conditional probabilities:\n\\[ \\mbox{Pr}(B \\mid A) = \\frac{\\mbox{Pr}(A \\mbox{ and } B)}{ \\mbox{Pr}(A)} \\]\nTo illustrate how we use these formulas and concepts in practice, we will use several examples related to card games.\n Addition rule The addition rule tells us that:\n\\[ \\mbox{Pr}(A \\mbox{ or } B) = \\mbox{Pr}(A) + \\mbox{Pr}(B) - \\mbox{Pr}(A \\mbox{ and } B) \\]\nThis rule is intuitive: think of a Venn diagram. If we simply add the probabilities, we count the intersection twice so we need to substract one instance.\n  Combinations and permutations In our very first example, we imagined an urn with five beads. As a reminder, to compute the probability distribution of one draw, we simply listed out all the possibilities. There were 5 and so then, for each event, we counted how many of these possibilities were associated with the event. The resulting probability of choosing a blue bead is 3/5 because out of the five possible outcomes, three were blue.\nFor more complicated cases, the computations are not as straightforward. For instance, what is the probability that if I draw five cards without replacement, I get all cards of the same suit, what is known as a “flush” in poker? In a discrete probability course you learn theory on how to make these computations. Here we focus on how to use R code to compute the answers.\nFirst, let’s construct a deck of cards. For this, we will use the expand.grid and paste functions. We use paste to create strings by joining smaller strings. To do this, we take the number and suit of a card and create the card name like this:\nnumber \u0026lt;- \u0026quot;Three\u0026quot; suit \u0026lt;- \u0026quot;Hearts\u0026quot; paste(number, suit) ## [1] \u0026quot;Three Hearts\u0026quot; paste also works on pairs of vectors performing the operation element-wise:\npaste(letters[1:5], as.character(1:5)) ## [1] \u0026quot;a 1\u0026quot; \u0026quot;b 2\u0026quot; \u0026quot;c 3\u0026quot; \u0026quot;d 4\u0026quot; \u0026quot;e 5\u0026quot; The function expand.grid gives us all the combinations of entries of two vectors. For example, if you have blue and black pants and white, grey, and plaid shirts, all your combinations are:\nexpand.grid(pants = c(\u0026quot;blue\u0026quot;, \u0026quot;black\u0026quot;), shirt = c(\u0026quot;white\u0026quot;, \u0026quot;grey\u0026quot;, \u0026quot;plaid\u0026quot;)) ## pants shirt ## 1 blue white ## 2 black white ## 3 blue grey ## 4 black grey ## 5 blue plaid ## 6 black plaid Here is how we generate a deck of cards:\nsuits \u0026lt;- c(\u0026quot;Diamonds\u0026quot;, \u0026quot;Clubs\u0026quot;, \u0026quot;Hearts\u0026quot;, \u0026quot;Spades\u0026quot;) numbers \u0026lt;- c(\u0026quot;Ace\u0026quot;, \u0026quot;Deuce\u0026quot;, \u0026quot;Three\u0026quot;, \u0026quot;Four\u0026quot;, \u0026quot;Five\u0026quot;, \u0026quot;Six\u0026quot;, \u0026quot;Seven\u0026quot;, \u0026quot;Eight\u0026quot;, \u0026quot;Nine\u0026quot;, \u0026quot;Ten\u0026quot;, \u0026quot;Jack\u0026quot;, \u0026quot;Queen\u0026quot;, \u0026quot;King\u0026quot;) deck \u0026lt;- expand.grid(number=numbers, suit=suits) deck \u0026lt;- paste(deck$number, deck$suit) With the deck constructed, we can double check that the probability of a King in the first card is 1/13 by computing the proportion of possible outcomes that satisfy our condition:\nkings \u0026lt;- paste(\u0026quot;King\u0026quot;, suits) mean(deck %in% kings) ## [1] 0.07692308 Now, how about the conditional probability of the second card being a King given that the first was a King? Earlier, we deduced that if one King is already out of the deck and there are 51 left, then this probability is 3/51. Let’s confirm by listing out all possible outcomes.\nTo do this, we can use the permutations function from the gtools package. For any list of size n, this function computes all the different combinations we can get when we select r items. Here are all the ways we can choose two numbers from a list consisting of 1,2,3:\nlibrary(gtools) permutations(3, 2) ## [,1] [,2] ## [1,] 1 2 ## [2,] 1 3 ## [3,] 2 1 ## [4,] 2 3 ## [5,] 3 1 ## [6,] 3 2 Notice that the order matters here: 3,1 is different than 1,3. Also, note that (1,1), (2,2), and (3,3) do not appear because once we pick a number, it can’t appear again.\nOptionally, we can add a vector. If you want to see five random seven digit phone numbers out of all possible phone numbers (without repeats), you can type:\nall_phone_numbers \u0026lt;- permutations(10, 7, v = 0:9) n \u0026lt;- nrow(all_phone_numbers) index \u0026lt;- sample(n, 5) all_phone_numbers[index,] ## [,1] [,2] [,3] [,4] [,5] [,6] [,7] ## [1,] 1 3 8 0 6 7 5 ## [2,] 2 9 1 6 4 8 0 ## [3,] 5 1 6 0 9 8 2 ## [4,] 7 4 6 0 2 8 1 ## [5,] 4 6 5 9 2 8 0 Instead of using the numbers 1 through 10, the default, it uses what we provided through v: the digits 0 through 9.\nTo compute all possible ways we can choose two cards when the order matters, we type:\nhands \u0026lt;- permutations(52, 2, v = deck) This is a matrix with two columns and 2652 rows. With a matrix we can get the first and second cards like this:\nfirst_card \u0026lt;- hands[,1] second_card \u0026lt;- hands[,2] Now the cases for which the first hand was a King can be computed like this:\nkings \u0026lt;- paste(\u0026quot;King\u0026quot;, suits) sum(first_card %in% kings) ## [1] 204 To get the conditional probability, we compute what fraction of these have a King in the second card:\nsum(first_card%in%kings \u0026amp; second_card%in%kings) / sum(first_card%in%kings) ## [1] 0.05882353 which is exactly 3/51, as we had already deduced. Notice that the code above is equivalent to:\nmean(first_card%in%kings \u0026amp; second_card%in%kings) / mean(first_card%in%kings) ## [1] 0.05882353 which uses mean instead of sum and is an R version of:\n\\[ \\frac{\\mbox{Pr}(A \\mbox{ and } B)}{ \\mbox{Pr}(A)} \\]\nHow about if the order doesn’t matter? For example, in Blackjack if you get an Ace and a face card in the first draw, it is called a Natural 21 and you win automatically. If we wanted to compute the probability of this happening, we would enumerate the combinations, not the permutations, since the order does not matter.\ncombinations(3,2) ## [,1] [,2] ## [1,] 1 2 ## [2,] 1 3 ## [3,] 2 3 In the second line, the outcome does not include (2,1) because (1,2) already was enumerated. The same applies to (3,1) and (3,2).\nSo to compute the probability of a Natural 21 in Blackjack, we can do this:\naces \u0026lt;- paste(\u0026quot;Ace\u0026quot;, suits) facecard \u0026lt;- c(\u0026quot;King\u0026quot;, \u0026quot;Queen\u0026quot;, \u0026quot;Jack\u0026quot;, \u0026quot;Ten\u0026quot;) facecard \u0026lt;- expand.grid(number = facecard, suit = suits) facecard \u0026lt;- paste(facecard$number, facecard$suit) hands \u0026lt;- combinations(52, 2, v = deck) mean(hands[,1] %in% aces \u0026amp; hands[,2] %in% facecard) ## [1] 0.04826546 In the last line, we assume the Ace comes first. This is only because we know the way combination enumerates possibilities and it will list this case first. But to be safe, we could have written this and produced the same answer:\nmean((hands[,1] %in% aces \u0026amp; hands[,2] %in% facecard) | (hands[,2] %in% aces \u0026amp; hands[,1] %in% facecard)) ## [1] 0.04826546 Monte Carlo example Instead of using combinations to deduce the exact probability of a Natural 21, we can use a Monte Carlo to estimate this probability. In this case, we draw two cards over and over and keep track of how many 21s we get. We can use the function sample to draw two cards without replacements:\nhand \u0026lt;- sample(deck, 2) hand ## [1] \u0026quot;Queen Clubs\u0026quot; \u0026quot;Seven Spades\u0026quot; And then check if one card is an Ace and the other a face card or a 10. Going forward, we include 10 when we say face card. Now we need to check both possibilities:\n(hands[1] %in% aces \u0026amp; hands[2] %in% facecard) | (hands[2] %in% aces \u0026amp; hands[1] %in% facecard) ## [1] FALSE If we repeat this 10,000 times, we get a very good approximation of the probability of a Natural 21.\nLet’s start by writing a function that draws a hand and returns TRUE if we get a 21. The function does not need any arguments because it uses objects defined in the global environment.\nblackjack \u0026lt;- function(){ hand \u0026lt;- sample(deck, 2) (hand[1] %in% aces \u0026amp; hand[2] %in% facecard) | (hand[2] %in% aces \u0026amp; hand[1] %in% facecard) } Here we do have to check both possibilities: Ace first or Ace second because we are not using the combinations function. The function returns TRUE if we get a 21 and FALSE otherwise:\nblackjack() ## [1] FALSE Now we can play this game, say, 10,000 times:\nB \u0026lt;- 10000 results \u0026lt;- replicate(B, blackjack()) mean(results) ## [1] 0.0475   Examples In this section, we describe two discrete probability popular examples: the Monty Hall problem and the birthday problem. We use R to help illustrate the mathematical concepts.\nMonty Hall problem In the 1970s, there was a game show called “Let’s Make a Deal” and Monty Hall was the host. At some point in the game, contestants were asked to pick one of three doors. Behind one door there was a prize. The other doors had a goat behind them to show the contestant they had lost. After the contestant picked a door, before revealing whether the chosen door contained a prize, Monty Hall would open one of the two remaining doors and show the contestant there was no prize behind that door. Then he would ask “Do you want to switch doors?” What would you do?\nWe can use probability to show that if you stick with the original door choice, your chances of winning a prize remain 1 in 3. However, if you switch to the other door, your chances of winning double to 2 in 3! This seems counterintuitive. Many people incorrectly think both chances are 1 in 2 since you are choosing between 2 options. You can watch a detailed mathematical explanation on Khan Academy2 or read one on Wikipedia3. Below we use a Monte Carlo simulation to see which strategy is better. Note that this code is written longer than it should be for pedagogical purposes.\nLet’s start with the stick strategy:\nB \u0026lt;- 10000 monty_hall \u0026lt;- function(strategy){ doors \u0026lt;- as.character(1:3) prize \u0026lt;- sample(c(\u0026quot;car\u0026quot;, \u0026quot;goat\u0026quot;, \u0026quot;goat\u0026quot;)) prize_door \u0026lt;- doors[prize == \u0026quot;car\u0026quot;] my_pick \u0026lt;- sample(doors, 1) show \u0026lt;- sample(doors[!doors %in% c(my_pick, prize_door)],1) stick \u0026lt;- my_pick stick == prize_door switch \u0026lt;- doors[!doors%in%c(my_pick, show)] choice \u0026lt;- ifelse(strategy == \u0026quot;stick\u0026quot;, stick, switch) choice == prize_door } stick \u0026lt;- replicate(B, monty_hall(\u0026quot;stick\u0026quot;)) mean(stick) ## [1] 0.3416 switch \u0026lt;- replicate(B, monty_hall(\u0026quot;switch\u0026quot;)) mean(switch) ## [1] 0.6682 As we write the code, we note that the lines starting with my_pick and show have no influence on the last logical operation when we stick to our original choice anyway. From this we should realize that the chance is 1 in 3, what we began with. When we switch, the Monte Carlo estimate confirms the 2/3 calculation. This helps us gain some insight by showing that we are removing a door, show, that is definitely not a winner from our choices. We also see that unless we get it right when we first pick, you win: 1 - 1/3 = 2/3.\n Birthday problem Suppose you are in a classroom with 50 people. If we assume this is a randomly selected group of 50 people, what is the chance that at least two people have the same birthday? Although it is somewhat advanced, we can deduce this mathematically. We will do this later. Here we use a Monte Carlo simulation. For simplicity, we assume nobody was born on February 29. This actually doesn’t change the answer much.\nFirst, note that birthdays can be represented as numbers between 1 and 365, so a sample of 50 birthdays can be obtained like this:\nn \u0026lt;- 50 bdays \u0026lt;- sample(1:365, n, replace = TRUE) To check if in this particular set of 50 people we have at least two with the same birthday, we can use the function duplicated, which returns TRUE whenever an element of a vector is a duplicate. Here is an example:\nduplicated(c(1,2,3,1,4,3,5)) ## [1] FALSE FALSE FALSE TRUE FALSE TRUE FALSE The second time 1 and 3 appear, we get a TRUE. So to check if two birthdays were the same, we simply use the any and duplicated functions like this:\nany(duplicated(bdays)) ## [1] TRUE In this case, we see that it did happen. At least two people had the same birthday.\nTo estimate the probability of a shared birthday in the group, we repeat this experiment by sampling sets of 50 birthdays over and over:\nB \u0026lt;- 10000 same_birthday \u0026lt;- function(n){ bdays \u0026lt;- sample(1:365, n, replace=TRUE) any(duplicated(bdays)) } results \u0026lt;- replicate(B, same_birthday(50)) mean(results) ## [1] 0.9691 Were you expecting the probability to be this high?\nPeople tend to underestimate these probabilities. To get an intuition as to why it is so high, think about what happens when the group size is close to 365. At this stage, we run out of days and the probability is one.\nSay we want to use this knowledge to bet with friends about two people having the same birthday in a group of people. When are the chances larger than 50%? Larger than 75%?\nLet’s create a look-up table. We can quickly create a function to compute this for any group size:\ncompute_prob \u0026lt;- function(n, B=10000){ results \u0026lt;- replicate(B, same_birthday(n)) mean(results) } Using the function sapply, we can perform element-wise operations on any function:\nn \u0026lt;- seq(1,60) prob \u0026lt;- sapply(n, compute_prob) We can now make a plot of the estimated probabilities of two people having the same birthday in a group of size \\(n\\):\nlibrary(tidyverse) prob \u0026lt;- sapply(n, compute_prob) qplot(n, prob) Now let’s compute the exact probabilities rather than use Monte Carlo approximations. Not only do we get the exact answer using math, but the computations are much faster since we don’t have to generate experiments.\nTo make the math simpler, instead of computing the probability of it happening, we will compute the probability of it not happening. For this, we use the multiplication rule.\nLet’s start with the first person. The probability that person 1 has a unique birthday is 1. The probability that person 2 has a unique birthday, given that person 1 already took one, is 364/365. Then, given that the first two people have unique birthdays, person 3 is left with 363 days to choose from. We continue this way and find the chances of all 50 people having a unique birthday is:\n\\[ 1 \\times \\frac{364}{365}\\times\\frac{363}{365} \\dots \\frac{365-n + 1}{365} \\]\nWe can write a function that does this for any number:\nexact_prob \u0026lt;- function(n){ prob_unique \u0026lt;- seq(365,365-n+1)/365 1 - prod( prob_unique) } eprob \u0026lt;- sapply(n, exact_prob) qplot(n, prob) + geom_line(aes(n, eprob), col = \u0026quot;red\u0026quot;) This plot shows that the Monte Carlo simulation provided a very good estimate of the exact probability. Had it not been possible to compute the exact probabilities, we would have still been able to accurately estimate the probabilities.\n  Infinity in practice The theory described here requires repeating experiments over and over forever. In practice we can’t do this. In the examples above, we used \\(B=10,000\\) Monte Carlo experiments and it turned out that this provided accurate estimates. The larger this number, the more accurate the estimate becomes until the approximaton is so good that your computer can’t tell the difference. But in more complex calculations, 10,000 may not be nearly enough. Also, for some calculations, 10,000 experiments might not be computationally feasible. In practice, we won’t know what the answer is, so we won’t know if our Monte Carlo estimate is accurate. We know that the larger \\(B\\), the better the approximation. But how big do we need it to be? This is actually a challenging question and answering it often requires advanced theoretical statistics training.\nOne practical approach we will describe here is to check for the stability of the estimate. The following is an example with the birthday problem for a group of 25 people.\nB \u0026lt;- 10^seq(1, 5, len = 100) compute_prob \u0026lt;- function(B, n=25){ same_day \u0026lt;- replicate(B, same_birthday(n)) mean(same_day) } prob \u0026lt;- sapply(B, compute_prob) qplot(log10(B), prob, geom = \u0026quot;line\u0026quot;) In this plot, we can see that the values start to stabilize (that is, they vary less than .01) around 1000. Note that the exact probability, which we know in this case, is 0.5686997.\nTRY IT\nOne ball will be drawn at random from a box containing: 3 cyan balls, 5 magenta balls, and 7 yellow balls. What is the probability that the ball will be cyan?\n What is the probability that the ball will not be cyan?\n Instead of taking just one draw, consider taking two draws. You take the second draw without returning the first draw to the box. We call this sampling without replacement. What is the probability that the first draw is cyan and that the second draw is not cyan?\n Now repeat the experiment, but this time, after taking the first draw and recording the color, return it to the box and shake the box. We call this sampling with replacement. What is the probability that the first draw is cyan and that the second draw is not cyan?\n Two events \\(A\\) and \\(B\\) are independent if \\(\\mbox{Pr}(A \\mbox{ and } B) = \\mbox{Pr}(A) P(B)\\). Under which situation are the draws independent?\n  You don’t replace the draw. You replace the draw. Neither Both  Say you’ve drawn 5 balls from the box, with replacement, and all have been yellow. What is the probability that the next one is yellow?\n If you roll a 6-sided die six times, what is the probability of not seeing a 6?\n Two teams, say the Celtics and the Cavs, are playing a seven game series. The Cavs are a better team and have a 60% chance of winning each game. What is the probability that the Celtics win at least one game?\n Create a Monte Carlo simulation to confirm your answer to the previous problem. Use B \u0026lt;- 10000 simulations. Hint: use the following code to generate the results of the first four games:\n  celtic_wins \u0026lt;- sample(c(0,1), 4, replace = TRUE, prob = c(0.6, 0.4)) The Celtics must win one of these 4 games.\nTwo teams, say the Cavs and the Warriors, are playing a seven game championship series. The first to win four games, therefore, wins the series. The teams are equally good so they each have a 50-50 chance of winning each game. If the Cavs lose the first game, what is the probability that they win the series?\n Confirm the results of the previous question with a Monte Carlo simulation.\n Two teams, \\(A\\) and \\(B\\), are playing a seven game series. Team \\(A\\) is better than team \\(B\\) and has a \\(p\u0026gt;0.5\\) chance of winning each game. Given a value \\(p\\), the probability of winning the series for the underdog team \\(B\\) can be computed with the following function based on a Monte Carlo simulation:\n  prob_win \u0026lt;- function(p){ B \u0026lt;- 10000 result \u0026lt;- replicate(B, { b_win \u0026lt;- sample(c(1,0), 7, replace = TRUE, prob = c(1-p, p)) sum(b_win)\u0026gt;=4 }) mean(result) } Use the function sapply to compute the probability, call it Pr, of winning for p \u0026lt;- seq(0.5, 0.95, 0.025). Then plot the result.\nRepeat the exercise above, but now keep the probability fixed at p \u0026lt;- 0.75 and compute the probability for different series lengths: best of 1 game, 3 games, 5 games,… Specifically, N \u0026lt;- seq(1, 25, 2). Hint: use this function:  prob_win \u0026lt;- function(N, p=0.75){ B \u0026lt;- 10000 result \u0026lt;- replicate(B, { b_win \u0026lt;- sample(c(1,0), N, replace = TRUE, prob = c(1-p, p)) sum(b_win)\u0026gt;=(N+1)/2 }) mean(result) }  In previous lectures, we explained why when summarizing a list of numeric values, such as heights, it is not useful to construct a distribution that defines a proportion to each possible outcome. For example, if we measure every single person in a very large population of size \\(n\\) with extremely high precision, since no two people are exactly the same height, we need to assign the proportion \\(1/n\\) to each observed value and attain no useful summary at all. Similarly, when defining probability distributions, it is not useful to assign a very small probability to every single height.\nJust as when using distributions to summarize numeric data, it is much more practical to define a function that operates on intervals rather than single values. The standard way of doing this is using the cumulative distribution function (CDF).\nWe described empirical cumulative distribution function (eCDF) as a basic summary of a list of numeric values. As an example, we earlier defined the height distribution for adult male students. Here, we define the vector \\(x\\) to contain these heights:\nlibrary(tidyverse) library(dslabs) data(heights) x \u0026lt;- heights %\u0026gt;% filter(sex==\u0026quot;Male\u0026quot;) %\u0026gt;% pull(height) We defined the empirical distribution function as:\nF \u0026lt;- function(a) mean(x\u0026lt;=a) which, for any value a, gives the proportion of values in the list x that are smaller or equal than a.\nKeep in mind that we have not yet introduced probability in the context of CDFs. Let’s do this by asking the following: if I pick one of the male students at random, what is the chance that he is taller than 70.5 inches? Because every student has the same chance of being picked, the answer to this is equivalent to the proportion of students that are taller than 70.5 inches. Using the CDF we obtain an answer by typing:\n1 - F(70) ## [1] 0.3768473 Once a CDF is defined, we can use this to compute the probability of any subset. For instance, the probability of a student being between height a and height b is:\nF(b)-F(a) Because we can compute the probability for any possible event this way, the cumulative probability function defines the probability distribution for picking a height at random from our vector of heights x.\n Theoretical continuous distributions The normal distribution is a useful approximation to many naturally occurring distributions, including that of height. The cumulative distribution for the normal distribution is defined by a mathematical formula which in R can be obtained with the function pnorm. We say that a random quantity is normally distributed with average m and standard deviation s if its probability distribution is defined by:\nF(a) = pnorm(a, m, s) This is useful because if we are willing to use the normal approximation for, say, height, we don’t need the entire dataset to answer questions such as: what is the probability that a randomly selected student is taller then 70 inches? We just need the average height and standard deviation:\nm \u0026lt;- mean(x) s \u0026lt;- sd(x) 1 - pnorm(70.5, m, s) ## [1] 0.371369 Theoretical distributions as approximations The normal distribution is derived mathematically: we do not need data to define it. For practicing data scientists, almost everything we do involves data. Data is always, technically speaking, discrete. For example, we could consider our height data categorical with each specific height a unique category. The probability distribution is defined by the proportion of students reporting each height. Here is a plot of that probability distribution:\nWhile most students rounded up their heights to the nearest inch, others reported values with more precision. One student reported his height to be 69.6850393700787, which is 177 centimeters. The probability assigned to this height is 0.0012315 or 1 in 812. The probability for 70 inches is much higher at 0.1059113, but does it really make sense to think of the probability of being exactly 70 inches as being different than 69.6850393700787? Clearly it is much more useful for data analytic purposes to treat this outcome as a continuous numeric variable, keeping in mind that very few people, or perhaps none, are exactly 70 inches, and that the reason we get more values at 70 is because people round to the nearest inch.\nWith continuous distributions, the probability of a singular value is not even defined. For example, it does not make sense to ask what is the probability that a normally distributed value is 70. Instead, we define probabilities for intervals. We thus could ask what is the probability that someone is between 69.5 and 70.5.\nIn cases like height, in which the data is rounded, the normal approximation is particularly useful if we deal with intervals that include exactly one round number. For example, the normal distribution is useful for approximating the proportion of students reporting values in intervals like the following three:\nmean(x \u0026lt;= 68.5) - mean(x \u0026lt;= 67.5) ## [1] 0.114532 mean(x \u0026lt;= 69.5) - mean(x \u0026lt;= 68.5) ## [1] 0.1194581 mean(x \u0026lt;= 70.5) - mean(x \u0026lt;= 69.5) ## [1] 0.1219212 Note how close we get with the normal approximation:\npnorm(68.5, m, s) - pnorm(67.5, m, s) ## [1] 0.1031077 pnorm(69.5, m, s) - pnorm(68.5, m, s) ## [1] 0.1097121 pnorm(70.5, m, s) - pnorm(69.5, m, s) ## [1] 0.1081743 However, the approximation is not as useful for other intervals. For instance, notice how the approximation breaks down when we try to estimate:\nmean(x \u0026lt;= 70.9) - mean(x\u0026lt;=70.1) ## [1] 0.02216749 with\npnorm(70.9, m, s) - pnorm(70.1, m, s) ## [1] 0.08359562 In general, we call this situation discretization. Although the true height distribution is continuous, the reported heights tend to be more common at discrete values, in this case, due to rounding. As long as we are aware of how to deal with this reality, the normal approximation can still be a very useful tool.\n The probability density For categorical distributions, we can define the probability of a category. For example, a roll of a die, let’s call it \\(X\\), can be 1,2,3,4,5 or 6. The probability of 4 is defined as:\n\\[ \\mbox{Pr}(X=4) = 1/6 \\]\nThe CDF can then easily be defined: \\[ F(4) = \\mbox{Pr}(X\\leq 4) = \\mbox{Pr}(X = 4) + \\mbox{Pr}(X = 3) + \\mbox{Pr}(X = 2) + \\mbox{Pr}(X = 1) \\]\nAlthough for continuous distributions the probability of a single value \\(\\mbox{Pr}(X=x)\\) is not defined, there is a theoretical definition that has a similar interpretation. The probability density at \\(x\\) is defined as the function \\(f(a)\\) such that:\n\\[ F(a) = \\mbox{Pr}(X\\leq a) = \\int_{-\\infty}^a f(x)\\, dx \\]\nFor those that know calculus, remember that the integral is related to a sum: it is the sum of bars with widths approximating 0. If you don’t know calculus, you can think of \\(f(x)\\) as a curve for which the area under that curve up to the value \\(a\\), gives you the probability \\(\\mbox{Pr}(X\\leq a)\\).\nFor example, to use the normal approximation to estimate the probability of someone being taller than 76 inches, we use:\n1 - pnorm(76, m, s) ## [1] 0.03206008 which mathematically is the grey area below:\nThe curve you see is the probability density for the normal distribution. In R, we get this using the function dnorm.\nAlthough it may not be immediately obvious why knowing about probability densities is useful, understanding this concept will be essential to those wanting to fit models to data for which predefined functions are not available.\n  Monte Carlo simulations for continuous variables R provides functions to generate normally distributed outcomes. Specifically, the rnorm function takes three arguments: size, average (defaults to 0), and standard deviation (defaults to 1) and produces random numbers. Here is an example of how we could generate data that looks like our reported heights:\nn \u0026lt;- length(x) m \u0026lt;- mean(x) s \u0026lt;- sd(x) simulated_heights \u0026lt;- rnorm(n, m, s) Not surprisingly, the distribution looks normal:\nThis is one of the most useful functions in R as it will permit us to generate data that mimics natural events and answers questions related to what could happen by chance by running Monte Carlo simulations.\nIf, for example, we pick 800 males at random, what is the distribution of the tallest person? How rare is a seven footer in a group of 800 males? The following Monte Carlo simulation helps us answer that question:\nB \u0026lt;- 10000 tallest \u0026lt;- replicate(B, { simulated_data \u0026lt;- rnorm(800, m, s) max(simulated_data) }) Having a seven footer is quite rare:\nmean(tallest \u0026gt;= 7*12) ## [1] 0.0172 Here is the resulting distribution:\nNote that it does not look normal.\n Continuous distributions The normal distribution is not the only useful theoretical distribution. Other continuous distributions that we may encounter are the student-t, Chi-square, exponential, gamma, beta, and beta-binomial. R provides functions to compute the density, the quantiles, the cumulative distribution functions and to generate Monte Carlo simulations. R uses a convention that lets us remember the names, namely using the letters d, q, p, and r in front of a shorthand for the distribution. We have already seen the functions dnorm, pnorm, and rnorm for the normal distribution. The functions qnorm gives us the quantiles. We can therefore draw a distribution like this:\nx \u0026lt;- seq(-4, 4, length.out = 100) qplot(x, f, geom = \u0026quot;line\u0026quot;, data = data.frame(x, f = dnorm(x))) For the student-t, described later as we move toward hypothesis testing, the shorthand t is used so the functions are dt for the density, qt for the quantiles, pt for the cumulative distribution function, and rt for Monte Carlo simulation.\nTRY IT\nAssume the distribution of female heights is approximated by a normal distribution with a mean of 64 inches and a standard deviation of 3 inches. If we pick a female at random, what is the probability that she is 5 feet or shorter?\n Assume the distribution of female heights is approximated by a normal distribution with a mean of 64 inches and a standard deviation of 3 inches. If we pick a female at random, what is the probability that she is 6 feet or taller?\n Assume the distribution of female heights is approximated by a normal distribution with a mean of 64 inches and a standard deviation of 3 inches. If we pick a female at random, what is the probability that she is between 61 and 67 inches?\n Repeat the exercise above, but convert everything to centimeters. That is, multiply every height, including the standard deviation, by 2.54. What is the answer now?\n Notice that the answer to the question does not change when you change units. This makes sense since the answer to the question should not be affected by what units we use. In fact, if you look closely, you notice that 61 and 64 are both 1 SD away from the average. Compute the probability that a randomly picked, normally distributed random variable is within 1 SD from the average.\n To see the math that explains why the answers to questions 3, 4, and 5 are the same, suppose we have a random variable with average \\(m\\) and standard error \\(s\\). Suppose we ask the probability of \\(X\\) being smaller or equal to \\(a\\). Remember that, by definition, \\(a\\) is \\((a - m)/s\\) standard deviations \\(s\\) away from the average \\(m\\). The probability is:\n  \\[ \\mbox{Pr}(X \\leq a) \\]\nNow we subtract \\(\\mu\\) to both sides and then divide both sides by \\(\\sigma\\):\n\\[ \\mbox{Pr}\\left(\\frac{X-m}{s} \\leq \\frac{a-m}{s} \\right) \\]\nThe quantity on the left is a standard normal random variable. It has an average of 0 and a standard error of 1. We will call it \\(Z\\):\n\\[ \\mbox{Pr}\\left(Z \\leq \\frac{a-m}{s} \\right) \\]\nSo, no matter the units, the probability of \\(X\\leq a\\) is the same as the probability of a standard normal variable being less than \\((a - m)/s\\). If mu is the average and sigma the standard error, which of the following R code would give us the right answer in every situation:\nmean(X\u0026lt;=a) pnorm((a - m)/s) pnorm((a - m)/s, m, s) pnorm(a)  Imagine the distribution of male adults is approximately normal with an expected value of 69 and a standard deviation of 3. How tall is the male in the 99th percentile? Hint: use qnorm.\n The distribution of IQ scores is approximately normally distributed. The average is 100 and the standard deviation is 15. Suppose you want to know the distribution of the highest IQ across all graduating classes if 10,000 people are born each in your school district. Run a Monte Carlo simulation with B=1000 generating 10,000 IQ scores and keeping the highest. Make a histogram.\n     Random variables In data science, we often deal with data that is affected by chance in some way: the data comes from a random sample, the data is affected by measurement error, or the data measures some outcome that is random in nature. Being able to quantify the uncertainty introduced by randomness is one of the most important jobs of a data analyst. Statistical inference offers a framework, as well as several practical tools, for doing this. The first step is to learn how to mathematically describe random variables.\nIn this section, we introduce random variables and their properties starting with their application to games of chance. We then describe some of the events surrounding the financial crisis of 2007-20084 using probability theory. This financial crisis was in part caused by underestimating the risk of certain securities5 sold by financial institutions. Specifically, the risks of mortgage-backed securities (MBS) and collateralized debt obligations (CDO) were grossly underestimated. These assets were sold at prices that assumed most homeowners would make their monthly payments, and the probability of this not occurring was calculated as being low. A combination of factors resulted in many more defaults than were expected, which led to a price crash of these securities. As a consequence, banks lost so much money that they needed government bailouts to avoid closing down completely.\nDefinition of Random variables Random variables are numeric outcomes resulting from random processes. We can easily generate random variables using some of the simple examples we have shown. For example, define X to be 1 if a bead is blue and red otherwise:\nbeads \u0026lt;- rep( c(\u0026quot;red\u0026quot;, \u0026quot;blue\u0026quot;), times = c(2,3)) X \u0026lt;- ifelse(sample(beads, 1) == \u0026quot;blue\u0026quot;, 1, 0) Here X is a random variable: every time we select a new bead the outcome changes randomly. See below:\nifelse(sample(beads, 1) == \u0026quot;blue\u0026quot;, 1, 0) ## [1] 1 ifelse(sample(beads, 1) == \u0026quot;blue\u0026quot;, 1, 0) ## [1] 0 ifelse(sample(beads, 1) == \u0026quot;blue\u0026quot;, 1, 0) ## [1] 0 Sometimes it’s 1 and sometimes it’s 0.\n Sampling models Many data generation procedures, those that produce the data we study, can be modeled quite well as draws from an urn. For instance, we can model the process of polling likely voters as drawing 0s (Republicans) and 1s (Democrats) from an urn containing the 0 and 1 code for all likely voters. In epidemiological studies, we often assume that the subjects in our study are a random sample from the population of interest. The data related to a specific outcome can be modeled as a random sample from an urn containing the outcome for the entire population of interest. Similarly, in experimental research, we often assume that the individual organisms we are studying, for example worms, flies, or mice, are a random sample from a larger population. Randomized experiments can also be modeled by draws from an urn given the way individuals are assigned into groups: when getting assigned, you draw your group at random. Sampling models are therefore ubiquitous in data science. Casino games offer a plethora of examples of real-world situations in which sampling models are used to answer specific questions. We will therefore start with such examples.\nSuppose a very small casino hires you to consult on whether they should set up roulette wheels. To keep the example simple, we will assume that 1,000 people will play and that the only game you can play on the roulette wheel is to bet on red or black. The casino wants you to predict how much money they will make or lose. They want a range of values and, in particular, they want to know what’s the chance of losing money. If this probability is too high, they will pass on installing roulette wheels.\nWe are going to define a random variable \\(S\\) that will represent the casino’s total winnings. Let’s start by constructing the urn. A roulette wheel has 18 red pockets, 18 black pockets and 2 green ones. So playing a color in one game of roulette is equivalent to drawing from this urn:\ncolor \u0026lt;- rep(c(\u0026quot;Black\u0026quot;, \u0026quot;Red\u0026quot;, \u0026quot;Green\u0026quot;), c(18, 18, 2)) The 1,000 outcomes from 1,000 people playing are independent draws from this urn. If red comes up, the gambler wins and the casino loses a dollar, so we draw a -1. Otherwise, the casino wins a dollar and we draw a 1. To construct our random variable \\(S\\), we can use this code:\nn \u0026lt;- 1000 X \u0026lt;- sample(ifelse(color == \u0026quot;Red\u0026quot;, -1, 1), n, replace = TRUE) X[1:10] ## [1] -1 1 1 -1 -1 -1 1 1 1 1 Because we know the proportions of 1s and -1s, we can generate the draws with one line of code, without defining color:\nX \u0026lt;- sample(c(-1,1), n, replace = TRUE, prob=c(9/19, 10/19)) We call this a sampling model since we are modeling the random behavior of roulette with the sampling of draws from an urn. The total winnings \\(S\\) is simply the sum of these 1,000 independent draws:\nX \u0026lt;- sample(c(-1,1), n, replace = TRUE, prob=c(9/19, 10/19)) S \u0026lt;- sum(X) S ## [1] 22  The probability distribution of a random variable If you run the code above, you see that \\(S\\) changes every time. This is, of course, because \\(S\\) is a random variable. The probability distribution of a random variable tells us the probability of the observed value falling at any given interval. So, for example, if we want to know the probability that we lose money, we are asking the probability that \\(S\\) is in the interval \\(S\u0026lt;0\\).\nNote that if we can define a cumulative distribution function \\(F(a) = \\mbox{Pr}(S\\leq a)\\), then we will be able to answer any question related to the probability of events defined by our random variable \\(S\\), including the event \\(S\u0026lt;0\\). We call this \\(F\\) the random variable’s distribution function.\nWe can estimate the distribution function for the random variable \\(S\\) by using a Monte Carlo simulation to generate many realizations of the random variable. With this code, we run the experiment of having 1,000 people play roulette, over and over, specifically \\(B = 10,000\\) times:\nn \u0026lt;- 1000 B \u0026lt;- 10000 roulette_winnings \u0026lt;- function(n){ X \u0026lt;- sample(c(-1,1), n, replace = TRUE, prob=c(9/19, 10/19)) sum(X) } S \u0026lt;- replicate(B, roulette_winnings(n)) Now we can ask the following: in our simulations, how often did we get sums less than or equal to a?\nmean(S \u0026lt;= a) This will be a very good approximation of \\(F(a)\\) and we can easily answer the casino’s question: how likely is it that we will lose money? We can see it is quite low:\nmean(S\u0026lt;0) ## [1] 0.0456 We can visualize the distribution of \\(S\\) by creating a histogram showing the probability \\(F(b)-F(a)\\) for several intervals \\((a,b]\\):\nWe see that the distribution appears to be approximately normal. A qq-plot will confirm that the normal approximation is close to a perfect approximation for this distribution. If, in fact, the distribution is normal, then all we need to define the distribution is the average and the standard deviation. Because we have the original values from which the distribution is created, we can easily compute these with mean(S) and sd(S). The blue curve you see added to the histogram above is a normal density with this average and standard deviation.\nThis average and this standard deviation have special names. They are referred to as the expected value and standard error of the random variable \\(S\\). We will say more about these in the next section.\nStatistical theory provides a way to derive the distribution of random variables defined as independent random draws from an urn. Specifically, in our example above, we can show that \\((S+n)/2\\) follows a binomial distribution. We therefore do not need to run for Monte Carlo simulations to know the probability distribution of \\(S\\). We did this for illustrative purposes.\nWe can use the function dbinom and pbinom to compute the probabilities exactly. For example, to compute \\(\\mbox{Pr}(S \u0026lt; 0)\\) we note that:\n\\[\\mbox{Pr}(S \u0026lt; 0) = \\mbox{Pr}((S+n)/2 \u0026lt; (0+n)/2)\\]\nand we can use the pbinom to compute \\[\\mbox{Pr}(S \\leq 0)\\]\nn \u0026lt;- 1000 pbinom(n/2, size = n, prob = 10/19) ## [1] 0.05109794 Because this is a discrete probability function, to get \\(\\mbox{Pr}(S \u0026lt; 0)\\) rather than \\(\\mbox{Pr}(S \\leq 0)\\), we write:\npbinom(n/2-1, size = n, prob = 10/19) ## [1] 0.04479591 For the details of the binomial distribution, you can consult any basic probability book or even Wikipedia6.\nHere we do not cover these details. Instead, we will discuss an incredibly useful approximation provided by mathematical theory that applies generally to sums and averages of draws from any urn: the Central Limit Theorem (CLT).\n Distributions versus probability distributions Before we continue, let’s make an important distinction and connection between the distribution of a list of numbers and a probability distribution. In the visualization lectures, we described how any list of numbers \\(x_1,\\dots,x_n\\) has a distribution. The definition is quite straightforward. We define \\(F(a)\\) as the function that tells us what proportion of the list is less than or equal to \\(a\\). Because they are useful summaries when the distribution is approximately normal, we define the average and standard deviation. These are defined with a straightforward operation of the vector containing the list of numbers x:\nm \u0026lt;- sum(x)/length(x) s \u0026lt;- sqrt(sum((x - m)^2) / length(x)) A random variable \\(X\\) has a distribution function. To define this, we do not need a list of numbers. It is a theoretical concept. In this case, we define the distribution as the \\(F(a)\\) that answers the question: what is the probability that \\(X\\) is less than or equal to \\(a\\)? There is no list of numbers.\nHowever, if \\(X\\) is defined by drawing from an urn with numbers in it, then there is a list: the list of numbers inside the urn. In this case, the distribution of that list is the probability distribution of \\(X\\) and the average and standard deviation of that list are the expected value and standard error of the random variable.\nAnother way to think about it that does not involve an urn is to run a Monte Carlo simulation and generate a very large list of outcomes of \\(X\\). These outcomes are a list of numbers. The distribution of this list will be a very good approximation of the probability distribution of \\(X\\). The longer the list, the better the approximation. The average and standard deviation of this list will approximate the expected value and standard error of the random variable.\n Notation for random variables In statistical textbooks, upper case letters are used to denote random variables and we follow this convention here. Lower case letters are used for observed values. You will see some notation that includes both. For example, you will see events defined as \\(X \\leq x\\). Here \\(X\\) is a random variable, making it a random event, and \\(x\\) is an arbitrary value and not random. So, for example, \\(X\\) might represent the number on a die roll and \\(x\\) will represent an actual value we see 1, 2, 3, 4, 5, or 6. So in this case, the probability of \\(X=x\\) is 1/6 regardless of the observed value \\(x\\). This notation is a bit strange because, when we ask questions about probability, \\(X\\) is not an observed quantity. Instead, it’s a random quantity that we will see in the future. We can talk about what we expect it to be, what values are probable, but not what it is. But once we have data, we do see a realization of \\(X\\). So data scientists talk of what could have been after we see what actually happened.\n The expected value and standard error We have described sampling models for draws. We will now go over the mathematical theory that lets us approximate the probability distributions for the sum of draws. Once we do this, we will be able to help the casino predict how much money they will make. The same approach we use for the sum of draws will be useful for describing the distribution of averages and proportion which we will need to understand how polls work.\nThe first important concept to learn is the expected value. In statistics books, it is common to use letter \\(\\mbox{E}\\) like this:\n\\[\\mbox{E}[X]\\]\nto denote the expected value of the random variable \\(X\\).\nA random variable will vary around its expected value in a way that if you take the average of many, many draws, the average of the draws will approximate the expected value, getting closer and closer the more draws you take.\nTheoretical statistics provides techniques that facilitate the calculation of expected values in different circumstances. For example, a useful formula tells us that the expected value of a random variable defined by one draw is the average of the numbers in the urn. In the urn used to model betting on red in roulette, we have 20 one dollars and 18 negative one dollars. The expected value is thus:\n\\[ \\mbox{E}[X] = (20 + -18)/38 \\]\nwhich is about 5 cents. It is a bit counterintuitive to say that \\(X\\) varies around 0.05, when the only values it takes is 1 and -1. One way to make sense of the expected value in this context is by realizing that if we play the game over and over, the casino wins, on average, 5 cents per game. A Monte Carlo simulation confirms this:\nB \u0026lt;- 10^6 x \u0026lt;- sample(c(-1,1), B, replace = TRUE, prob=c(9/19, 10/19)) mean(x) ## [1] 0.05169 In general, if the urn has two possible outcomes, say \\(a\\) and \\(b\\), with proportions \\(p\\) and \\(1-p\\) respectively, the average is:\n\\[\\mbox{E}[X] = ap + b(1-p)\\]\nTo see this, notice that if there are \\(n\\) beads in the urn, then we have \\(np\\) \\(a\\)s and \\(n(1-p)\\) \\(b\\)s and because the average is the sum, \\(n\\times a \\times p + n\\times b \\times (1-p)\\), divided by the total \\(n\\), we get that the average is \\(ap + b(1-p)\\).\nNow the reason we define the expected value is because this mathematical definition turns out to be useful for approximating the probability distributions of sum, which then is useful for describing the distribution of averages and proportions. The first useful fact is that the expected value of the sum of the draws is:\n\\[ \\mbox{}\\mbox{number of draws } \\times \\mbox{ average of the numbers in the urn} \\]\nSo if 1,000 people play roulette, the casino expects to win, on average, about 1,000 \\(\\times\\) $0.05 = $50. But this is an expected value. How different can one observation be from the expected value? The casino really needs to know this. What is the range of possibilities? If negative numbers are too likely, they will not install roulette wheels. Statistical theory once again answers this question. The standard error (SE) gives us an idea of the size of the variation around the expected value. In statistics books, it’s common to use:\n\\[\\mbox{SE}[X]\\]\nto denote the standard error of a random variable.\nIf our draws are independent, then the standard error of the sum is given by the equation:\n\\[ \\sqrt{\\mbox{number of draws }} \\times \\mbox{ standard deviation of the numbers in the urn} \\]\nUsing the definition of standard deviation, we can derive, with a bit of math, that if an urn contains two values \\(a\\) and \\(b\\) with proportions \\(p\\) and \\((1-p)\\), respectively, the standard deviation is:\n\\[\\mid b - a \\mid \\sqrt{p(1-p)}.\\]\nSo in our roulette example, the standard deviation of the values inside the urn is: \\(\\mid 1 - (-1) \\mid \\sqrt{10/19 \\times 9/19}\\) or:\n2 * sqrt(90)/19 ## [1] 0.998614 The standard error tells us the typical difference between a random variable and its expectation. Since one draw is obviously the sum of just one draw, we can use the formula above to calculate that the random variable defined by one draw has an expected value of 0.05 and a standard error of about 1. This makes sense since we either get 1 or -1, with 1 slightly favored over -1.\nUsing the formula above, the sum of 1,000 people playing has standard error of about $32:\nn \u0026lt;- 1000 sqrt(n) * 2 * sqrt(90)/19 ## [1] 31.57895 As a result, when 1,000 people bet on red, the casino is expected to win $50 with a standard error of $32. It therefore seems like a safe bet. But we still haven’t answered the question: how likely is it to lose money? Here the CLT will help.\nAdvanced note: Before continuing we should point out that exact probability calculations for the casino winnings can be performed with the binomial distribution. However, here we focus on the CLT, which can be generally applied to sums of random variables in a way that the binomial distribution can’t.\nPopulation SD versus the sample SD The standard deviation of a list x (below we use heights as an example) is defined as the square root of the average of the squared differences:\nlibrary(dslabs) x \u0026lt;- heights$height m \u0026lt;- mean(x) s \u0026lt;- sqrt(mean((x-m)^2)) Using mathematical notation we write:\n\\[ \\mu = \\frac{1}{n} \\sum_{i=1}^n x_i \\\\ \\sigma = \\sqrt{\\frac{1}{n} \\sum_{i=1}^n (x_i - \\mu)^2} \\]\nHowever, be aware that the sd function returns a slightly different result:\nidentical(s, sd(x)) ## [1] FALSE s-sd(x) ## [1] -0.001942661 This is because the sd function R does not return the sd of the list, but rather uses a formula that estimates standard deviations of a population from a random sample \\(X_1, \\dots, X_N\\) which, for reasons not discussed here, divide the sum of squares by the \\(N-1\\).\n\\[ \\bar{X} = \\frac{1}{N} \\sum_{i=1}^N X_i, \\,\\,\\,\\, s = \\sqrt{\\frac{1}{N-1} \\sum_{i=1}^N (X_i - \\bar{X})^2} \\]\nYou can see that this is the case by typing:\nn \u0026lt;- length(x) s-sd(x)*sqrt((n-1) / n) ## [1] 0 For all the theory discussed here, you need to compute the actual standard deviation as defined:\nsqrt(mean((x-m)^2)) So be careful when using the sd function in R. However, keep in mind that throughout the book we sometimes use the sd function when we really want the actual SD. This is because when the list size is big, these two are practically equivalent since \\(\\sqrt{(N-1)/N} \\approx 1\\).\n  Central Limit Theorem The Central Limit Theorem (CLT) tells us that when the number of draws, also called the sample size, is large, the probability distribution of the sum of the independent draws is approximately normal. Because sampling models are used for so many data generation processes, the CLT is considered one of the most important mathematical insights in history.\nPreviously, we discussed that if we know that the distribution of a list of numbers is approximated by the normal distribution, all we need to describe the list are the average and standard deviation. We also know that the same applies to probability distributions. If a random variable has a probability distribution that is approximated with the normal distribution, then all we need to describe the probability distribution are the average and standard deviation, referred to as the expected value and standard error.\nWe previously ran this Monte Carlo simulation:\nn \u0026lt;- 1000 B \u0026lt;- 10000 roulette_winnings \u0026lt;- function(n){ X \u0026lt;- sample(c(-1,1), n, replace = TRUE, prob=c(9/19, 10/19)) sum(X) } S \u0026lt;- replicate(B, roulette_winnings(n)) The Central Limit Theorem (CLT) tells us that the sum \\(S\\) is approximated by a normal distribution. Using the formulas above, we know that the expected value and standard error are:\nn * (20-18)/38 ## [1] 52.63158 sqrt(n) * 2 * sqrt(90)/19 ## [1] 31.57895 The theoretical values above match those obtained with the Monte Carlo simulation:\nmean(S) ## [1] 52.2242 sd(S) ## [1] 31.65508 Using the CLT, we can skip the Monte Carlo simulation and instead compute the probability of the casino losing money using this approximation:\nmu \u0026lt;- n * (20-18)/38 se \u0026lt;- sqrt(n) * 2 * sqrt(90)/19 pnorm(0, mu, se) ## [1] 0.04779035 which is also in very good agreement with our Monte Carlo result:\nmean(S \u0026lt; 0) ## [1] 0.0458 How large is large in the Central Limit Theorem? The CLT works when the number of draws is large. But large is a relative term. In many circumstances as few as 30 draws is enough to make the CLT useful. In some specific instances, as few as 10 is enough. However, these should not be considered general rules. Note, for example, that when the probability of success is very small, we need much larger sample sizes.\nBy way of illustration, let’s consider the lottery. In the lottery, the chances of winning are less than 1 in a million. Thousands of people play so the number of draws is very large. Yet the number of winners, the sum of the draws, range between 0 and 4. This sum is certainly not well approximated by a normal distribution, so the CLT does not apply, even with the very large sample size. This is generally true when the probability of a success is very low. In these cases, the Poisson distribution is more appropriate.\nYou can examine the properties of the Poisson distribution using dpois and ppois. You can generate random variables following this distribution with rpois. However, we do not cover the theory here. You can learn about the Poisson distribution in any probability textbook and even Wikipedia7\n  Statistical properties of averages There are several useful mathematical results that we used above and often employ when working with data. We list them below.\n1. The expected value of the sum of random variables is the sum of each random variable’s expected value. We can write it like this:\n\\[ \\mbox{E}[X_1+X_2+\\dots+X_n] = \\mbox{E}[X_1] + \\mbox{E}[X_2]+\\dots+\\mbox{E}[X_n] \\]\nIf the \\(X\\) are independent draws from the urn, then they all have the same expected value. Let’s call it \\(\\mu\\) and thus:\n\\[ \\mbox{E}[X_1+X_2+\\dots+X_n]= n\\mu \\]\nwhich is another way of writing the result we show above for the sum of draws.\n2. The expected value of a non-random constant times a random variable is the non-random constant times the expected value of a random variable. This is easier to explain with symbols:\n\\[ \\mbox{E}[aX] = a\\times\\mbox{E}[X] \\]\nTo see why this is intuitive, consider change of units. If we change the units of a random variable, say from dollars to cents, the expectation should change in the same way. A consequence of the above two facts is that the expected value of the average of independent draws from the same urn is the expected value of the urn, call it \\(\\mu\\) again:\n\\[ \\mbox{E}[(X_1+X_2+\\dots+X_n) / n]= \\mbox{E}[X_1+X_2+\\dots+X_n] / n = n\\mu/n = \\mu \\]\n3. The square of the standard error of the sum of independent random variables is the sum of the square of the standard error of each random variable. This one is easier to understand in math form:\n\\[ \\mbox{SE}[X_1+X_2+\\dots+X_n] = \\sqrt{\\mbox{SE}[X_1]^2 + \\mbox{SE}[X_2]^2+\\dots+\\mbox{SE}[X_n]^2 } \\]\nThe square of the standard error is referred to as the variance in statistical textbooks. Note that this particular property is not as intuitive as the previous three and more in depth explanations can be found in statistics textbooks.\n4. The standard error of a non-random constant times a random variable is the non-random constant times the random variable’s standard error. As with the expectation: \\[ \\mbox{SE}[aX] = a \\times \\mbox{SE}[X] \\]\nTo see why this is intuitive, again think of units.\nA consequence of 3 and 4 is that the standard error of the average of independent draws from the same urn is the standard deviation of the urn divided by the square root of \\(n\\) (the number of draws), call it \\(\\sigma\\):\n\\[ \\begin{aligned} \\mbox{SE}[(X_1+X_2+\\dots+X_n) / n] \u0026amp;= \\mbox{SE}[X_1+X_2+\\dots+X_n]/n \\\\ \u0026amp;= \\sqrt{\\mbox{SE}[X_1]^2+\\mbox{SE}[X_2]^2+\\dots+\\mbox{SE}[X_n]^2}/n \\\\ \u0026amp;= \\sqrt{\\sigma^2+\\sigma^2+\\dots+\\sigma^2}/n\\\\ \u0026amp;= \\sqrt{n\\sigma^2}/n\\\\ \u0026amp;= \\sigma / \\sqrt{n} \\end{aligned} \\]\n5. If \\(X\\) is a normally distributed random variable, then if \\(a\\) and \\(b\\) are non-random constants, \\(aX + b\\) is also a normally distributed random variable. All we are doing is changing the units of the random variable by multiplying by \\(a\\), then shifting the center by \\(b\\).\nNote that statistical textbooks use the Greek letters \\(\\mu\\) and \\(\\sigma\\) to denote the expected value and standard error, respectively. This is because \\(\\mu\\) is the Greek letter for \\(m\\), the first letter of mean, which is another term used for expected value. Similarly, \\(\\sigma\\) is the Greek letter for \\(s\\), the first letter of standard error.\n Law of large numbers An important implication of the final result is that the standard error of the average becomes smaller and smaller as \\(n\\) grows larger. When \\(n\\) is very large, then the standard error is practically 0 and the average of the draws converges to the average of the urn. This is known in statistical textbooks as the law of large numbers or the law of averages.\nMisinterpreting law of averages The law of averages is sometimes misinterpreted. For example, if you toss a coin 5 times and see a head each time, you might hear someone argue that the next toss is probably a tail because of the law of averages: on average we should see 50% heads and 50% tails. A similar argument would be to say that red “is due” on the roulette wheel after seeing black come up five times in a row. These events are independent so the chance of a coin landing heads is 50% regardless of the previous 5. This is also the case for the roulette outcome. The law of averages applies only when the number of draws is very large and not in small samples. After a million tosses, you will definitely see about 50% heads regardless of the outcome of the first five tosses.\nAnother funny misuse of the law of averages is in sports when TV sportscasters predict a player is about to succeed because they have failed a few times in a row.\n    https://en.wikipedia.org/wiki/Urn_problem↩︎\n https://www.khanacademy.org/math/precalculus/prob-comb/dependent-events-precalc/v/monty-hall-problem↩︎\n https://en.wikipedia.org/wiki/Monty_Hall_problem↩︎\n https://en.wikipedia.org/w/index.php?title=Financial_crisis_of_2007%E2%80%932008↩︎\n https://en.wikipedia.org/w/index.php?title=Security_(finance)↩︎\n https://en.wikipedia.org/w/index.php?title=Binomial_distribution↩︎\n https://en.wikipedia.org/w/index.php?title=Poisson_distribution↩︎\n   ","date":1612828800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1632838865,"objectID":"744a9e81e6eae570052294b144f8d401","permalink":"https://ssc442.netlify.app/content/05-content/","publishdate":"2021-09-28T00:00:00Z","relpermalink":"/content/05-content/","section":"content","summary":"Required Reading  Supplemental Readings Guiding Questions  Discrete probability  Relative frequency Notation Probability distributions Monte Carlo simulations for categorical data  Setting the random seed With and without replacement  Independence Conditional probabilities Addition and multiplication rules  Multiplication rule Multiplication rule under independence Addition rule  Combinations and permutations  Monte Carlo example  Examples  Monty Hall problem Birthday problem  Infinity in practice Theoretical continuous distributions  Theoretical distributions as approximations The probability density  Monte Carlo simulations for continuous variables Continuous distributions  Random variables  Definition of Random variables Sampling models The probability distribution of a random variable Distributions versus probability distributions Notation for random variables The expected value and standard error  Population SD versus the sample SD  Central Limit Theorem  How large is large in the Central Limit Theorem?","tags":null,"title":"Probability and Statistics","type":"docs"},{"authors":null,"categories":null,"content":"    Readings A Brief Introduction to SSC442  About Me About You This Course More About This Course And finally… Guiding Questions  What is “Data Analytics”?  Starting point for this course  Statistical Learning The Pros and Cons of Correlation A Case Study in Prediction More Recent Examples of Prediction An Aside: Nomenclature Learning from Data   R basics  Case study: US homicides by firearm The (very) basics  Objects The workspace Functions Other prebuilt objects Variable names Saving your workspace Motivating scripts Commenting your code  Data types  Data frames Examining an object The accessor: $ Vectors: numerics, characters, and logical Factors Lists Matrices  Vectors  Creating vectors Names Sequences Subsetting  Coercion  Not availables (NA)  Sorting  sort order max and which.max rank Beware of recycling  Vector arithmetics  Rescaling a vector Two vectors  Indexing  Subsetting with logicals Logical operators which match %in%  Rmarkdown    Readings As noted in the syllabus, your readings will be assigned each week in this area. For this initial week, please read the course content. Read closely the following:\n The syllabus, content, examples, and labs pages for this class. This page. Yes, the whole thing.  Things to stress from syllabus:\n E-mail isn’t the ideal solution for technical problems No appointments necessary for regularly scheduled office hours; or by appointment. TA office hours are great as well. Our TA has experience in this course. Can only reschedule exams (with good reason) if you tell me before the exam that you have a conflict.  Notify me immediately if you need accommodations because of RCPD or religious convictions; If you approach me at the last minute, I may not be able to help.   Despite my apparent hard-assness, I’m here to help. I am not in the business of giving bad grades for no reason, and I genuinely want you to learn a lot and enjoy the course.\n A Brief Introduction to SSC442  I keep saying that the sexy job in the next 10 years will be statisticians. And I’m not kidding.\n Hal Varian, Chief Economist, Google  About Me Me: My primary area of expertise is behavioral economics (also known as psychology and economics). While my research occasionally touches the topics in the course, I mostly utilize things in the course as tools. In this way, we are likely the same.\nThis class is totally, unapologetically a work in progress. The material is a mish-mash of stuff from courses offered at Caltech, Stanford, Harvard, and Duke…so, yeah, it will be challenging. Hopefully, you’ll find it fun!\n About You New phone who dis? Please email me bbushong@msu.edu your\n name (with pronunciation guide)\n major\n desired graduation year and semester\n interest in this course on a 10-point scale (1: not at all interested; 10: helllllll yeah)\n   You must spend 5 minutes emailing me a little bit about your interests before the next class.\n This Course The syllabus is posted on the course website. I’ll walk through highlights now, but read it later – it’s long. - But eventually, please read it. It is “required.”\nSyllabus highlights:\n Grade is composed of weekly writings, labs, and projects.  Weekly writings: 22% Participation: 4% Labs: 29% Projects: 45%  This structure is designed to give ~55% “for free”. Success on the projects will require real work. Labs consist of a practical implementation of something we’ve covered in the course (e.g., code your own Recommender System).  Grading Grading: come to class.\nIf you complete all assignments and attend all class dates, I suspect you will do very well. Given the way the syllabus is structured, I conjecture that the following is a loose guide to grades:\n4.0 Turned in all assignments with good effort, worked hard on the projects and was proud of final product.\n3.5 Turned in all assignments with good effort, worked a bit on the projects and was indifferent to final product.\n3.0 Turned in all assignments with some effort, worked a bit on the projects and was shy about final product.\n\u0026lt; 3.0 Very little effort, or did not turn in all assignments, worked very little on the projects and was embarassed by final product.\n…of course, failing to turn in assignments can lead to a grade dramatically lower than just a 3.0.\n  More About This Course There are sort of three texts for this course and sort of zero.\nThe “main text” is free and available online. The secondary text is substantially more difficult, but also free online. The third text costs about $25. Assigned readings can be found on the course website under “Content”.\nPlease please please please please: Ask questions during class. - Most ideas will be new. - Sometimes (often?) the material itself will be confusing or interesting—or both! - Teaching is incredibly challenging right now. - Note: If I find that attendance is terrible, I may have to start incorporating attendance into participation.\nReturn of the Please: If there is some topic that you really want to learn about, ask. If you are uncomfortable asking in front of the whole group, please see me during office hours.\nBecause this is a new course:\n Some of the lectures will be way too long or too short. Some (most?) of the lectures won’t make sense. Some of the time I’ll forget what I intended to say and awkwardly stare at you for a few moments (sorry).  Comment throughout the course, not just at the end.\nThe material will improve with time and feedback.\nI encourage measured feedback and thoughtful responses to questions. If I call on you and you don’t know immediately, don’t freak out. If you don’t know, it’s totally okay to say you don’t know.\nSUPER BIG IMPORTANT EXPLANATION OF THE COURSE We teach using “math”. Don’t be afraid. The math won’t hurt you. I fundamentally believe that true knowledge of how we learn from data depends on a basic understanding of the underlying mathematics.\n-The good news is that you’ll face no black boxes. In this class you’ll actually learn how things work. (Probably. Hopefully?) -More good news: the level of required math is reasonably low. High-school algebra or equivalent should be fine. -The bad news is that (at times) the course is notation-heavy. This class will require an active mind.\n  And finally… I cannot address field-specific questions in areas outside economics to any satisfying degree. I’m good at knowing what I don’t know and have a very small ego, which means that I’m much less likely to blow smoke up your ass than other professors. So I won’t pretend I know everything. Of course, this implies that I can’t help with certain types of questions.\nThis course should be applicable broadly, but many of the examples will lean on my personal expertise (sorry).\n Guiding Questions For future lectures, the guiding questions will be more pointed and at a higher level to help steer your thinking. Here, we want to ensure you remember some basics and accordingly the questions are straightforward.\n Do you remember anything about R? What are the different data types in R? How do you index specific elements of a vector? Why might you want to do that?    What is “Data Analytics”? How do you define “data analytics”? (Not a rhetorical question!)\n This course will avoid this nomenclature. It is confusing and imprecise. But you signed up (suckers) and I owe an explanation of what this course will cover.  Some “data analytics” topics we will cover:\n Linear regression (il classico). Models of classification or discrete choice. Analysis of ``wide’’ data. Decision trees and other non-linear models.  Starting point for this course Better utilizing existing data can improve our predictive power whilst providing interpretable outputs for considering new policies.\nWARNING: Causation is tough and we will spend the entire course warning you to avoid making causal claims!\nStatistical Learning A Brief History\nSuppose you are a researcher and you want to teach a computer to recognize images of a tree.\nNote: this is an ``easy” problem. If you show pictures to a 3-year-old, that child will probably be able to tell you if there is a tree in the picture.\nComputer scientists spent about 20 years on this problem because they thought about the problem like nerds and tried to write down a series of rules.\nRules are difficult to form, and simply writing rules misses the key insight: the data can tell you something.\nSocial Science Approaches to Statistical Learning A Brief History\nSuppose you are a researcher and you want to know whether prisons reduce crime.\nfrom ``A Call for a Moratorium on Prison Building’’ (1976)\n Between 1955 and 1975, fifteen states increased the collective capacity of their adult prison systems by 56% (from, on average, 63,100 to 98,649). Fifteen other states increased capacity by less than 4% (from 49,575 to 51,440). In “heavy-construction” states the crime rate increased by 167%; in “low-construction” states the crime rate increased by 145%.     Prison Capacity Crime Rate    High construction \\(\\uparrow\\)~56% \\(\\uparrow\\)~167%  Low construction \\(\\uparrow\\)~4% \\(\\uparrow\\)~145%      The Pros and Cons of Correlation Pros: - Nature gives you correlations for free. - In principle, everyone can agree on the facts.\nCons: - Correlations are not very helpful. - They show what has happened, but not why. - For many things, we care about why.\nWhy a Correlation Exists Between X and Y \\(X \\rightarrow Y\\) X causes Y (causality)\n \\(X \\leftarrow Y\\) Y causes X (reverse causality)\n \\(Z \\rightarrow X\\); \\(Z \\rightarrow Y\\) Z causes X and Y (common cause)\n \\(X \\rightarrow Y\\); \\(Y \\rightarrow X\\) X causes Y and Y causes X (simultaneous equations)\n   Uniting Social Science and Computer Science We will start in this course by examining situations where we do not care about why something has happened, but instead we care about our ability to predict its occurrence from existing data.\n(But of course keep in back of mind that if you are making policy, you must care about why something happened).\nWe will also borrow a few other ideas from CS: - Anything is data + Satellite data + Unstructured text or audio + Facial expressions or vocal intonations - Subtle improvements on existing techniques - An eye towards practical implementability over ``cleanliness”\n  A Case Study in Prediction Example: a firm wishes to predict user behavior based on previous purchases or interactions.\nSmall margins \\(\\rightarrow\\) huge payoffs. \\(10\\% \\rightarrow\\) $1 million.\nNot obvious to me why this was worth so much for Netflix (that’s an interesting research question). However, it’s quite obvious why this is true in financial markets.\n More Recent Examples of Prediction  Identify the risk factors for prostate cancer. Classify a tissue sample into one of several cancer classes, based on a gene expression profile. Classify a recorded phoneme based on a log-periodogram. Predict whether someone will have a heart attack on the basis of demographic, diet and clinical measurements. Customize an email spam detection system. Identify a hand-drawn object. Determine which oscillations of stellar luminosity are likely due to exoplanets. Establish the relationship between salary and demographic variables in population survey data.   An Aside: Nomenclature Machine learning arose as a subfield of Artificial Intelligence.\nStatistical learning arose as a subfield of Statistics.\nThere is much overlap; however, a few points of distinction:\n Machine learning has a greater emphasis on large scale applications and prediction accuracy.\n Statistical learning emphasizes models and their interpretability, and precision and uncertainty.\n But the distinction has become more and more blurred, and there is a great deal of “cross-fertilization”.   Obviously true: machine learning has the upper hand in marketing.\n Learning from Data The following are the basic requirements for statistical learning:\nA pattern exists. This pattern is not easily expressed in a closed mathematical form. You have data.  ALERT\nThe course content below should be considered a prerequisite for success. For those concerned about basics of R, you absolutely must read this content and attempt the coding exercises. If you struggle to follow the content, please contact the professor or TA.\n    R basics In this class, we will be using R software environment for all our analyses. You will learn R and data analysis techniques simultaneously. To follow along you will therefore need access to R. We also recommend the use of an integrated development environment (IDE), such as RStudio, to save your work. Note that it is common for a course or workshop to offer access to an R environment and an IDE through your web browser, as done by RStudio cloud1. If you have access to such a resource, you don’t need to install R and RStudio. However, if you intend on becoming a practicing data analyst, we highly recommend installing these tools on your computer2. This is not hard.\nBoth R and RStudio are free and available online.\nCase study: US homicides by firearm Imagine you live in Europe (if only!) and are offered a job in a US company with many locations in every state. It is a great job, but headlines such as US Gun Homicide Rate Higher Than Other Developed Countries3 have you worried. Fox News runs a scary looking graphic, and charts like the one below only add to that concern:\nOr even worse, this version from everytown.org: But then you remember that (1) this is a hypothetical exercise; (2) you’ll take literally any job at this point; and (3) Geographic diversity matters – the United States is a large and diverse country with 50 very different states (plus the District of Columbia and some lovely territories).4\n## Warning: It is deprecated to specify `guide = FALSE` to remove a guide. Please ## use `guide = \u0026quot;none\u0026quot;` instead. California, for example, has a larger population than Canada, and 20 US states have populations larger than that of Norway. In some respects, the variability across states in the US is akin to the variability across countries in Europe. Furthermore, although not included in the charts above, the murder rates in Lithuania, Ukraine, and Russia are higher than 4 per 100,000. So perhaps the news reports that worried you are too superficial.\nThis is a relatively simple and straightforward problem in social science: you have options of where to live, and want to determine the safety of the various states. Your “research” is clearly policy-relevant: you will eventually have to live somewhere. We will begin to tackle the problem by examining data related to gun homicides in the US during 2010 using R.\nBefore we get started with our example, we need to cover logistics as well as some of the very basic building blocks that are required to gain more advanced R skills. Ideally, this is a refresher. However, we are aware that your preparation in previously courses varies greatly from student to student. Moreover, we want you to be aware that the usefulness of some of these early building blocks may not be immediately obvious. Later in the class you will appreciate having these skills. Mastery will be rewarded both in this class and (of course) in life.\n The (very) basics Before we get started with the motivating dataset, we need to cover the very basics of R.\nObjects Suppose a relatively math unsavvy student asks us for help solving several quadratic equations of the form \\(ax^2+bx+c = 0\\). You—a savvy student—recall that the quadratic formula gives us the solutions:\n\\[ \\frac{-b - \\sqrt{b^2 - 4ac}}{2a}\\,\\, \\mbox{ and } \\frac{-b + \\sqrt{b^2 - 4ac}}{2a} \\]\nwhich of course depend on the values of \\(a\\), \\(b\\), and \\(c\\). That is, the quadratic equation represents a function with three arguments.\nOne advantage of programming languages is that we can define variables and write expressions with these variables, similar to how we do so in math, but obtain a numeric solution. We will write out general code for the quadratic equation below, but if we are asked to solve \\(x^2 + x -1 = 0\\), then we define:\na \u0026lt;- 1 b \u0026lt;- 1 c \u0026lt;- -1 which stores the values for later use. We use \u0026lt;- to assign values to the variables.\nWe can also assign values using = instead of \u0026lt;-, but we recommend against using = to avoid confusion.5\nTRY IT\nCopy and paste the code above into your console to define the three variables. Note that R does not print anything when we make this assignment. This means the objects were defined successfully. Had you made a mistake, you would have received an error message. Throughout these written notes, you’ll have the most success if you continue to copy code into your own console.\n To see the value stored in a variable, we simply ask R to evaluate a and it shows the stored value:\na ## [1] 1 A more explicit way to ask R to show us the value stored in a is using print like this:\nprint(a) ## [1] 1 We use the term object to describe stuff that is stored in R. Variables are examples, but objects can also be more complicated entities such as functions, which are described later.\n The workspace As we define objects in the console, we are actually changing the workspace. You can see all the variables saved in your workspace by typing:\nls() ## [1] \u0026quot;a\u0026quot; \u0026quot;b\u0026quot; \u0026quot;c\u0026quot; \u0026quot;dat\u0026quot; \u0026quot;filter\u0026quot; \u0026quot;murders\u0026quot; \u0026quot;select\u0026quot; (Note that one of my variables listed above comes from generating the graphs above). In RStudio, the Environment tab shows the values:\nWe should see a, b, and c. If you try to recover the value of a variable that is not in your workspace, you receive an error. For example, if you type x you will receive the following message: Error: object 'x' not found.\nNow since these values are saved in variables, to obtain a solution to our equation, we use the quadratic formula:\n(-b + sqrt(b^2 - 4*a*c) ) / ( 2*a ) ## [1] 0.618034 (-b - sqrt(b^2 - 4*a*c) ) / ( 2*a ) ## [1] -1.618034  Functions Once you define variables, the data analysis process can usually be described as a series of functions applied to the data. R includes several zillion predefined functions and most of the analysis pipelines we construct make extensive use of the built-in functions. But R’s power comes from its scalability. We have access to (nearly) infinite functions via install.packages and library. As we go through the course, we will carefully note new functions we bring to each problem. For now, though, we will stick to the basics.\nNote that you’ve used a function already: you used the function sqrt to solve the quadratic equation above. These functions do not appear in the workspace because you did not define them, but they are available for immediate use.\nIn general, we need to use parentheses to evaluate a function. If you type ls, the function is not evaluated and instead R shows you the code that defines the function. If you type ls() the function is evaluated and, as seen above, we see objects in the workspace.\nUnlike ls, most functions require one or more arguments. Below is an example of how we assign an object to the argument of the function log. Remember that we earlier defined a to be 1:\nlog(8) ## [1] 2.079442 log(a) ## [1] 0 You can find out what the function expects and what it does by reviewing the very useful manuals included in R. You can get help by using the help function like this:\nhelp(\u0026quot;log\u0026quot;) For most functions, we can also use this shorthand:\n?log The help page will show you what arguments the function is expecting. For example, log needs x and base to run. However, some arguments are required and others are optional. You can determine which arguments are optional by noting in the help document that a default value is assigned with =. Defining these is optional.6 For example, the base of the function log defaults to base = exp(1)—that is, log evaluates the natural log by default.\nIf you want a quick look at the arguments without opening the help system, you can type:\nargs(log) ## function (x, base = exp(1)) ## NULL You can change the default values by simply assigning another object:\nlog(8, base = 2) ## [1] 3 Note that we have not been specifying the argument x as such:\nlog(x = 8, base = 2) ## [1] 3 The above code works, but we can save ourselves some typing: if no argument name is used, R assumes you are entering arguments in the order shown in the help file or by args. So by not using the names, it assumes the arguments are x followed by base:\nlog(8,2) ## [1] 3 If using the arguments’ names, then we can include them in whatever order we want:\nlog(base = 2, x = 8) ## [1] 3 To specify arguments, we must use =, and cannot use \u0026lt;-.\nThere are some exceptions to the rule that functions need the parentheses to be evaluated. Among these, the most commonly used are the arithmetic and relational operators. For example:\n2 ^ 3 ## [1] 8 You can see the arithmetic operators by typing:\nhelp(\u0026quot;+\u0026quot;) or\n?\u0026quot;+\u0026quot; and the relational operators by typing:\nhelp(\u0026quot;\u0026gt;\u0026quot;) or\n?\u0026quot;\u0026gt;\u0026quot;  Other prebuilt objects There are several datasets that are included for users to practice and test out functions. You can see all the available datasets by typing:\ndata() This shows you the object name for these datasets. These datasets are objects that can be used by simply typing the name. For example, if you type:\nco2 R will show you Mauna Loa atmospheric \\(CO^2\\) concentration data.\nOther prebuilt objects are mathematical quantities, such as the constant \\(\\pi\\) and \\(\\infty\\):\npi ## [1] 3.141593 Inf+1 ## [1] Inf  Variable names We have used the letters a, b, and c as variable names, but variable names can be almost anything. Some basic rules in R are that variable names have to start with a letter, can’t contain spaces, and should not be variables that are predefined in R. For example, don’t name one of your variables install.packages by typing something like install.packages \u0026lt;- 2. Usually, R is smart enough to prevent you from doing such nonsense, but it’s important to develop good habits.\nA nice convention to follow is to use meaningful words that describe what is stored, use only lower case, and use underscores as a substitute for spaces. For the quadratic equations, we could use something like this:\nsolution_1 \u0026lt;- (-b + sqrt(b^2 - 4*a*c)) / (2*a) solution_2 \u0026lt;- (-b - sqrt(b^2 - 4*a*c)) / (2*a) For more advice, we highly recommend studying (Hadley Wickham’s style guide)[http://adv-r.had.co.nz/Style.html].\n Saving your workspace Values remain in the workspace until you end your session or erase them with the function rm. But workspaces also can be saved for later use. In fact, when you quit R, the program asks you if you want to save your workspace. If you do save it, the next time you start R, the program will restore the workspace.\nWe actually recommend against saving the workspace this way because, as you start working on different projects, it will become harder to keep track of what is saved. Instead, we recommend you assign the workspace a specific name. You can do this by using the function save or save.image. To load, use the function load. When saving a workspace, we recommend the suffix rda or RData. In RStudio, you can also do this by navigating to the Session tab and choosing Save Workspace as. You can later load it using the Load Workspace options in the same tab. You can read the help pages on save, save.image, and load to learn more.\n Motivating scripts To solve another equation such as \\(3x^2 + 2x -1\\), we can copy and paste the code above and then redefine the variables and recompute the solution:\na \u0026lt;- 3 b \u0026lt;- 2 c \u0026lt;- -1 (-b + sqrt(b^2 - 4*a*c)) / (2*a) (-b - sqrt(b^2 - 4*a*c)) / (2*a) By creating and saving a script with the code above, we would not need to retype everything each time and, instead, simply change the variable names. Try writing the script above into an editor and notice how easy it is to change the variables and receive an answer.\n Commenting your code If a line of R code starts with the symbol #, it is not evaluated. We can use this to write reminders of why we wrote particular code. For example, in the script above we could add:\n## Code to compute solution to quadratic equation of the form ax^2 + bx + c ## define the variables a \u0026lt;- 3 b \u0026lt;- 2 c \u0026lt;- -1 ## now compute the solution (-b + sqrt(b^2 - 4*a*c)) / (2*a) (-b - sqrt(b^2 - 4*a*c)) / (2*a) TRY IT\nWhat is the sum of the first 100 positive integers? The formula for the sum of integers \\(1\\) through \\(n\\) is \\(n(n+1)/2\\). Define \\(n=100\\) and then use R to compute the sum of \\(1\\) through \\(100\\) using the formula. What is the sum?\n Now use the same formula to compute the sum of the integers from 1 through 1,000.\n Look at the result of typing the following code into R:\n  n \u0026lt;- 1000 x \u0026lt;- seq(1, n) sum(x) Based on the result, what do you think the functions seq and sum do? You can use help.\nsum creates a list of numbers and seq adds them up. seq creates a list of numbers and sum adds them up. seq creates a random list and sum computes the sum of 1 through 1,000. sum always returns the same number.  In math and programming, we say that we evaluate a function when we replace the argument with a given number. So if we type sqrt(4), we evaluate the sqrt function. In R, you can evaluate a function inside another function. The evaluations happen from the inside out. Use one line of code to compute the log, in base 10, of the square root of 100.\n Which of the following will always return the numeric value stored in x? You can try out examples and use the help system if you want.\n  log(10^x) log10(x^10) log(exp(x)) exp(log(x, base = 2))     Data types Variables in R can be of different types. For example, we need to distinguish numbers from character strings and tables from simple lists of numbers. The function class helps us determine what type of object we have:\na \u0026lt;- 2 class(a) ## [1] \u0026quot;numeric\u0026quot; To work efficiently in R, it is important to learn the different types of variables and what we can do with these.\nData frames Up to now, the variables we have defined are just one number. This is not very useful for storing data. The most common way of storing a dataset in R is in a data frame. Conceptually, we can think of a data frame as a table with rows representing observations and the different variables reported for each observation defining the columns. Data frames are particularly useful for datasets because we can combine different data types into one object.\nA large proportion of data analysis challenges start with data stored in a data frame. For example, we stored the data for our motivating example in a data frame. You can access this dataset by loading the dslabs library and loading the murders dataset using the data function:\nlibrary(dslabs) data(murders) To see that this is in fact a data frame, we type:\nclass(murders) ## [1] \u0026quot;data.frame\u0026quot;  Examining an object The function str is useful for finding out more about the structure of an object:\nstr(murders) ## \u0026#39;data.frame\u0026#39;: 51 obs. of 5 variables: ## $ state : chr \u0026quot;Alabama\u0026quot; \u0026quot;Alaska\u0026quot; \u0026quot;Arizona\u0026quot; \u0026quot;Arkansas\u0026quot; ... ## $ abb : chr \u0026quot;AL\u0026quot; \u0026quot;AK\u0026quot; \u0026quot;AZ\u0026quot; \u0026quot;AR\u0026quot; ... ## $ region : Factor w/ 4 levels \u0026quot;Northeast\u0026quot;,\u0026quot;South\u0026quot;,..: 2 4 4 2 4 4 1 2 2 2 ... ## $ population: num 4779736 710231 6392017 2915918 37253956 ... ## $ total : num 135 19 232 93 1257 ... This tells us much more about the object. We see that the table has 51 rows (50 states plus DC) and five variables. We can show the first six lines using the function head:\nhead(murders) ## state abb region population total ## 1 Alabama AL South 4779736 135 ## 2 Alaska AK West 710231 19 ## 3 Arizona AZ West 6392017 232 ## 4 Arkansas AR South 2915918 93 ## 5 California CA West 37253956 1257 ## 6 Colorado CO West 5029196 65 In this dataset, each state is considered an observation and five variables are reported for each state.\nBefore we go any further in answering our original question about different states, let’s learn more about the components of this object.\n The accessor: $ For our analysis, we will need to access the different variables represented by columns included in this data frame. To do this, we use the accessor operator $ in the following way:\nmurders$population ## [1] 4779736 710231 6392017 2915918 37253956 5029196 3574097 897934 ## [9] 601723 19687653 9920000 1360301 1567582 12830632 6483802 3046355 ## [17] 2853118 4339367 4533372 1328361 5773552 6547629 9883640 5303925 ## [25] 2967297 5988927 989415 1826341 2700551 1316470 8791894 2059179 ## [33] 19378102 9535483 672591 11536504 3751351 3831074 12702379 1052567 ## [41] 4625364 814180 6346105 25145561 2763885 625741 8001024 6724540 ## [49] 1852994 5686986 563626 But how did we know to use population? Previously, by applying the function str to the object murders, we revealed the names for each of the five variables stored in this table. We can quickly access the variable names using:\nnames(murders) ## [1] \u0026quot;state\u0026quot; \u0026quot;abb\u0026quot; \u0026quot;region\u0026quot; \u0026quot;population\u0026quot; \u0026quot;total\u0026quot; It is important to know that the order of the entries in murders$population preserves the order of the rows in our data table. This will later permit us to manipulate one variable based on the results of another. For example, we will be able to order the state names by the number of murders.\nTip: R comes with a very nice auto-complete functionality that saves us the trouble of typing out all the names. Try typing murders$p then hitting the tab key on your keyboard. This functionality and many other useful auto-complete features are available when working in RStudio.\n Vectors: numerics, characters, and logical The object murders$population is not one number but several. We call these types of objects vectors. A single number is technically a vector of length 1, but in general we use the term vectors to refer to objects with several entries. The function length tells you how many entries are in the vector:\npop \u0026lt;- murders$population length(pop) ## [1] 51 This particular vector is numeric since population sizes are numbers:\nclass(pop) ## [1] \u0026quot;numeric\u0026quot; In a numeric vector, every entry must be a number.\nTo store character strings, vectors can also be of class character. For example, the state names are characters:\nclass(murders$state) ## [1] \u0026quot;character\u0026quot; As with numeric vectors, all entries in a character vector need to be a character.\nAnother important type of vectors are logical vectors. These must be either TRUE or FALSE.\nz \u0026lt;- 3 == 2 z ## [1] FALSE class(z) ## [1] \u0026quot;logical\u0026quot; Here the == is a relational operator asking if 3 is equal to 2. In R, if you just use one =, you actually assign a variable, but if you use two == you test for equality. Yet another reason to avoid assigning via =… it can get confusing and typos can really mess things up.\nYou can see the other relational operators by typing:\n?Comparison In future sections, you will see how useful relational operators can be.\nWe discuss more important features of vectors after the next set of exercises.\nAdvanced: Mathematically, the values in pop are integers and there is an integer class in R. However, by default, numbers are assigned class numeric even when they are round integers. For example, class(1) returns numeric. You can turn them into class integer with the as.integer() function or by adding an L like this: 1L. Note the class by typing: class(1L)\n Factors In the murders dataset, we might expect the region to also be a character vector. However, it is not:\nclass(murders$region) ## [1] \u0026quot;factor\u0026quot; It is a factor. Factors are useful for storing categorical data. We can see that there are only 4 regions by using the levels function:\nlevels(murders$region) ## [1] \u0026quot;Northeast\u0026quot; \u0026quot;South\u0026quot; \u0026quot;North Central\u0026quot; \u0026quot;West\u0026quot; In the background, R stores these levels as integers and keeps a map to keep track of the labels. This is more memory efficient than storing all the characters. It is also useful for computational reasons we’ll explore later.\nNote that the levels have an order that is different from the order of appearance in the factor object. The default in R is for the levels to follow alphabetical order. However, often we want the levels to follow a different order. You can specify an order through the levels argument when creating the factor with the factor function. For example, in the murders dataset regions are ordered from east to west. The function reorder lets us change the order of the levels of a factor variable based on a summary computed on a numeric vector. We will demonstrate this with a simple example, and will see more advanced ones in the Data Visualization part of the book.\nSuppose we want the levels of the region by the total number of murders rather than alphabetical order. If there are values associated with each level, we can use the reorder and specify a data summary to determine the order. The following code takes the sum of the total murders in each region, and reorders the factor following these sums.\nregion \u0026lt;- murders$region value \u0026lt;- murders$total region \u0026lt;- reorder(region, value, FUN = sum) levels(region) ## [1] \u0026quot;Northeast\u0026quot; \u0026quot;North Central\u0026quot; \u0026quot;West\u0026quot; \u0026quot;South\u0026quot; The new order is in agreement with the fact that the Northeast has the least murders and the South has the most.\nWarning: Factors can be a source of confusion since sometimes they behave like characters and sometimes they do not. As a result, confusing factors and characters are a common source of bugs.\n Lists Data frames are a special case of lists. We will cover lists in more detail later, but know that they are useful because you can store any combination of different types. Below is an example of a list we created for you:\nrecord ## $name ## [1] \u0026quot;John Doe\u0026quot; ## ## $student_id ## [1] 1234 ## ## $grades ## [1] 95 82 91 97 93 ## ## $final_grade ## [1] \u0026quot;A\u0026quot; class(record) ## [1] \u0026quot;list\u0026quot; As with data frames, you can extract the components of a list with the accessor $. In fact, data frames are a type of list.\nrecord$student_id ## [1] 1234 We can also use double square brackets ([[) like this:\nrecord[[\u0026quot;student_id\u0026quot;]] ## [1] 1234 You should get used to the fact that in R there are often several ways to do the same thing. such as accessing entries.7\nYou might also encounter lists without variable names.\nrecord2 ## [[1]] ## [1] \u0026quot;John Doe\u0026quot; ## ## [[2]] ## [1] 1234 If a list does not have names, you cannot extract the elements with $, but you can still use the brackets method and instead of providing the variable name, you provide the list index, like this:\nrecord2[[1]] ## [1] \u0026quot;John Doe\u0026quot; We won’t be using lists until later, but you might encounter one in your own exploration of R. For this reason, we show you some basics here.\n Matrices Matrices are another type of object that are common in R. Matrices are similar to data frames in that they are two-dimensional: they have rows and columns. However, like numeric, character and logical vectors, entries in matrices have to be all the same type. For this reason data frames are much more useful for storing data, since we can have characters, factors, and numbers in them.\nYet matrices have a major advantage over data frames: we can perform matrix algebra operations, a powerful type of mathematical technique. We do not describe these operations in this class, but much of what happens in the background when you perform a data analysis involves matrices. We describe them briefly here since some of the functions we will learn return matrices.\nWe can define a matrix using the matrix function. We need to specify the number of rows and columns.\nmat \u0026lt;- matrix(1:12, 4, 3) mat ## [,1] [,2] [,3] ## [1,] 1 5 9 ## [2,] 2 6 10 ## [3,] 3 7 11 ## [4,] 4 8 12 You can access specific entries in a matrix using square brackets ([). If you want the second row, third column, you use:\nmat[2, 3] ## [1] 10 If you want the entire second row, you leave the column spot empty:\nmat[2, ] ## [1] 2 6 10 Notice that this returns a vector, not a matrix.\nSimilarly, if you want the entire third column, you leave the row spot empty:\nmat[, 3] ## [1] 9 10 11 12 This is also a vector, not a matrix.\nYou can access more than one column or more than one row if you like. This will give you a new matrix.\nmat[, 2:3] ## [,1] [,2] ## [1,] 5 9 ## [2,] 6 10 ## [3,] 7 11 ## [4,] 8 12 You can subset both rows and columns:\nmat[1:2, 2:3] ## [,1] [,2] ## [1,] 5 9 ## [2,] 6 10 We can convert matrices into data frames using the function as.data.frame:\nas.data.frame(mat) ## V1 V2 V3 ## 1 1 5 9 ## 2 2 6 10 ## 3 3 7 11 ## 4 4 8 12 You can also use single square brackets ([) to access rows and columns of a data frame:\ndata(\u0026quot;murders\u0026quot;) murders[25, 1] ## [1] \u0026quot;Mississippi\u0026quot; murders[2:3, ] ## state abb region population total ## 2 Alaska AK West 710231 19 ## 3 Arizona AZ West 6392017 232 TRY IT\nLoad the US murders dataset.  library(dslabs) data(murders) Use the function str to examine the structure of the murders object. Which of the following best describes the variables represented in this data frame?\nThe 51 states. The murder rates for all 50 states and DC. The state name, the abbreviation of the state name, the state’s region, and the state’s population and total number of murders for 2010. str shows no relevant information.  What are the column names used by the data frame for these five variables?\n Use the accessor $ to extract the state abbreviations and assign them to the object a. What is the class of this object?\n Now use the square brackets to extract the state abbreviations and assign them to the object b. Use the identical function to determine if a and b are the same.\n We saw that the region column stores a factor. You can corroborate this by typing:\n  class(murders$region) With one line of code, use the function levels and length to determine the number of regions defined by this dataset.\nThe function table takes a vector and returns the frequency of each element. You can quickly see how many states are in each region by applying this function. Use this function in one line of code to create a table of states per region.     Vectors In R, the most basic objects available to store data are vectors. As we have seen, complex datasets can usually be broken down into components that are vectors. For example, in a data frame, each column is a vector. Here we learn more about this important class.\nCreating vectors We can create vectors using the function c, which stands for concatenate. We use c to concatenate entries in the following way:\ncodes \u0026lt;- c(380, 124, 818) codes ## [1] 380 124 818 We can also create character vectors. We use the quotes to denote that the entries are characters rather than variable names.\ncountry \u0026lt;- c(\u0026quot;italy\u0026quot;, \u0026quot;canada\u0026quot;, \u0026quot;egypt\u0026quot;) In R you can also use single quotes:\ncountry \u0026lt;- c(\u0026#39;italy\u0026#39;, \u0026#39;canada\u0026#39;, \u0026#39;egypt\u0026#39;) But be careful not to confuse the single quote ’ with the back quote, which shares a keyboard key with ~.\nBy now you should know that if you type:\ncountry \u0026lt;- c(italy, canada, egypt) you receive an error because the variables italy, canada, and egypt are not defined. If we do not use the quotes, R looks for variables with those names and returns an error.\n Names Sometimes it is useful to name the entries of a vector. For example, when defining a vector of country codes, we can use the names to connect the two:\ncodes \u0026lt;- c(italy = 380, canada = 124, egypt = 818) codes ## italy canada egypt ## 380 124 818 The object codes continues to be a numeric vector:\nclass(codes) ## [1] \u0026quot;numeric\u0026quot; but with names:\nnames(codes) ## [1] \u0026quot;italy\u0026quot; \u0026quot;canada\u0026quot; \u0026quot;egypt\u0026quot; If the use of strings without quotes looks confusing, know that you can use the quotes as well:\ncodes \u0026lt;- c(\u0026quot;italy\u0026quot; = 380, \u0026quot;canada\u0026quot; = 124, \u0026quot;egypt\u0026quot; = 818) codes ## italy canada egypt ## 380 124 818 There is no difference between this function call and the previous one. This is one of the many ways in which R is quirky compared to other languages.\nWe can also assign names using the names functions:\ncodes \u0026lt;- c(380, 124, 818) country \u0026lt;- c(\u0026quot;italy\u0026quot;,\u0026quot;canada\u0026quot;,\u0026quot;egypt\u0026quot;) names(codes) \u0026lt;- country codes ## italy canada egypt ## 380 124 818  Sequences Another useful function for creating vectors generates sequences:\nseq(1, 10) ## [1] 1 2 3 4 5 6 7 8 9 10 The first argument defines the start, and the second defines the end which is included. The default is to go up in increments of 1, but a third argument lets us tell it how much to jump by:\nseq(1, 10, 2) ## [1] 1 3 5 7 9 If we want consecutive integers, we can use the following shorthand:\n1:10 ## [1] 1 2 3 4 5 6 7 8 9 10 When we use these functions, R produces integers, not numerics, because they are typically used to index something:\nclass(1:10) ## [1] \u0026quot;integer\u0026quot; However, if we create a sequence including non-integers, the class changes:\nclass(seq(1, 10, 0.5)) ## [1] \u0026quot;numeric\u0026quot;  Subsetting We use square brackets to access specific elements of a vector. For the vector codes we defined above, we can access the second element using:\ncodes[2] ## canada ## 124 You can get more than one entry by using a multi-entry vector as an index:\ncodes[c(1,3)] ## italy egypt ## 380 818 The sequences defined above are particularly useful if we want to access, say, the first two elements:\ncodes[1:2] ## italy canada ## 380 124 If the elements have names, we can also access the entries using these names. Below are two examples.\ncodes[\u0026quot;canada\u0026quot;] ## canada ## 124 codes[c(\u0026quot;egypt\u0026quot;,\u0026quot;italy\u0026quot;)] ## egypt italy ## 818 380   Coercion In general, coercion is an attempt by R to be flexible with data types. When an entry does not match the expected, some of the prebuilt R functions try to guess what was meant before throwing an error. This can also lead to confusion. Failing to understand coercion can drive programmers crazy when attempting to code in R since it behaves quite differently from most other languages in this regard. Let’s learn about it with some examples.\nWe said that vectors must be all of the same type. So if we try to combine, say, numbers and characters, you might expect an error:\nx \u0026lt;- c(1, \u0026quot;canada\u0026quot;, 3) But we don’t get one, not even a warning! What happened? Look at x and its class:\nx ## [1] \u0026quot;1\u0026quot; \u0026quot;canada\u0026quot; \u0026quot;3\u0026quot; class(x) ## [1] \u0026quot;character\u0026quot; R coerced the data into characters. It guessed that because you put a character string in the vector, you meant the 1 and 3 to actually be character strings \"1\" and “3”. The fact that not even a warning is issued is an example of how coercion can cause many unnoticed errors in R.\nR also offers functions to change from one type to another. For example, you can turn numbers into characters with:\nx \u0026lt;- 1:5 y \u0026lt;- as.character(x) y ## [1] \u0026quot;1\u0026quot; \u0026quot;2\u0026quot; \u0026quot;3\u0026quot; \u0026quot;4\u0026quot; \u0026quot;5\u0026quot; You can turn it back with as.numeric:\nas.numeric(y) ## [1] 1 2 3 4 5 This function is actually quite useful since datasets that include numbers as character strings are common.\nNot availables (NA) This “topic” seems to be wholly unappreciated and it has been our experience that students often panic when encountering an NA. This often happens when a function tries to coerce one type to another and encounters an impossible case. In such circumstances, R usually gives us a warning and turns the entry into a special value called an NA (for “not available”). For example:\nx \u0026lt;- c(\u0026quot;1\u0026quot;, \u0026quot;b\u0026quot;, \u0026quot;3\u0026quot;) as.numeric(x) ## Warning: NAs introduced by coercion ## [1] 1 NA 3 R does not have any guesses for what number you want when you type b, so it does not try.\nWhile coercion is a common case leading to NAs, you’ll see them in nearly every real-world dataset. Most often, you will encounter the NAs as a stand-in for missing data. Again, this a common problem in real-world datasets and you need to be aware that it will come up.\n  Sorting Now that we have mastered some basic R knowledge (ha!), let’s try to gain some insights into the safety of different states in the context of gun murders.\nsort Say we want to rank the states from least to most gun murders. The function sort sorts a vector in increasing order. We can therefore see the largest number of gun murders by typing:\nlibrary(dslabs) data(murders) sort(murders$total) ## [1] 2 4 5 5 7 8 11 12 12 16 19 21 22 27 32 ## [16] 36 38 53 63 65 67 84 93 93 97 97 99 111 116 118 ## [31] 120 135 142 207 219 232 246 250 286 293 310 321 351 364 376 ## [46] 413 457 517 669 805 1257 However, this does not give us information about which states have which murder totals. For example, we don’t know which state had 1257.\n order The function order is closer to what we want. It takes a vector as input and returns the vector of indexes that sorts the input vector. This may sound confusing so let’s look at a simple example. We can create a vector and sort it:\nx \u0026lt;- c(31, 4, 15, 92, 65) sort(x) ## [1] 4 15 31 65 92 Rather than sort the input vector, the function order returns the index that sorts input vector:\nindex \u0026lt;- order(x) x[index] ## [1] 4 15 31 65 92 This is the same output as that returned by sort(x). If we look at this index, we see why it works:\nx ## [1] 31 4 15 92 65 order(x) ## [1] 2 3 1 5 4 The second entry of x is the smallest, so order(x) starts with 2. The next smallest is the third entry, so the second entry is 3 and so on.\nHow does this help us order the states by murders? First, remember that the entries of vectors you access with $ follow the same order as the rows in the table. For example, these two vectors containing state names and abbreviations, respectively, are matched by their order:\nmurders$state[1:6] ## [1] \u0026quot;Alabama\u0026quot; \u0026quot;Alaska\u0026quot; \u0026quot;Arizona\u0026quot; \u0026quot;Arkansas\u0026quot; \u0026quot;California\u0026quot; ## [6] \u0026quot;Colorado\u0026quot; murders$abb[1:6] ## [1] \u0026quot;AL\u0026quot; \u0026quot;AK\u0026quot; \u0026quot;AZ\u0026quot; \u0026quot;AR\u0026quot; \u0026quot;CA\u0026quot; \u0026quot;CO\u0026quot; This means we can order the state names by their total murders. We first obtain the index that orders the vectors according to murder totals and then index the state names vector:\nind \u0026lt;- order(murders$total) murders$abb[ind] ## [1] \u0026quot;VT\u0026quot; \u0026quot;ND\u0026quot; \u0026quot;NH\u0026quot; \u0026quot;WY\u0026quot; \u0026quot;HI\u0026quot; \u0026quot;SD\u0026quot; \u0026quot;ME\u0026quot; \u0026quot;ID\u0026quot; \u0026quot;MT\u0026quot; \u0026quot;RI\u0026quot; \u0026quot;AK\u0026quot; \u0026quot;IA\u0026quot; \u0026quot;UT\u0026quot; \u0026quot;WV\u0026quot; \u0026quot;NE\u0026quot; ## [16] \u0026quot;OR\u0026quot; \u0026quot;DE\u0026quot; \u0026quot;MN\u0026quot; \u0026quot;KS\u0026quot; \u0026quot;CO\u0026quot; \u0026quot;NM\u0026quot; \u0026quot;NV\u0026quot; \u0026quot;AR\u0026quot; \u0026quot;WA\u0026quot; \u0026quot;CT\u0026quot; \u0026quot;WI\u0026quot; \u0026quot;DC\u0026quot; \u0026quot;OK\u0026quot; \u0026quot;KY\u0026quot; \u0026quot;MA\u0026quot; ## [31] \u0026quot;MS\u0026quot; \u0026quot;AL\u0026quot; \u0026quot;IN\u0026quot; \u0026quot;SC\u0026quot; \u0026quot;TN\u0026quot; \u0026quot;AZ\u0026quot; \u0026quot;NJ\u0026quot; \u0026quot;VA\u0026quot; \u0026quot;NC\u0026quot; \u0026quot;MD\u0026quot; \u0026quot;OH\u0026quot; \u0026quot;MO\u0026quot; \u0026quot;LA\u0026quot; \u0026quot;IL\u0026quot; \u0026quot;GA\u0026quot; ## [46] \u0026quot;MI\u0026quot; \u0026quot;PA\u0026quot; \u0026quot;NY\u0026quot; \u0026quot;FL\u0026quot; \u0026quot;TX\u0026quot; \u0026quot;CA\u0026quot; According to the above, California had the most murders.\n max and which.max If we are only interested in the entry with the largest value, we can use max for the value:\nmax(murders$total) ## [1] 1257 and which.max for the index of the largest value:\ni_max \u0026lt;- which.max(murders$total) murders$state[i_max] ## [1] \u0026quot;California\u0026quot; For the minimum, we can use min and which.min in the same way.\nDoes this mean California is the most dangerous state? In an upcoming section, we argue that we should be considering rates instead of totals. Before doing that, we introduce one last order-related function: rank.\n rank Although not as frequently used as order and sort, the function rank is also related to order and can be useful. For any given vector it returns a vector with the rank of the first entry, second entry, etc., of the input vector. Here is a simple example:\nx \u0026lt;- c(31, 4, 15, 92, 65) rank(x) ## [1] 3 1 2 5 4 To summarize, let’s look at the results of the three functions we have introduced:\n  original  sort  order  rank      31  4  2  3    4  15  3  1    15  31  1  2    92  65  5  5    65  92  4  4      Beware of recycling Another common source of unnoticed errors in R is the use of recycling. We saw that vectors are added elementwise. So if the vectors don’t match in length, it is natural to assume that we should get an error. But we don’t. Notice what happens:\nx \u0026lt;- c(1,2,3) y \u0026lt;- c(10, 20, 30, 40, 50, 60, 70) x+y ## Warning in x + y: longer object length is not a multiple of shorter object ## length ## [1] 11 22 33 41 52 63 71 We do get a warning, but no error. For the output, R has recycled the numbers in x. Notice the last digit of numbers in the output.\nTRY IT\nFor these exercises we will use the US murders dataset. Make sure you load it prior to starting.\nlibrary(dslabs) data(\u0026quot;murders\u0026quot;) Use the $ operator to access the population size data and store it as the object pop. Then use the sort function to redefine pop so that it is sorted. Finally, use the [ operator to report the smallest population size.\n Now instead of the smallest population size, find the index of the entry with the smallest population size. Hint: use order instead of sort.\n We can actually perform the same operation as in the previous exercise using the function which.min. Write one line of code that does this.\n Now we know how small the smallest state is and we know which row represents it. Which state is it? Define a variable states to be the state names from the murders data frame. Report the name of the state with the smallest population.\n You can create a data frame using the data.frame function. Here is a quick example:\n  temp \u0026lt;- c(35, 88, 42, 84, 81, 30) city \u0026lt;- c(\u0026quot;Beijing\u0026quot;, \u0026quot;Lagos\u0026quot;, \u0026quot;Paris\u0026quot;, \u0026quot;Rio de Janeiro\u0026quot;, \u0026quot;San Juan\u0026quot;, \u0026quot;Toronto\u0026quot;) city_temps \u0026lt;- data.frame(name = city, temperature = temp) Use the rank function to determine the population rank of each state from smallest population size to biggest. Save these ranks in an object called ranks, then create a data frame with the state name and its rank. Call the data frame my_df.\nRepeat the previous exercise, but this time order my_df so that the states are ordered from least populous to most populous. Hint: create an object ind that stores the indexes needed to order the population values. Then use the bracket operator [ to re-order each column in the data frame.\n The na_example vector represents a series of counts. You can quickly examine the object using:\n  data(\u0026quot;na_example\u0026quot;) str(na_example) ## int [1:1000] 2 1 3 2 1 3 1 4 3 2 ... However, when we compute the average with the function mean, we obtain an NA:\nmean(na_example) ## [1] NA The is.na function returns a logical vector that tells us which entries are NA. Assign this logical vector to an object called ind and determine how many NAs does na_example have.\nNow compute the average again, but only for the entries that are not NA. Hint: remember the ! operator.     Vector arithmetics California had the most murders, but does this mean it is the most dangerous state? What if it just has many more people than any other state? We can quickly confirm that California indeed has the largest population:\nlibrary(dslabs) data(\u0026quot;murders\u0026quot;) murders$state[which.max(murders$population)] ## [1] \u0026quot;California\u0026quot; with over 37 million inhabitants. It is therefore unfair to compare the totals if we are interested in learning how safe the state is. What we really should be computing is the murders per capita. The reports we describe in the motivating section used murders per 100,000 as the unit. To compute this quantity, the powerful vector arithmetic capabilities of R come in handy.\nRescaling a vector In R, arithmetic operations on vectors occur element-wise. For a quick example, suppose we have height in inches:\ninches \u0026lt;- c(69, 62, 66, 70, 70, 73, 67, 73, 67, 70) and want to convert to centimeters. Notice what happens when we multiply inches by 2.54:\ninches * 2.54 ## [1] 175.26 157.48 167.64 177.80 177.80 185.42 170.18 185.42 170.18 177.80 In the line above, we multiplied each element by 2.54. Similarly, if for each entry we want to compute how many inches taller or shorter than 69 inches, the average height for males, we can subtract it from every entry like this:\ninches - 69 ## [1] 0 -7 -3 1 1 4 -2 4 -2 1  Two vectors If we have two vectors of the same length, and we sum them in R, they will be added entry by entry as follows:\n\\[ \\begin{pmatrix} a\\\\ b\\\\ c\\\\ d \\end{pmatrix} + \\begin{pmatrix} e\\\\ f\\\\ g\\\\ h \\end{pmatrix} = \\begin{pmatrix} a +e\\\\ b + f\\\\ c + g\\\\ d + h \\end{pmatrix} \\]\nThe same holds for other mathematical operations, such as -, * and /.\nThis implies that to compute the murder rates we can simply type:\nmurder_rate \u0026lt;- murders$total / murders$population * 100000 Once we do this, we notice that California is no longer near the top of the list. In fact, we can use what we have learned to order the states by murder rate:\nmurders$abb[order(murder_rate)] ## [1] \u0026quot;VT\u0026quot; \u0026quot;NH\u0026quot; \u0026quot;HI\u0026quot; \u0026quot;ND\u0026quot; \u0026quot;IA\u0026quot; \u0026quot;ID\u0026quot; \u0026quot;UT\u0026quot; \u0026quot;ME\u0026quot; \u0026quot;WY\u0026quot; \u0026quot;OR\u0026quot; \u0026quot;SD\u0026quot; \u0026quot;MN\u0026quot; \u0026quot;MT\u0026quot; \u0026quot;CO\u0026quot; \u0026quot;WA\u0026quot; ## [16] \u0026quot;WV\u0026quot; \u0026quot;RI\u0026quot; \u0026quot;WI\u0026quot; \u0026quot;NE\u0026quot; \u0026quot;MA\u0026quot; \u0026quot;IN\u0026quot; \u0026quot;KS\u0026quot; \u0026quot;NY\u0026quot; \u0026quot;KY\u0026quot; \u0026quot;AK\u0026quot; \u0026quot;OH\u0026quot; \u0026quot;CT\u0026quot; \u0026quot;NJ\u0026quot; \u0026quot;AL\u0026quot; \u0026quot;IL\u0026quot; ## [31] \u0026quot;OK\u0026quot; \u0026quot;NC\u0026quot; \u0026quot;NV\u0026quot; \u0026quot;VA\u0026quot; \u0026quot;AR\u0026quot; \u0026quot;TX\u0026quot; \u0026quot;NM\u0026quot; \u0026quot;CA\u0026quot; \u0026quot;FL\u0026quot; \u0026quot;TN\u0026quot; \u0026quot;PA\u0026quot; \u0026quot;AZ\u0026quot; \u0026quot;GA\u0026quot; \u0026quot;MS\u0026quot; \u0026quot;MI\u0026quot; ## [46] \u0026quot;DE\u0026quot; \u0026quot;SC\u0026quot; \u0026quot;MD\u0026quot; \u0026quot;MO\u0026quot; \u0026quot;LA\u0026quot; \u0026quot;DC\u0026quot; TRY IT\nPreviously we created this data frame:  temp \u0026lt;- c(35, 88, 42, 84, 81, 30) city \u0026lt;- c(\u0026quot;Beijing\u0026quot;, \u0026quot;Lagos\u0026quot;, \u0026quot;Paris\u0026quot;, \u0026quot;Rio de Janeiro\u0026quot;, \u0026quot;San Juan\u0026quot;, \u0026quot;Toronto\u0026quot;) city_temps \u0026lt;- data.frame(name = city, temperature = temp) Remake the data frame using the code above, but add a line that converts the temperature from Fahrenheit to Celsius. The conversion is \\(C = \\frac{5}{9} \\times (F - 32)\\).\nWrite code to compute the following sum \\(1+1/2^2 + 1/3^2 + \\dots 1/100^2\\)? Hint: thanks to Euler, we know it should be close to \\(\\pi^2/6\\).\n Compute the per 100,000 murder rate for each state and store it in the object murder_rate. Then compute the average murder rate for the US using the function mean. What is the average?\n     Indexing Indexing is a boring name for an important tool. R provides a powerful and convenient way of referencing specific elements of vectors. We can, for example, subset a vector based on properties of another vector. In this section, we continue working with our US murders example, which we can load like this:\nlibrary(dslabs) data(\u0026quot;murders\u0026quot;) Subsetting with logicals We have now calculated the murder rate using:\nmurder_rate \u0026lt;- murders$total / murders$population * 100000 Imagine you are moving from Italy where, according to an ABC news report, the murder rate is only 0.71 per 100,000. You would prefer to move to a state with a similar murder rate. Another powerful feature of R is that we can use logicals to index vectors. If we compare a vector to a single number, it actually performs the test for each entry. The following is an example related to the question above:\nind \u0026lt;- murder_rate \u0026lt; 0.71 If we instead want to know if a value is less or equal, we can use:\nind \u0026lt;- murder_rate \u0026lt;= 0.71 Note that we get back a logical vector with TRUE for each entry smaller than or equal to 0.71. To see which states these are, we can leverage the fact that vectors can be indexed with logicals.\nmurders$state[ind] ## [1] \u0026quot;Hawaii\u0026quot; \u0026quot;Iowa\u0026quot; \u0026quot;New Hampshire\u0026quot; \u0026quot;North Dakota\u0026quot; ## [5] \u0026quot;Vermont\u0026quot; In order to count how many are TRUE, the function sum returns the sum of the entries of a vector and logical vectors get coerced to numeric with TRUE coded as 1 and FALSE as 0. Thus we can count the states using:\nsum(ind) ## [1] 5  Logical operators Suppose we like the mountains and we want to move to a safe state in the western region of the country. We want the murder rate to be at most 1. In this case, we want two different things to be true. Here we can use the logical operator and, which in R is represented with \u0026amp;. This operation results in TRUE only when both logicals are TRUE. To see this, consider this example:\nTRUE \u0026amp; TRUE ## [1] TRUE TRUE \u0026amp; FALSE ## [1] FALSE FALSE \u0026amp; FALSE ## [1] FALSE For our example, we can form two logicals:\nwest \u0026lt;- murders$region == \u0026quot;West\u0026quot; safe \u0026lt;- murder_rate \u0026lt;= 1 and we can use the \u0026amp; to get a vector of logicals that tells us which states satisfy both conditions:\nind \u0026lt;- safe \u0026amp; west murders$state[ind] ## [1] \u0026quot;Hawaii\u0026quot; \u0026quot;Idaho\u0026quot; \u0026quot;Oregon\u0026quot; \u0026quot;Utah\u0026quot; \u0026quot;Wyoming\u0026quot;  which Suppose we want to look up California’s murder rate. For this type of operation, it is convenient to convert vectors of logicals into indexes instead of keeping long vectors of logicals. The function which tells us which entries of a logical vector are TRUE. So we can type:\nind \u0026lt;- which(murders$state == \u0026quot;California\u0026quot;) murder_rate[ind] ## [1] 3.374138  match If instead of just one state we want to find out the murder rates for several states, say New York, Florida, and Texas, we can use the function match. This function tells us which indexes of a second vector match each of the entries of a first vector:\nind \u0026lt;- match(c(\u0026quot;New York\u0026quot;, \u0026quot;Florida\u0026quot;, \u0026quot;Texas\u0026quot;), murders$state) ind ## [1] 33 10 44 Now we can look at the murder rates:\nmurder_rate[ind] ## [1] 2.667960 3.398069 3.201360  %in% If rather than an index we want a logical that tells us whether or not each element of a first vector is in a second, we can use the function %in%. Let’s imagine you are not sure if Boston, Dakota, and Washington are states. You can find out like this:\nc(\u0026quot;Boston\u0026quot;, \u0026quot;Dakota\u0026quot;, \u0026quot;Washington\u0026quot;) %in% murders$state ## [1] FALSE FALSE TRUE Note that we will be using %in% often throughout the book.\nAdvanced: There is a connection between match and %in% through which. To see this, notice that the following two lines produce the same index (although in different order):\nmatch(c(\u0026quot;New York\u0026quot;, \u0026quot;Florida\u0026quot;, \u0026quot;Texas\u0026quot;), murders$state) ## [1] 33 10 44 which(murders$state%in%c(\u0026quot;New York\u0026quot;, \u0026quot;Florida\u0026quot;, \u0026quot;Texas\u0026quot;)) ## [1] 10 33 44   Rmarkdown If you’re new to Rmarkdown, a previous instructor (Prof. Kirkpatrick) has provided a short video on how to use it . This video is for his EC420 course, but the principles are universal.\nEXERCISES\nStart by loading the library and data.\nlibrary(dslabs) data(murders) Compute the per 100,000 murder rate for each state and store it in an object called murder_rate. Then use logical operators to create a logical vector named low that tells us which entries of murder_rate are lower than 1.\n Now use the results from the previous exercise and the function which to determine the indices of murder_rate associated with values lower than 1.\n Use the results from the previous exercise to report the names of the states with murder rates lower than 1.\n Now extend the code from exercises 2 and 3 to report the states in the Northeast with murder rates lower than 1. Hint: use the previously defined logical vector low and the logical operator \u0026amp;.\n In a previous exercise we computed the murder rate for each state and the average of these numbers. How many states are below the average?\n Use the match function to identify the states with abbreviations AK, MI, and IA. Hint: start by defining an index of the entries of murders$abb that match the three abbreviations, then use the [ operator to extract the states.\n Use the %in% operator to create a logical vector that answers the question: which of the following are actual abbreviations: MA, ME, MI, MO, MU?\n Extend the code you used in exercise 7 to report the one entry that is not an actual abbreviation. Hint: use the ! operator, which turns FALSE into TRUE and vice versa, then which to obtain an index.\n      https://rstudio.cloud↩︎\n https://rafalab.github.io/dsbook/installing-r-rstudio.html↩︎\n http://abcnews.go.com/blogs/headlines/2012/12/us-gun-ownership-homicide-rate-higher-than-other-developed-countries/↩︎\n I’m especially partial to Puerto Rico.↩︎\n This is, without a doubt, my least favorite aspect of R. I’d even venture to call it stupid. The logic behind this pesky \u0026lt;- is a total mystery to me, but there is logic to avoiding =. But, you do you.↩︎\n This equals sign is the reasons we assign values with \u0026lt;-; then when arguments of a function are assigned values, we don’t end up with multiple equals signs. But… who cares.↩︎\n Whether you view this as a feature or a bug is a good indicator whether you’ll enjoy working with R.↩︎\n   ","date":1609286400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1632838512,"objectID":"fbbae951c935dd3d35f82710943d5efd","permalink":"https://ssc442.netlify.app/content/01-content/","publishdate":"2020-12-30T00:00:00Z","relpermalink":"/content/01-content/","section":"content","summary":"Readings A Brief Introduction to SSC442  About Me About You This Course More About This Course And finally… Guiding Questions  What is “Data Analytics”?  Starting point for this course  Statistical Learning The Pros and Cons of Correlation A Case Study in Prediction More Recent Examples of Prediction An Aside: Nomenclature Learning from Data   R basics  Case study: US homicides by firearm The (very) basics  Objects The workspace Functions Other prebuilt objects Variable names Saving your workspace Motivating scripts Commenting your code  Data types  Data frames Examining an object The accessor: $ Vectors: numerics, characters, and logical Factors Lists Matrices  Vectors  Creating vectors Names Sequences Subsetting  Coercion  Not availables (NA)  Sorting  sort order max and which.","tags":null,"title":"Welcome Back to R","type":"docs"},{"authors":null,"categories":null,"content":"  Below is a roadmap for the semester. Note that this will inevitably change from the first day you access this course. However, whatever is listed below should be considered canon. Accordingly, you should visit this page frequently throughout the term.\nAs mentioned in the syllabus, the course is structured by topics. Each week introduces a new topic. Within each week, there are three elements of the course—these are described below.\nOverview The class is structured with three distinct bits. First, the Tuesday lecture will give an overview of the topic for the week. Next, the Thursday lecture will have a shorter, practical lecture and an activity which is designed to give you hands-on experience and a greater understanding of the broader material. Finally, you will complete weekly writings (short) and labs (also short; requiring coding in R). Out of class, you will complete readings and can watch supplemental videos on the week’s topic. You are not required to view supplemental recorded videos unless specifically noted.\n Content (): This page contains the readings and recorded lectures for the topic. These pages should be read completely. Lectures are not an exact replication of the written content; on the contrary, the lectures are intended to keep you focused on the high-level ideas, while the readings are broader and more comprehensive. Accordingly, lectures are shorter than the (often quite lengthy) written content.\n Examples (): This page the material that we will discuss in Thursday classes. In addition to teaching specific content, there are many more R code examples. These are intended as a useful reference to various functions that you will need when working on (nearly) weekly labs and your group project.\n Assignments (): This page contains the instructions for the weekly lab (1–3 brief tasks) and for the two mini projects + final project. Labs are due by 11:59 PM (Eastern).\n   Office Hours (TA): To Be Determined. The teaching assistant for this course (TBD) will host office each week to help promote additional understanding. I highly encourage you to utilize this resource, especially if you struggle with basic R programming.\ntl;dr: You should follow this general process (in order) each week:\n Do everything on the content () page before Tuesday Come to the lecture on Tuesday. While “in class” on Thursday, work through the example () page Complete the lab () and the weekly writing (assigned in class) before the next Tuesday. As needed, attend the lab hours hosted by the TA.      Programming Foundations Content Example Assignment   Week 0 (30 August) (Re-) Introduction to R      Week 1 (6 September) Programming Basics, the tidyverse, and Visualization      Week 2 (13 September) Visualization II      Week 3 (20 September) Visualization III       Data Analysis Foundations Content Example Assignment   Week 4 (27 September) Probability and Statistics in R      8 October  Project 1 Due        Week 5 (4 October) Linear Regression I         Week 6 (11 October) Linear Regression II         Week 7 (18 October) Linear Regression III          Applications of Data Analysis Content Example Assignment   Week 8 (25 October) Bias vs Variance         Week 9 (1 November) Nonlinear Regression         7 November  Project 2 Due         Week 10 (8 November) Classification         Week 11 (15 November) Wrangling Data          Further Extensions Content Example Assignment   Week 12 (22 November) Geospatial Data in R         Week 12 (29 November) Text as Data         Week 14 (6 December) Advanced Topics and Analyses          Conclusions Content Example Assignment   14 December, 11:59 PM Eastern  Final Project Due          ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1631031640,"objectID":"3e223d7ba58b0122b42458e4cf52e04c","permalink":"https://ssc442.netlify.app/schedule/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/schedule/","section":"","summary":"Below is a roadmap for the semester. Note that this will inevitably change from the first day you access this course. However, whatever is listed below should be considered canon. Accordingly, you should visit this page frequently throughout the term.\nAs mentioned in the syllabus, the course is structured by topics. Each week introduces a new topic. Within each week, there are three elements of the course—these are described below.","tags":null,"title":"Schedule","type":"page"}]